{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","path":"medias/avatars/milyyy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/nanren.mp3","path":"medias/music/nanren.mp3","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/xinsheng.mp3","path":"medias/music/xinsheng.mp3","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"79deccf5645434d9b7fc4ddee53fc37d7be4bced","modified":1571464873503},{"_id":"source/CNAME","hash":"a6ad0999ab08c1c2d45314bbbf10819ce1ca9081","modified":1571450967642},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1571450967648},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1571450967649},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1571450967649},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1571450967649},{"_id":"themes/matery/_config.yml","hash":"1398754e24be43039365d193a1a206a676153501","modified":1571484513573},{"_id":"source/_data/friends.json","hash":"97cd698d18127d70a00e33b76e66d74f04100c0b","modified":1571450967642},{"_id":"source/_data/musics.json","hash":"10e906cbd757e904f019fed254b0db89978e4db1","modified":1571472637205},{"_id":"source/_posts/2017-conclusion.md","hash":"f8cabdabb5662dbc68655dbf977328ea9aaeafad","modified":1571450967643},{"_id":"source/_posts/看懂UML类图和时序图.md","hash":"f4a49193c33e2a2e1d512db55aa2e014e2d2931c","modified":1571475186207},{"_id":"source/_posts/设计模式-单例模式.md","hash":"3ada96e43a553cdb6f788af9f669271765657164","modified":1571471737229},{"_id":"source/_posts/设计模式-开篇.md","hash":"e61eba5d68007ea853232a8c23425995f78882ca","modified":1571471718430},{"_id":"source/categories/index.md","hash":"76889deb16e0d61d5c585f26a0e69f01de6cab74","modified":1571450967647},{"_id":"source/archives/index.md","hash":"a62b7d9b8a8bdf966ec5c823e71581d2b185156e","modified":1571450967646},{"_id":"source/about/index.md","hash":"e12e42ee4c0f80ca1b8f263a8613f0bef5452896","modified":1571472115572},{"_id":"source/contact/index.md","hash":"de678f5d1319d4f3a07c71ee1370453b85063266","modified":1571472083620},{"_id":"source/tags/index.md","hash":"98697833897097a5c65521ea02baa1c6f85948d8","modified":1571450967648},{"_id":"source/friends/index.md","hash":"3e9e3b653664b09c8ee5e08d27890ff7063c877d","modified":1571471983533},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1571450967651},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1571450967662},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1571450967662},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1571450967663},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1571450967662},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1571450967663},{"_id":"themes/matery/layout/friends.ejs","hash":"b9b75ff45324da5b4ddbb6e16ea1ecd239dbc310","modified":1571450967663},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1571450967664},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1571450967664},{"_id":"themes/matery/layout/post.ejs","hash":"9ecae79690293cacdccc172118f1fe481705b1f2","modified":1571450967664},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1571450967665},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1571450967664},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1571450967650},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1571450967650},{"_id":"themes/matery/source/favicon.png","hash":"287ae8aa7d9ec0d5958653d21421c183eaed7243","modified":1571476653263},{"_id":"source/_posts/2017-conclusion/1.jpg","hash":"39229d4944989a3c4a73111dcbc54b7e1545c405","modified":1571450967643},{"_id":"source/_posts/2017-conclusion/3.jpg","hash":"1597719e6158a552d12c447d5f5c1d6615d377ea","modified":1571450967644},{"_id":"source/_posts/2017-conclusion/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1571450967645},{"_id":"source/_posts/2017-conclusion/749826.jpg","hash":"1c321d51b77d08ffa6e9db10a2fb3fb80074cde0","modified":1571450967645},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1571450967651},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"6bf708dbd705b486bc464e9be8e8834bbd692850","modified":1571450967652},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1571450967652},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1571450967652},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1571450967653},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"36150f9f5603fe9d78f592f4fe69ef1f30c0dba3","modified":1571475797959},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1571450967653},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1571450967653},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1571450967653},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"d82c31a48904baf7ea13d5ea0a19e39681b8bba4","modified":1571467404409},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1571450967654},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1571450967654},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1571450967654},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1571450967655},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1571450967655},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1571450967655},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1571450967655},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1571450967656},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1571450967656},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1571450967656},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1571450967656},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1571450967657},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1571450967657},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1571450967657},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1571450967657},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"55272fab7a3303e94f1839ebd7ca6cf9965fb328","modified":1571450967658},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1571450967658},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1571450967658},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1571450967658},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1571450967659},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"2af85ddef6e61a44cbe10e8f6272a8324681ee3f","modified":1571450967659},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1571450967659},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1571450967659},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1571450967660},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1571450967660},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1571450967661},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1571450967661},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1571450967661},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1571450967660},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1571450967662},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1571450967665},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1571450967666},{"_id":"themes/matery/source/css/matery.css","hash":"b92bd5093424c4cc62f37175f1b0a54c4611a802","modified":1571450967665},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1571450967666},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1571450967667},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1571450967667},{"_id":"themes/matery/source/medias/logo.png","hash":"edb2a05e70cc755e8eeb62c5b6fb168eff0d156d","modified":1571480090492},{"_id":"source/_posts/2017-conclusion/2.jpg","hash":"4ada4f57201bd13de45dd89e3df949e2479cad7c","modified":1571450967644},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1571450967706},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1571450967706},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1571450967708},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1571450967709},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1571450967709},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1571450967709},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1571450967710},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1571450967712},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1571450967713},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1571450967713},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1571450967714},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1571450967718},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1571450967720},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1571450967728},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1571450967728},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1571450967730},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1571450967730},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1571450967731},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1571450967731},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"03b316863417741575efa12e6521173e4cd390e4","modified":1571477116901},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1571450967668},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1571450967668},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1571450967668},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1571450967680},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1571450967669},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1571450967670},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1571450967681},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1571450967686},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1571450967689},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1571450967688},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1571450967689},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1571450967694},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1571450967696},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1571450967696},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1571450967697},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1571450967697},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1571450967697},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1571450967697},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1571450967698},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1571450967701},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1571450967701},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1571450967705},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"3dbff877d0ce01dc7f2cd2a07eeaeffd3c016ea1","modified":1571476612705},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1571450967707},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1571450967708},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1571450967714},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1571450967719},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1571450967720},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1571450967729},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1571450967732},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1571450967733},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1571450967735},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1571450967735},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1571450967681},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1571450967688},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1571450967690},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1571450967702},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1571450967715},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1571450967717},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1571450967729},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"0d8315876e8285abec48ce71797a14734fdc980c","modified":1571450967770},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"5f27406bd8661bef44291601edc2784b5af63c23","modified":1571450967772},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"c86ede693175156922041c5cdb31b9f1432a0e8a","modified":1571450967776},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"7bdf83e0822794a7294fe554c5d21edda1e0c28f","modified":1571450967802},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1571450967816},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1571450967817},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1571450967818},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"0879a698bce623ebf5b7b467bef03de899f277d4","modified":1571477075713},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1571450967687},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1571450967690},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1571450967691},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1571450967691},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1571450967692},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1571450967692},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1571450967691},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1571450967692},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1571450967692},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1571450967693},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1571450967693},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1571450967695},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1571450967696},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1571450967698},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1571450967699},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1571450967699},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1571450967699},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1571450967700},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1571450967700},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1571450967701},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1571450967703},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1571450967704},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1571450967712},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1571450967716},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"6dcacca5f1d93dec5c12cab74516e415243c0a64","modified":1571450967777},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"35a945ed6f2f8a0d055f9da6e90b974b7f30c5b0","modified":1571450967789},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"7e6241a0793404fb3668b1030795e5031e0f1ba7","modified":1571450967791},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1571450967670},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1571450967680},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"e177d97cfbb0071d2ac15e99d15666cf09d5eacb","modified":1571450967757},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"575cb26b73b220a3fea685108812466fb8b68e62","modified":1571450967765},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"18cc714b6693d0336c1bbaef47ed79cc8a1d95e7","modified":1571450967769},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"5efc3856cd2da8863e9c808005c3724c09843c3c","modified":1571450967773},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"44d047bc0d29d6ae3e1d65b6cb95143d0d1b6ec2","modified":1571450967787},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"447bf84c1d9bd71491545922c8735b5b41e2121f","modified":1571450967795},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"d41c54ff1c41f5bfd4ccf5af303229059577c351","modified":1571450967803},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1571450967678},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1571450967679},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1571450967711},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"6339e06736ff6618d97cca389d7887439c87415a","modified":1571450967758},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"c72b487cf410eb99697ac6e416b1db9c10fa92ce","modified":1571450967763},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"f515cb01de6d2b1981f50f0487e9b5beb99baf43","modified":1571450967768},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"7a07b854a602cb9c8fa0db80ebd2c9b989f3de22","modified":1571450967775},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"c04a6292dc85cc47a9ec370e1bee81e0e7e65652","modified":1571450967780},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"43d1db28c3f3f953c5fd399fd959f6e92ee88fe7","modified":1571450967782},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"f4d026ea224b9d216357d4b42fbe9f002bcaa2b0","modified":1571450967793},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"4c001e19790f5ac73259138ad1713338ea34c664","modified":1571450967800},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"4cedcb5a87fa5fbc1f343c9180d4e52bb4331220","modified":1571450967806},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1571450967672},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1571450967734},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"5be9274e63d6ac02607e3d659fd32532291385fa","modified":1571450967753},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"39a1cb44e4ab3006577fefcbeecaddd1a2f62cfa","modified":1571450967755},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"3fa19adaa3c19d58e34be573f1c3233c9b57b242","modified":1571450967761},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1571450967816},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1571450967674},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1571450967742},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"5c494c93ad30b8f71c7865b42b3cf613279a914e","modified":1571450967745},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"73bae0e6812c46509b91e3155bd12ce8640b245a","modified":1571450967748},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"6f5795e2fa01a6a7f09e3419941a0fc147ea83c5","modified":1571450967750},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"8cc1c127ca8ff09d4a07f5c3b845ef2340a1106f","modified":1571450967785},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"f46e3860fbcbb63cd76023d91b7a4715e27fb231","modified":1571450967798},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"1829b3464d5715136d3feec2849c7716541e83ed","modified":1571450967811},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1571450967740},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"4d6f31f86966584360bcdbfecb6f6a2ec94f944d","modified":1571450967738},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1571450967676},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1571450967685},{"_id":"public/baidu_urls.txt","hash":"b38a21dd75cfb7f045ee3d619236e3fb5c21448a","modified":1571484434227},{"_id":"public/atom.xml","hash":"88fb5f561f0eb077617e7dbecb49ceb132b8f7c7","modified":1571484434367},{"_id":"public/baidusitemap.xml","hash":"e19bca13cd3fdc1c335c12d462faeba9d3e5fb30","modified":1571484434228},{"_id":"public/search.xml","hash":"d4d81804e6ab0c67bc7cc89bc2a757bac8e36309","modified":1571484434408},{"_id":"public/sitemap.xml","hash":"d03dee4076ba116d81b062f574dde83c198989fe","modified":1571484434409},{"_id":"public/404.html","hash":"61f9ac41da832b24ca9d19aacff177563bc1bbd8","modified":1571484434437},{"_id":"public/categories/index.html","hash":"3161855bca81921fd9badb2b6cb90394abfcc491","modified":1571484434437},{"_id":"public/archives/index.html","hash":"a615c51385247e1711a44b31ec78dc5f79ea8afc","modified":1571484434468},{"_id":"public/about/index.html","hash":"19f6e681c92417b5ee8e1e372c2a5e292198ed35","modified":1571484434474},{"_id":"public/contact/index.html","hash":"5d8eb35451eccee46b0ee1ab947d3ae44bd16130","modified":1571484434474},{"_id":"public/tags/index.html","hash":"36f5feaad2dbbb0e3ade7c572abbc174ad27ace0","modified":1571484434475},{"_id":"public/friends/index.html","hash":"23acee47a2ec8dc6827b5c6988fc26b54547b88d","modified":1571484434475},{"_id":"public/2019/10/19/she-ji-mo-shi-kai-pian/index.html","hash":"07c5a3acfe1dd63ab992d2cffe5935ccbc591077","modified":1571484533984},{"_id":"public/2018/01/22/2017-conclusion/index.html","hash":"46d43e64d779dc4fece7b3a59566682afaa54d98","modified":1571472687956},{"_id":"public/archives/2018/index.html","hash":"933a96ef2e1d76e2cc7684e94f447357adc28c3a","modified":1571481159578},{"_id":"public/archives/2018/01/index.html","hash":"7df36d164e3f82fe6c1d27607825569a7d24287e","modified":1571481159578},{"_id":"public/archives/2019/index.html","hash":"81c65f8c18ee1644fbbc4d5d5e53301531eca104","modified":1571484434475},{"_id":"public/archives/2019/10/index.html","hash":"e66a2b8d90c103120bcb38ac862e30b0c0988b45","modified":1571484434475},{"_id":"public/index.html","hash":"52abb15e4fff55ab8e115d192ebfd2cc84731f1f","modified":1571484434475},{"_id":"public/categories/随笔/index.html","hash":"a83f9c1615d446145a1fe43b1f73eabe83da2ca0","modified":1571481159578},{"_id":"public/categories/设计模式/index.html","hash":"4630094c6ec6f998bd08a3c6565bed2f5133eca5","modified":1571471587465},{"_id":"public/tags/随笔/index.html","hash":"0f69c915998ba4439cb710dafffeb79a1fd13340","modified":1571481159578},{"_id":"public/tags/设计模式/index.html","hash":"a057fb3b8db5528cb7a1377024df018ce867fac8","modified":1571484434475},{"_id":"public/tags/原则/index.html","hash":"0daedd89cdfbd05d516a734cbbf1844dffe61299","modified":1571471587465},{"_id":"public/2019/10/19/she-ji-mo-shi-dan-li-mo-shi/index.html","hash":"eade2afdeee8db887df1c9fb644f356f1566509e","modified":1571484533983},{"_id":"public/2019/10/19/kan-dong-uml-lei-tu-he-shi-xu-tu/index.html","hash":"f2a98a13b6dc51ab65b9a1704dcb4908daab4d42","modified":1571484533985},{"_id":"public/tags/时序图/index.html","hash":"40a1859dd0e6f52b8d3e3c2b7c4e05eb8cb35a42","modified":1571471587478},{"_id":"public/tags/单例模式/index.html","hash":"530da189f81d60f263e46fb7b58a2c827f3313ef","modified":1571471587478},{"_id":"public/CNAME","hash":"a6ad0999ab08c1c2d45314bbbf10819ce1ca9081","modified":1571471587489},{"_id":"public/favicon.png","hash":"287ae8aa7d9ec0d5958653d21421c183eaed7243","modified":1571477609123},{"_id":"public/medias/logo.png","hash":"edb2a05e70cc755e8eeb62c5b6fb168eff0d156d","modified":1571480155981},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1571471587489},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1571471587489},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1571471587489},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1571471587489},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1571471587489},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1571471587489},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1571471587489},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1571471587489},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1571471587489},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1571471587489},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1571471587489},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1571471587490},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1571471587490},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1571471587490},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1571471587490},{"_id":"public/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1571471587490},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1571471587490},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1571471587490},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1571471587490},{"_id":"public/medias/reward/wechat.png","hash":"03b316863417741575efa12e6521173e4cd390e4","modified":1571477525926},{"_id":"public/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1571471587490},{"_id":"public/medias/avatars/avatar.jpg","hash":"3dbff877d0ce01dc7f2cd2a07eeaeffd3c016ea1","modified":1571477525928},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1571471587490},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1571471587490},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1571471587490},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1571471587490},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1571471587490},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1571471587490},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1571471587490},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1571471587491},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1571471587491},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1571471587491},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1571471587491},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1571471587491},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1571471587491},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1571471587491},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1571471587491},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1571471587491},{"_id":"public/2018/01/22/2017-conclusion/1.jpg","hash":"39229d4944989a3c4a73111dcbc54b7e1545c405","modified":1571471587491},{"_id":"public/2018/01/22/2017-conclusion/3.jpg","hash":"1597719e6158a552d12c447d5f5c1d6615d377ea","modified":1571471587491},{"_id":"public/2018/01/22/2017-conclusion/4.jpg","hash":"3862db359d52b55db3fe1a6339b66d2610770030","modified":1571471587491},{"_id":"public/2018/01/22/2017-conclusion/749826.jpg","hash":"1c321d51b77d08ffa6e9db10a2fb3fb80074cde0","modified":1571471587491},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1571471587491},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1571471587491},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1571471587502},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1571471587503},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1571471587503},{"_id":"public/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1571471587503},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1571471587503},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1571471587503},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1571471587503},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1571471587503},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1571471587503},{"_id":"public/medias/reward/alipay.jpg","hash":"0879a698bce623ebf5b7b467bef03de899f277d4","modified":1571477525928},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1571471587504},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1571471587504},{"_id":"public/2018/01/22/2017-conclusion/2.jpg","hash":"4ada4f57201bd13de45dd89e3df949e2479cad7c","modified":1571471587504},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1571471587519},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1571471587519},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1571471587520},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1571471587520},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1571471587520},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1571471587520},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1571471587520},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1571471587520},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1571471587520},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1571471587520},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1571471587520},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1571471587520},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1571471587520},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1571471587520},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1571471587520},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1571471587520},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1571471587520},{"_id":"public/medias/featureimages/16.jpg","hash":"0d8315876e8285abec48ce71797a14734fdc980c","modified":1571471587520},{"_id":"public/medias/featureimages/2.jpg","hash":"c86ede693175156922041c5cdb31b9f1432a0e8a","modified":1571471587521},{"_id":"public/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1571471587521},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1571471587521},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1571471587521},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1571471587533},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1571471587533},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1571471587533},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1571471587533},{"_id":"public/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1571471587533},{"_id":"public/medias/featureimages/17.jpg","hash":"5f27406bd8661bef44291601edc2784b5af63c23","modified":1571471587534},{"_id":"public/medias/featureimages/6.jpg","hash":"7bdf83e0822794a7294fe554c5d21edda1e0c28f","modified":1571471587534},{"_id":"public/medias/featureimages/20.jpg","hash":"6dcacca5f1d93dec5c12cab74516e415243c0a64","modified":1571471587534},{"_id":"public/medias/featureimages/26.jpg","hash":"7e6241a0793404fb3668b1030795e5031e0f1ba7","modified":1571471587534},{"_id":"public/medias/featureimages/1.jpg","hash":"e177d97cfbb0071d2ac15e99d15666cf09d5eacb","modified":1571471587534},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1571471587534},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1571471587534},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1571471587534},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1571471587567},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1571471587567},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1571471587568},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1571471587568},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1571471587568},{"_id":"public/medias/featureimages/25.jpg","hash":"35a945ed6f2f8a0d055f9da6e90b974b7f30c5b0","modified":1571471587568},{"_id":"public/medias/featureimages/18.jpg","hash":"5efc3856cd2da8863e9c808005c3724c09843c3c","modified":1571471587568},{"_id":"public/medias/featureimages/3.jpg","hash":"447bf84c1d9bd71491545922c8735b5b41e2121f","modified":1571471587568},{"_id":"public/medias/featureimages/12.jpg","hash":"c72b487cf410eb99697ac6e416b1db9c10fa92ce","modified":1571471587568},{"_id":"public/medias/featureimages/11.jpg","hash":"3fa19adaa3c19d58e34be573f1c3233c9b57b242","modified":1571471587568},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1571471587569},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1571471587577},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1571471587577},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1571471587577},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1571471587577},{"_id":"public/medias/featureimages/7.jpg","hash":"d41c54ff1c41f5bfd4ccf5af303229059577c351","modified":1571471587577},{"_id":"public/medias/featureimages/14.jpg","hash":"f515cb01de6d2b1981f50f0487e9b5beb99baf43","modified":1571471587578},{"_id":"public/medias/featureimages/19.jpg","hash":"7a07b854a602cb9c8fa0db80ebd2c9b989f3de22","modified":1571471587578},{"_id":"public/medias/featureimages/21.jpg","hash":"c04a6292dc85cc47a9ec370e1bee81e0e7e65652","modified":1571471587578},{"_id":"public/medias/featureimages/27.jpg","hash":"f4d026ea224b9d216357d4b42fbe9f002bcaa2b0","modified":1571471587578},{"_id":"public/medias/featureimages/22.jpg","hash":"43d1db28c3f3f953c5fd399fd959f6e92ee88fe7","modified":1571471587579},{"_id":"public/medias/featureimages/8.jpg","hash":"4cedcb5a87fa5fbc1f343c9180d4e52bb4331220","modified":1571471587579},{"_id":"public/medias/featureimages/0.jpg","hash":"39a1cb44e4ab3006577fefcbeecaddd1a2f62cfa","modified":1571471587579},{"_id":"public/medias/banner/5.jpg","hash":"6f5795e2fa01a6a7f09e3419941a0fc147ea83c5","modified":1571471587579},{"_id":"public/medias/featureimages/4.jpg","hash":"f46e3860fbcbb63cd76023d91b7a4715e27fb231","modified":1571471587580},{"_id":"public/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1571471587580},{"_id":"public/medias/banner/0.jpg","hash":"4d6f31f86966584360bcdbfecb6f6a2ec94f944d","modified":1571471587580},{"_id":"public/css/matery.css","hash":"7a418c539884ff6432de099c85517a8b9f770d65","modified":1571471587595},{"_id":"public/medias/featureimages/15.jpg","hash":"18cc714b6693d0336c1bbaef47ed79cc8a1d95e7","modified":1571471587595},{"_id":"public/medias/featureimages/24.jpg","hash":"44d047bc0d29d6ae3e1d65b6cb95143d0d1b6ec2","modified":1571471587596},{"_id":"public/medias/featureimages/10.jpg","hash":"6339e06736ff6618d97cca389d7887439c87415a","modified":1571471587597},{"_id":"public/medias/featureimages/5.jpg","hash":"4c001e19790f5ac73259138ad1713338ea34c664","modified":1571471587597},{"_id":"public/medias/banner/6.jpg","hash":"5be9274e63d6ac02607e3d659fd32532291385fa","modified":1571471587598},{"_id":"public/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1571471587598},{"_id":"public/medias/featureimages/23.jpg","hash":"8cc1c127ca8ff09d4a07f5c3b845ef2340a1106f","modified":1571471587598},{"_id":"public/medias/featureimages/9.jpg","hash":"1829b3464d5715136d3feec2849c7716541e83ed","modified":1571471587599},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1571471587599},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1571471587608},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1571471587608},{"_id":"public/medias/featureimages/13.jpg","hash":"575cb26b73b220a3fea685108812466fb8b68e62","modified":1571471587609},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1571471587609},{"_id":"public/medias/banner/3.jpg","hash":"5c494c93ad30b8f71c7865b42b3cf613279a914e","modified":1571471587609},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1571471587616},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1571471587616},{"_id":"public/medias/banner/4.jpg","hash":"73bae0e6812c46509b91e3155bd12ce8640b245a","modified":1571471587616},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1571471587624},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1571471587634},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1571471587634},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1571471587637},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1571471587639},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1571471587643},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1571471587643},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1571471587644},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1571471587646},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1571471587659},{"_id":"themes/matery/source/medias/music/xinsheng.mp3","hash":"a86bde1e2254f4ecf7672080b5a8fa6a3d7b6439","modified":1571472399772},{"_id":"themes/matery/source/medias/music/nanren.mp3","hash":"0652b9aea14ab07d767a217ff6b301a6113e01cf","modified":1571472420044},{"_id":"public/categories/Java/index.html","hash":"80cd4aaaa20103e5e1c972cf8422c1e0972fcce7","modified":1571484434475},{"_id":"public/medias/music/nanren.mp3","hash":"0652b9aea14ab07d767a217ff6b301a6113e01cf","modified":1571472688014},{"_id":"public/medias/music/xinsheng.mp3","hash":"a86bde1e2254f4ecf7672080b5a8fa6a3d7b6439","modified":1571472688021},{"_id":"source/_posts/2017-conclusion/2017-conclusion.md","hash":"fcf8791c76565242cf451f0ac1473432189816a3","modified":1571484272372},{"_id":"public/2018/01/22/2017-conclusion/2017-conclusion/index.html","hash":"949cb27b616bd1c262a321318b78f5e069adb8e9","modified":1571481159578},{"_id":"themes/matery/source/3 - 副本.png","hash":"287ae8aa7d9ec0d5958653d21421c183eaed7243","modified":1571476653263},{"_id":"public/3 - 副本.png","hash":"287ae8aa7d9ec0d5958653d21421c183eaed7243","modified":1571477525938},{"_id":"source/_posts/设计模式-工厂模式.md","hash":"a3b0aec107f957f9d1e7acc4a3895c73d00c3380","modified":1571484392478},{"_id":"public/2019/10/19/she-ji-mo-shi-gong-han-mo-shi/index.html","hash":"f6482171b0d5e9b764b2346f55f88cc8ebc1c139","modified":1571484533983},{"_id":"public/2019/10/19/2017-conclusion/2017-conclusion/index.html","hash":"7326f65a2ad04545f787cc8c684e2196ce4fe1fc","modified":1571484533984},{"_id":"public/tags/init/index.html","hash":"d0f6e9d25e1c68b69e3733d62bfa8966e8387f29","modified":1571484434476},{"_id":"public/categories/init/index.html","hash":"76930004cbdfa3d0ae61c3cd6fae34bd7020b4fb","modified":1571484434476}],"Category":[{"name":"随笔","_id":"ck1x9lwmp0003pgud3o8z99v0"},{"name":"设计模式","_id":"ck1x9lwmt0006pgudwuagu7s8"},{"name":"Java","_id":"ck1x9ohu40000p4ud91obfxfo"},{"name":"init","_id":"ck1xh92bz0000ywudduwjme0x"}],"Data":[{"_id":"musics","data":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}]},{"_id":"friends","data":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}],"Page":[{"title":"404","date":"2019-10-19T06:00:00.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-10-19 14:00:00\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2019-10-19T06:01:13.503Z","path":"404.html","comments":1,"_id":"ck1x9lwlq0000pgud902qtkyi","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2019-10-19T02:09:27.647Z","path":"categories/index.html","comments":1,"_id":"ck1x9lwnm000kpgudkhrztwts","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2019-10-19T02:09:27.646Z","path":"archives/index.html","comments":1,"_id":"ck1x9lwno000lpgudo0xd6rew","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2019-10-19T06:00:00.000Z","type":"about","layout":"about","_content":"\n\n# 个人简介\n* <b>鱼香肉丝</b>\n\n# 联系方式\n* <b>电子邮箱</b>\n794033364@qq.com\n* <b>地址</b>\n重庆市渝中区，邮编400010\n* <b>微信</b>\nyx794033364\n* <b>QQ</b>\n79403336","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-10-19 14:00:00\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 个人简介\n* <b>鱼香肉丝</b>\n\n# 联系方式\n* <b>电子邮箱</b>\n794033364@qq.com\n* <b>地址</b>\n重庆市渝中区，邮编400010\n* <b>微信</b>\nyx794033364\n* <b>QQ</b>\n79403336","updated":"2019-10-19T08:01:55.572Z","path":"about/index.html","_id":"ck1x9lwnq000mpgud36btufxb","comments":1,"content":"<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1><ul>\n<li><b>鱼香肉丝</b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:794033364@qq.com\" target=\"_blank\" rel=\"noopener\">794033364@qq.com</a></li>\n<li><b>地址</b><br>重庆市渝中区，邮编400010</li>\n<li><b>微信</b><br>yx794033364</li>\n<li><b>QQ</b><br>79403336</li>\n</ul>\n","site":{"data":{"musics":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h1><ul>\n<li><b>鱼香肉丝</b></li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:794033364@qq.com\" target=\"_blank\" rel=\"noopener\">794033364@qq.com</a></li>\n<li><b>地址</b><br>重庆市渝中区，邮编400010</li>\n<li><b>微信</b><br>yx794033364</li>\n<li><b>QQ</b><br>79403336</li>\n</ul>\n"},{"title":"contact","date":"2019-10-19T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**794033364**\n* 微信：**yx794033364**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意小改改加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**yuxiangyuxiang\n* **地址：**http://www.puzzleyx.com\n* **简介：**Puzzle\n* **头像：**http://www.puzzleyx.com/medias/avatars/avatar.jpg","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-10-19 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**794033364**\n* 微信：**yx794033364**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意小改改加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**yuxiangyuxiang\n* **地址：**http://www.puzzleyx.com\n* **简介：**Puzzle\n* **头像：**http://www.puzzleyx.com/medias/avatars/avatar.jpg","updated":"2019-10-19T08:01:23.620Z","path":"contact/index.html","_id":"ck1x9lwnr000npgud22no8a5q","comments":1,"content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>794033364</strong></li>\n<li>微信：<strong>yx794033364</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意小改改加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>yuxiangyuxiang</li>\n<li><strong>地址：</strong><a href=\"http://www.puzzleyx.com\">http://www.puzzleyx.com</a></li>\n<li><strong>简介：</strong>Puzzle</li>\n<li><strong>头像：</strong><a href=\"http://www.puzzleyx.com/medias/avatars/avatar.jpg\">http://www.puzzleyx.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"musics":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>794033364</strong></li>\n<li>微信：<strong>yx794033364</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意小改改加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>yuxiangyuxiang</li>\n<li><strong>地址：</strong><a href=\"http://www.puzzleyx.com\">http://www.puzzleyx.com</a></li>\n<li><strong>简介：</strong>Puzzle</li>\n<li><strong>头像：</strong><a href=\"http://www.puzzleyx.com/medias/avatars/avatar.jpg\">http://www.puzzleyx.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2019-10-19T02:09:27.648Z","path":"tags/index.html","comments":1,"_id":"ck1x9lwnt000opgudcm6mis13","content":"","site":{"data":{"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-10-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n> \\*ywy\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**yuxiangyuxiang\n* **地址：**http://www.puzzleyx.com\n* **简介：**ECNU NLPer\n* **头像：**http://www.puzzleyx.com/medias/avatars/avatar.jpg","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-10-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 赞赏名单\n感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！\n> \\*ywy\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**yuxiangyuxiang\n* **地址：**http://www.puzzleyx.com\n* **简介：**ECNU NLPer\n* **头像：**http://www.puzzleyx.com/medias/avatars/avatar.jpg","updated":"2019-10-19T07:59:43.533Z","path":"friends/index.html","_id":"ck1x9lwnw000ppgudmvg4y2q4","comments":1,"content":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p>\n<blockquote>\n<p>*ywy</p>\n</blockquote>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>yuxiangyuxiang</li>\n<li><strong>地址：</strong><a href=\"http://www.puzzleyx.com\">http://www.puzzleyx.com</a></li>\n<li><strong>简介：</strong>ECNU NLPer</li>\n<li><strong>头像：</strong><a href=\"http://www.puzzleyx.com/medias/avatars/avatar.jpg\">http://www.puzzleyx.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"musics":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h1 id=\"赞赏名单\"><a href=\"#赞赏名单\" class=\"headerlink\" title=\"赞赏名单\"></a>赞赏名单</h1><p>感谢所有赞赏过我的小伙伴啦，你们的支持是我最大的动力！</p>\n<blockquote>\n<p>*ywy</p>\n</blockquote>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>yuxiangyuxiang</li>\n<li><strong>地址：</strong><a href=\"http://www.puzzleyx.com\">http://www.puzzleyx.com</a></li>\n<li><strong>简介：</strong>ECNU NLPer</li>\n<li><strong>头像：</strong><a href=\"http://www.puzzleyx.com/medias/avatars/avatar.jpg\">http://www.puzzleyx.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n"}],"Post":[{"title":"看懂UML类图和时序图","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-19T03:06:19.000Z","password":null,"summary":"时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序","_content":"\n## 看懂UML类图和时序图\n图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP\n***==[原文链接](\"https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html#dependency\")==***\n### 示例\n请看以下类图，类之间的关系是我们需要关注的\n![a.png](https://note.youdao.com/yws/res/1764/WEBRESOURCEd7aa34f602e661b405c479207b2d07c3)\n- 车的类图结构为<<abstract>>，表示车是一个抽象类\n- 它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示\n- 小汽车与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示\n- 小汽车与发动机之间是组合关系，使用带实心箭头的实线表示\n- 学生与班级之间是聚合关系，使用带空心箭头的实线表示\n- 学生与身份证之间是关联关系，使用一根实线表示\n- 学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示\n\n下面我们将介绍这六种关系：\n### 类之间的关系\n#### 泛化关系（generalization）\n*类的继承结构表现在UML中为：泛化(generalize)与实现(realize)*\n\n继承关系为is-a的关系；两个对象如果用is-a来表示，就是继承关系：<br>\neg:自行车是车、猫是动物\n\n泛化关系用一条带空心箭头直接表示，如下图（A继承自B）：\n\n![b.png](https://note.youdao.com/yws/res/1829/WEBRESOURCE148477c37f9a63f3603b585a485ea709)\n\neg：汽车在实现中有实现，可用汽车定义具体的对象，汽车与SUV之间为泛化关系：\n\n![c.png](https://note.youdao.com/yws/res/1841/WEBRESOURCE5803b9647efc3ac6c42eb455984bde54)\n\n注：最终代码中，泛化关系表现为继承非抽象类\n#### 实现关系（realize）\n实现关系用一条带空心箭头的虚线表示\n\neg：“车”为一个抽象概念，在现实中并无法用来定义对象；只有指明具体的子类（汽车还是自行车）才可以用来定义对象（“车”这个类在C++中用抽象类表示，在Java中用接口这个概念更容易理解）\n\n![d.png](https://note.youdao.com/yws/res/1869/WEBRESOURCEdf13ee75feaf2f41f3f900fc86c67ca2)\n\n注：最终代码中，实现关系表现为继承抽象类\n#### 聚合关系（aggregation）\n聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；\n\n![e.png](https://note.youdao.com/yws/res/1879/WEBRESOURCE280a26be7a452159b45d144bbf836566)\n\n聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；\n\n与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；\n\n#### 组合关系（composition）\n组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；\n\n![f.png](https://note.youdao.com/yws/res/1887/WEBRESOURCE35a42aa703b201fe82ded5f226d3e1c3)\n\n与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；\n\n但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；\n#### 关联关系（association）\n关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；\n\n比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；\n\n关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；\n\n![g.png](https://note.youdao.com/yws/res/1896/WEBRESOURCE86c446294a9ef91ee318606dee5f7caa)\n\n注：在最终代码中，关联对象通常是以成员变量的形式实现的；\n#### 依赖关系（dependency）\n依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；\n\n![h.png](https://note.youdao.com/yws/res/1903/WEBRESOURCE6ae840efe6108ce0dd5962eccfd04c80)\n\n与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化；依赖关系也可能发生变化；\n\n显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；\n\n注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；\n\n### 时序图\n为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；\n\n时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。\n\n时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。\n","source":"_posts/看懂UML类图和时序图.md","raw":"---\ntitle: 看懂UML类图和时序图\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-10-19 11:06:19\npassword:\nsummary: 时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序\ntags:\n- 设计模式\ncategories:\n- Java\n---\n\n## 看懂UML类图和时序图\n图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP\n***==[原文链接](\"https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html#dependency\")==***\n### 示例\n请看以下类图，类之间的关系是我们需要关注的\n![a.png](https://note.youdao.com/yws/res/1764/WEBRESOURCEd7aa34f602e661b405c479207b2d07c3)\n- 车的类图结构为<<abstract>>，表示车是一个抽象类\n- 它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示\n- 小汽车与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示\n- 小汽车与发动机之间是组合关系，使用带实心箭头的实线表示\n- 学生与班级之间是聚合关系，使用带空心箭头的实线表示\n- 学生与身份证之间是关联关系，使用一根实线表示\n- 学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示\n\n下面我们将介绍这六种关系：\n### 类之间的关系\n#### 泛化关系（generalization）\n*类的继承结构表现在UML中为：泛化(generalize)与实现(realize)*\n\n继承关系为is-a的关系；两个对象如果用is-a来表示，就是继承关系：<br>\neg:自行车是车、猫是动物\n\n泛化关系用一条带空心箭头直接表示，如下图（A继承自B）：\n\n![b.png](https://note.youdao.com/yws/res/1829/WEBRESOURCE148477c37f9a63f3603b585a485ea709)\n\neg：汽车在实现中有实现，可用汽车定义具体的对象，汽车与SUV之间为泛化关系：\n\n![c.png](https://note.youdao.com/yws/res/1841/WEBRESOURCE5803b9647efc3ac6c42eb455984bde54)\n\n注：最终代码中，泛化关系表现为继承非抽象类\n#### 实现关系（realize）\n实现关系用一条带空心箭头的虚线表示\n\neg：“车”为一个抽象概念，在现实中并无法用来定义对象；只有指明具体的子类（汽车还是自行车）才可以用来定义对象（“车”这个类在C++中用抽象类表示，在Java中用接口这个概念更容易理解）\n\n![d.png](https://note.youdao.com/yws/res/1869/WEBRESOURCEdf13ee75feaf2f41f3f900fc86c67ca2)\n\n注：最终代码中，实现关系表现为继承抽象类\n#### 聚合关系（aggregation）\n聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；\n\n![e.png](https://note.youdao.com/yws/res/1879/WEBRESOURCE280a26be7a452159b45d144bbf836566)\n\n聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；\n\n与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；\n\n#### 组合关系（composition）\n组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；\n\n![f.png](https://note.youdao.com/yws/res/1887/WEBRESOURCE35a42aa703b201fe82ded5f226d3e1c3)\n\n与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；\n\n但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；\n#### 关联关系（association）\n关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；\n\n比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；\n\n关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；\n\n![g.png](https://note.youdao.com/yws/res/1896/WEBRESOURCE86c446294a9ef91ee318606dee5f7caa)\n\n注：在最终代码中，关联对象通常是以成员变量的形式实现的；\n#### 依赖关系（dependency）\n依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；\n\n![h.png](https://note.youdao.com/yws/res/1903/WEBRESOURCE6ae840efe6108ce0dd5962eccfd04c80)\n\n与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化；依赖关系也可能发生变化；\n\n显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；\n\n注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；\n\n### 时序图\n为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；\n\n时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。\n\n时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。\n","slug":"看懂UML类图和时序图","published":1,"updated":"2019-10-19T08:53:06.207Z","_id":"ck1x9lwmn0002pguduevlt52s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"看懂UML类图和时序图\"><a href=\"#看懂UML类图和时序图\" class=\"headerlink\" title=\"看懂UML类图和时序图\"></a>看懂UML类图和时序图</h2><p>图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP<br><strong><em>==<a href https: design-patterns.readthedocs.io zh_cn latest read_uml.html#dependency\"\">原文链接</a>==</em></strong></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>请看以下类图，类之间的关系是我们需要关注的<br><img src=\"https://note.youdao.com/yws/res/1764/WEBRESOURCEd7aa34f602e661b405c479207b2d07c3\" alt=\"a.png\"></p>\n<ul>\n<li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类</abstract></li>\n<li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示</li>\n<li>小汽车与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示</li>\n<li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示</li>\n<li>学生与班级之间是聚合关系，使用带空心箭头的实线表示</li>\n<li>学生与身份证之间是关联关系，使用一根实线表示</li>\n<li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示</li>\n</ul>\n<p>下面我们将介绍这六种关系：</p>\n<h3 id=\"类之间的关系\"><a href=\"#类之间的关系\" class=\"headerlink\" title=\"类之间的关系\"></a>类之间的关系</h3><h4 id=\"泛化关系（generalization）\"><a href=\"#泛化关系（generalization）\" class=\"headerlink\" title=\"泛化关系（generalization）\"></a>泛化关系（generalization）</h4><p><em>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)</em></p>\n<p>继承关系为is-a的关系；两个对象如果用is-a来表示，就是继承关系：<br><br>eg:自行车是车、猫是动物</p>\n<p>泛化关系用一条带空心箭头直接表示，如下图（A继承自B）：</p>\n<p><img src=\"https://note.youdao.com/yws/res/1829/WEBRESOURCE148477c37f9a63f3603b585a485ea709\" alt=\"b.png\"></p>\n<p>eg：汽车在实现中有实现，可用汽车定义具体的对象，汽车与SUV之间为泛化关系：</p>\n<p><img src=\"https://note.youdao.com/yws/res/1841/WEBRESOURCE5803b9647efc3ac6c42eb455984bde54\" alt=\"c.png\"></p>\n<p>注：最终代码中，泛化关系表现为继承非抽象类</p>\n<h4 id=\"实现关系（realize）\"><a href=\"#实现关系（realize）\" class=\"headerlink\" title=\"实现关系（realize）\"></a>实现关系（realize）</h4><p>实现关系用一条带空心箭头的虚线表示</p>\n<p>eg：“车”为一个抽象概念，在现实中并无法用来定义对象；只有指明具体的子类（汽车还是自行车）才可以用来定义对象（“车”这个类在C++中用抽象类表示，在Java中用接口这个概念更容易理解）</p>\n<p><img src=\"https://note.youdao.com/yws/res/1869/WEBRESOURCEdf13ee75feaf2f41f3f900fc86c67ca2\" alt=\"d.png\"></p>\n<p>注：最终代码中，实现关系表现为继承抽象类</p>\n<h4 id=\"聚合关系（aggregation）\"><a href=\"#聚合关系（aggregation）\" class=\"headerlink\" title=\"聚合关系（aggregation）\"></a>聚合关系（aggregation）</h4><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p>\n<p><img src=\"https://note.youdao.com/yws/res/1879/WEBRESOURCE280a26be7a452159b45d144bbf836566\" alt=\"e.png\"></p>\n<p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p>\n<p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p>\n<h4 id=\"组合关系（composition）\"><a href=\"#组合关系（composition）\" class=\"headerlink\" title=\"组合关系（composition）\"></a>组合关系（composition）</h4><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p>\n<p><img src=\"https://note.youdao.com/yws/res/1887/WEBRESOURCE35a42aa703b201fe82ded5f226d3e1c3\" alt=\"f.png\"></p>\n<p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p>\n<p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p>\n<h4 id=\"关联关系（association）\"><a href=\"#关联关系（association）\" class=\"headerlink\" title=\"关联关系（association）\"></a>关联关系（association）</h4><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p>\n<p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p>\n<p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p>\n<p><img src=\"https://note.youdao.com/yws/res/1896/WEBRESOURCE86c446294a9ef91ee318606dee5f7caa\" alt=\"g.png\"></p>\n<p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p>\n<h4 id=\"依赖关系（dependency）\"><a href=\"#依赖关系（dependency）\" class=\"headerlink\" title=\"依赖关系（dependency）\"></a>依赖关系（dependency）</h4><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p>\n<p><img src=\"https://note.youdao.com/yws/res/1903/WEBRESOURCE6ae840efe6108ce0dd5962eccfd04c80\" alt=\"h.png\"></p>\n<p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化；依赖关系也可能发生变化；</p>\n<p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p>\n<p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p>\n<p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p>\n<p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p>\n","site":{"data":{"musics":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h2 id=\"看懂UML类图和时序图\"><a href=\"#看懂UML类图和时序图\" class=\"headerlink\" title=\"看懂UML类图和时序图\"></a>看懂UML类图和时序图</h2><p>图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP<br><strong><em>==<a href https: design-patterns.readthedocs.io zh_cn latest read_uml.html#dependency\"\">原文链接</a>==</em></strong></p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>请看以下类图，类之间的关系是我们需要关注的<br><img src=\"https://note.youdao.com/yws/res/1764/WEBRESOURCEd7aa34f602e661b405c479207b2d07c3\" alt=\"a.png\"></p>\n<ul>\n<li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类</abstract></li>\n<li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示</li>\n<li>小汽车与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示</li>\n<li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示</li>\n<li>学生与班级之间是聚合关系，使用带空心箭头的实线表示</li>\n<li>学生与身份证之间是关联关系，使用一根实线表示</li>\n<li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示</li>\n</ul>\n<p>下面我们将介绍这六种关系：</p>\n<h3 id=\"类之间的关系\"><a href=\"#类之间的关系\" class=\"headerlink\" title=\"类之间的关系\"></a>类之间的关系</h3><h4 id=\"泛化关系（generalization）\"><a href=\"#泛化关系（generalization）\" class=\"headerlink\" title=\"泛化关系（generalization）\"></a>泛化关系（generalization）</h4><p><em>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)</em></p>\n<p>继承关系为is-a的关系；两个对象如果用is-a来表示，就是继承关系：<br><br>eg:自行车是车、猫是动物</p>\n<p>泛化关系用一条带空心箭头直接表示，如下图（A继承自B）：</p>\n<p><img src=\"https://note.youdao.com/yws/res/1829/WEBRESOURCE148477c37f9a63f3603b585a485ea709\" alt=\"b.png\"></p>\n<p>eg：汽车在实现中有实现，可用汽车定义具体的对象，汽车与SUV之间为泛化关系：</p>\n<p><img src=\"https://note.youdao.com/yws/res/1841/WEBRESOURCE5803b9647efc3ac6c42eb455984bde54\" alt=\"c.png\"></p>\n<p>注：最终代码中，泛化关系表现为继承非抽象类</p>\n<h4 id=\"实现关系（realize）\"><a href=\"#实现关系（realize）\" class=\"headerlink\" title=\"实现关系（realize）\"></a>实现关系（realize）</h4><p>实现关系用一条带空心箭头的虚线表示</p>\n<p>eg：“车”为一个抽象概念，在现实中并无法用来定义对象；只有指明具体的子类（汽车还是自行车）才可以用来定义对象（“车”这个类在C++中用抽象类表示，在Java中用接口这个概念更容易理解）</p>\n<p><img src=\"https://note.youdao.com/yws/res/1869/WEBRESOURCEdf13ee75feaf2f41f3f900fc86c67ca2\" alt=\"d.png\"></p>\n<p>注：最终代码中，实现关系表现为继承抽象类</p>\n<h4 id=\"聚合关系（aggregation）\"><a href=\"#聚合关系（aggregation）\" class=\"headerlink\" title=\"聚合关系（aggregation）\"></a>聚合关系（aggregation）</h4><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p>\n<p><img src=\"https://note.youdao.com/yws/res/1879/WEBRESOURCE280a26be7a452159b45d144bbf836566\" alt=\"e.png\"></p>\n<p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p>\n<p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p>\n<h4 id=\"组合关系（composition）\"><a href=\"#组合关系（composition）\" class=\"headerlink\" title=\"组合关系（composition）\"></a>组合关系（composition）</h4><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p>\n<p><img src=\"https://note.youdao.com/yws/res/1887/WEBRESOURCE35a42aa703b201fe82ded5f226d3e1c3\" alt=\"f.png\"></p>\n<p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p>\n<p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p>\n<h4 id=\"关联关系（association）\"><a href=\"#关联关系（association）\" class=\"headerlink\" title=\"关联关系（association）\"></a>关联关系（association）</h4><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p>\n<p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p>\n<p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p>\n<p><img src=\"https://note.youdao.com/yws/res/1896/WEBRESOURCE86c446294a9ef91ee318606dee5f7caa\" alt=\"g.png\"></p>\n<p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p>\n<h4 id=\"依赖关系（dependency）\"><a href=\"#依赖关系（dependency）\" class=\"headerlink\" title=\"依赖关系（dependency）\"></a>依赖关系（dependency）</h4><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p>\n<p><img src=\"https://note.youdao.com/yws/res/1903/WEBRESOURCE6ae840efe6108ce0dd5962eccfd04c80\" alt=\"h.png\"></p>\n<p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化；依赖关系也可能发生变化；</p>\n<p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p>\n<p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p>\n<h3 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h3><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p>\n<p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p>\n<p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p>\n"},{"title":"设计模式-单例模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-19T07:51:21.000Z","password":null,"summary":"单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。","_content":"\n## 设计模式之单例模式\n*单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象*\n>1. 单例类只能有一个实例\n>2. 单例类必须自己创建自己的唯一实例\n>3. 单例类对外提供一个访问该单例的全局访问点\n#### 一、了解单例模式\n**应用场景：** \n1. 在应用场景中，某类只要求生成一个对象的时候，如一个班班主任、班长等\n2. 对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如Web中的配置对象、数据库中的连接池等\n3. 当某类需要频繁的实例化，而创建的对象又频繁被销毁的时候，如多线程的连接池、网络连接池等\n> ***注意事项：*** getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化\n\n**单例模式的结构：**\n> *单例类：* 包含一个实例且能自行创建这个实例的类\n> *访问类：* 使用单例的类\n\n单例模式的结构图\n![t.jpg](https://note.youdao.com/yws/res/3162/WEBRESOURCE4530fa811a5cf0f1fc7124974411f3ab)\n#### 二、单例模式实现的几种方式\n*单例模式通常有==两种实现形式==： **==懒汉式、饿汉式==***\n1. **懒汉式，线程不安全**\n> **是否Lazy初始化**：是\n>\n> **是否多线程安全**：否\n>\n> *这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized，所以严格意义上它并不算单例模式。这种方式 **延迟加载(lazy loading)** 很明显，不要求线程安全，在多线程不能正常工作*\n```\npublic class Singleton {\n    private static Singleton instance = null;\n\n    private  Singleton() {\n    }\n    /**\n     * 线程安全\n     * public static synchronized Singleton getInstance() {\n     */\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n2. **饿汉式**\n> **是否Lazy初始化：** 否\n>\n> **是否多线程安全：** 是\n>\n> *这种方式比较常用，但容易产生垃圾对象*\n>> 优点：没有加锁，执行效率会提高\n>>\n>> 缺点：类加载时就初始化，浪费内存\n```\npublic class Singleton_Hungry {\n    private static Singleton_Hungry instance = new Singleton_Hungry();\n    private Singleton_Hungry() {\n    }\n    public static Singleton_Hungry getInstance() {\n        return instance;\n    }\n}\n```\n\n3. **双检锁/双重校验锁（DCL，即 double-checked locking）**\n> **是否Lazy初始化：** 是\n>\n> **是否多线程安全：** 是\n>\n> *这种方式采用双锁机制，安全且在多线程情况下能保持高性能*\n>> 双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题。由于singleton=new Singleton()对象的创建在JVM中可能会进行重排序，在多线程访问下存在风险，使用volatile修饰signleton实例变量有效，解决该问题\n```\npublic class Singleton_DCL {\n    //保证instance在所有线程同步\n    private volatile static Singleton_DCL instance = null;\n    //private避免类在外部被实例化\n    private Singleton_DCL() {\n    }\n    public static Singleton_DCL getInstance() {\n        if (instance == null) {\n            synchronized (Singleton_DCL.class) {\n                if (instance == null) {\n                    instance = new Singleton_DCL();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n4. **静态内部类单例模式**\n> **是否Lazy初始化：** 是\n>\n> **是否多线程安全：** 是\n>\n> *这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用*\n>> 只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，具体根据项目选择\n```\npublic class Singleton_staticInnerClass {\n\n    private Singleton_staticInnerClass(){\n    }\n    private static class Inner {\n        private static final Singleton_staticInnerClass\n                INSTANCE = new Singleton_staticInnerClass();\n    }\n    public static final Singleton_staticInnerClass getInstance() {\n        return Inner.INSTANCE;\n    }\n}\n```\n\n5. **枚举单例模式**\n> **是否Lazy初始化：** 否\n>\n> **是否多线程安全：** 是\n>\n> *这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化*\n>> 这种方式是《Effective Java》中提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化\n```\npublic enum  Singleton_enum {\n    INSTANCE;\n    //doSomething 该实例支持的行为\n\n    //可以省略此方法，通过Singleton.INSTANCE进行操作\n    public static Singleton_enum getInstance() {\n        return Singleton_enum.INSTANCE;\n    }\n}\n```\n\n#### 【例子-懒汉式】\n\n```\npublic class President {\n    //保证instance在所有线程中同步\n    private static volatile President instance = null;\n    //private避免类在外部被实例化\n    private President() {\n        System.out.println(\"选举一个总统\");\n    }\n    //在getInstance方法上加同步\n    public static synchronized President getInstance() {\n        if (instance == null) {\n            instance = new President();\n        } else {\n            System.out.println(\"已经实例化了...\");\n        }\n        return instance;\n    }\n    public void getName() {\n        System.out.println(\"我是总统：川建国\");\n    }\n}\n```\n```\npublic class Client {\n    public static void main(String[] args) {\n        President zt = President.getInstance();\n        zt.getName();\n        President zt_1 = President.getInstance();\n        zt_1.getName();\n        if (zt == zt_1) {\n            System.out.println(\"是同一个人\");\n        } else {\n            System.out.println(\"不是同一个人\");\n        }\n    }\n}\n```\n**运行结果**\n```\n选举一个总统\n我是美国总统：川建国\n已经实例化一次了，不能再实例化了\n我是美国总统：川建国\n是同一个人\n```","source":"_posts/设计模式-单例模式.md","raw":"---\ntitle: 设计模式-单例模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-10-19 15:51:21\npassword:\nsummary: 单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。\ntags:\n- 设计模式\ncategories:\n- Java\n---\n\n## 设计模式之单例模式\n*单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象*\n>1. 单例类只能有一个实例\n>2. 单例类必须自己创建自己的唯一实例\n>3. 单例类对外提供一个访问该单例的全局访问点\n#### 一、了解单例模式\n**应用场景：** \n1. 在应用场景中，某类只要求生成一个对象的时候，如一个班班主任、班长等\n2. 对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如Web中的配置对象、数据库中的连接池等\n3. 当某类需要频繁的实例化，而创建的对象又频繁被销毁的时候，如多线程的连接池、网络连接池等\n> ***注意事项：*** getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化\n\n**单例模式的结构：**\n> *单例类：* 包含一个实例且能自行创建这个实例的类\n> *访问类：* 使用单例的类\n\n单例模式的结构图\n![t.jpg](https://note.youdao.com/yws/res/3162/WEBRESOURCE4530fa811a5cf0f1fc7124974411f3ab)\n#### 二、单例模式实现的几种方式\n*单例模式通常有==两种实现形式==： **==懒汉式、饿汉式==***\n1. **懒汉式，线程不安全**\n> **是否Lazy初始化**：是\n>\n> **是否多线程安全**：否\n>\n> *这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized，所以严格意义上它并不算单例模式。这种方式 **延迟加载(lazy loading)** 很明显，不要求线程安全，在多线程不能正常工作*\n```\npublic class Singleton {\n    private static Singleton instance = null;\n\n    private  Singleton() {\n    }\n    /**\n     * 线程安全\n     * public static synchronized Singleton getInstance() {\n     */\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```\n\n2. **饿汉式**\n> **是否Lazy初始化：** 否\n>\n> **是否多线程安全：** 是\n>\n> *这种方式比较常用，但容易产生垃圾对象*\n>> 优点：没有加锁，执行效率会提高\n>>\n>> 缺点：类加载时就初始化，浪费内存\n```\npublic class Singleton_Hungry {\n    private static Singleton_Hungry instance = new Singleton_Hungry();\n    private Singleton_Hungry() {\n    }\n    public static Singleton_Hungry getInstance() {\n        return instance;\n    }\n}\n```\n\n3. **双检锁/双重校验锁（DCL，即 double-checked locking）**\n> **是否Lazy初始化：** 是\n>\n> **是否多线程安全：** 是\n>\n> *这种方式采用双锁机制，安全且在多线程情况下能保持高性能*\n>> 双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题。由于singleton=new Singleton()对象的创建在JVM中可能会进行重排序，在多线程访问下存在风险，使用volatile修饰signleton实例变量有效，解决该问题\n```\npublic class Singleton_DCL {\n    //保证instance在所有线程同步\n    private volatile static Singleton_DCL instance = null;\n    //private避免类在外部被实例化\n    private Singleton_DCL() {\n    }\n    public static Singleton_DCL getInstance() {\n        if (instance == null) {\n            synchronized (Singleton_DCL.class) {\n                if (instance == null) {\n                    instance = new Singleton_DCL();\n                }\n            }\n        }\n        return instance;\n    }\n}\n```\n\n4. **静态内部类单例模式**\n> **是否Lazy初始化：** 是\n>\n> **是否多线程安全：** 是\n>\n> *这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用*\n>> 只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，具体根据项目选择\n```\npublic class Singleton_staticInnerClass {\n\n    private Singleton_staticInnerClass(){\n    }\n    private static class Inner {\n        private static final Singleton_staticInnerClass\n                INSTANCE = new Singleton_staticInnerClass();\n    }\n    public static final Singleton_staticInnerClass getInstance() {\n        return Inner.INSTANCE;\n    }\n}\n```\n\n5. **枚举单例模式**\n> **是否Lazy初始化：** 否\n>\n> **是否多线程安全：** 是\n>\n> *这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化*\n>> 这种方式是《Effective Java》中提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化\n```\npublic enum  Singleton_enum {\n    INSTANCE;\n    //doSomething 该实例支持的行为\n\n    //可以省略此方法，通过Singleton.INSTANCE进行操作\n    public static Singleton_enum getInstance() {\n        return Singleton_enum.INSTANCE;\n    }\n}\n```\n\n#### 【例子-懒汉式】\n\n```\npublic class President {\n    //保证instance在所有线程中同步\n    private static volatile President instance = null;\n    //private避免类在外部被实例化\n    private President() {\n        System.out.println(\"选举一个总统\");\n    }\n    //在getInstance方法上加同步\n    public static synchronized President getInstance() {\n        if (instance == null) {\n            instance = new President();\n        } else {\n            System.out.println(\"已经实例化了...\");\n        }\n        return instance;\n    }\n    public void getName() {\n        System.out.println(\"我是总统：川建国\");\n    }\n}\n```\n```\npublic class Client {\n    public static void main(String[] args) {\n        President zt = President.getInstance();\n        zt.getName();\n        President zt_1 = President.getInstance();\n        zt_1.getName();\n        if (zt == zt_1) {\n            System.out.println(\"是同一个人\");\n        } else {\n            System.out.println(\"不是同一个人\");\n        }\n    }\n}\n```\n**运行结果**\n```\n选举一个总统\n我是美国总统：川建国\n已经实例化一次了，不能再实例化了\n我是美国总统：川建国\n是同一个人\n```","slug":"设计模式-单例模式","published":1,"updated":"2019-10-19T07:55:37.229Z","_id":"ck1x9lwmr0005pgudlcn1wfla","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"设计模式之单例模式\"><a href=\"#设计模式之单例模式\" class=\"headerlink\" title=\"设计模式之单例模式\"></a>设计模式之单例模式</h2><p><em>单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象</em></p>\n<blockquote>\n<ol>\n<li>单例类只能有一个实例</li>\n<li>单例类必须自己创建自己的唯一实例</li>\n<li>单例类对外提供一个访问该单例的全局访问点</li>\n</ol>\n</blockquote>\n<h4 id=\"一、了解单例模式\"><a href=\"#一、了解单例模式\" class=\"headerlink\" title=\"一、了解单例模式\"></a>一、了解单例模式</h4><p><strong>应用场景：</strong> </p>\n<ol>\n<li>在应用场景中，某类只要求生成一个对象的时候，如一个班班主任、班长等</li>\n<li>对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如Web中的配置对象、数据库中的连接池等</li>\n<li>当某类需要频繁的实例化，而创建的对象又频繁被销毁的时候，如多线程的连接池、网络连接池等<blockquote>\n<p><strong><em>注意事项：</em></strong> getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>单例模式的结构：</strong></p>\n<blockquote>\n<p><em>单例类：</em> 包含一个实例且能自行创建这个实例的类<br><em>访问类：</em> 使用单例的类</p>\n</blockquote>\n<p>单例模式的结构图<br><img src=\"https://note.youdao.com/yws/res/3162/WEBRESOURCE4530fa811a5cf0f1fc7124974411f3ab\" alt=\"t.jpg\"></p>\n<h4 id=\"二、单例模式实现的几种方式\"><a href=\"#二、单例模式实现的几种方式\" class=\"headerlink\" title=\"二、单例模式实现的几种方式\"></a>二、单例模式实现的几种方式</h4><p><em>单例模式通常有==两种实现形式==： <strong>==懒汉式、饿汉式==</strong></em></p>\n<ol>\n<li><p><strong>懒汉式，线程不安全</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化</strong>：是</p>\n<p><strong>是否多线程安全</strong>：否</p>\n<p><em>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized，所以严格意义上它并不算单例模式。这种方式 <strong>延迟加载(lazy loading)</strong> 很明显，不要求线程安全，在多线程不能正常工作</em></p>\n<pre><code>public class Singleton {\n private static Singleton instance = null;</code></pre></blockquote>\n<p> private  Singleton() {<br> }<br> /**</p>\n<ul>\n<li>线程安全</li>\n<li>public static synchronized Singleton getInstance() {</li>\n<li>/<br>public static Singleton getInstance() {<br>  if (instance == null) {<pre><code>  instance = new Singleton();</code></pre>  }<br>  return instance;<br>}<br>}<pre><code></code></pre></li>\n</ul>\n</li>\n<li><p><strong>饿汉式</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化：</strong> 否</p>\n<p><strong>是否多线程安全：</strong> 是</p>\n<p><em>这种方式比较常用，但容易产生垃圾对象</em></p>\n<blockquote>\n<p>优点：没有加锁，执行效率会提高</p>\n<p>缺点：类加载时就初始化，浪费内存</p>\n<pre><code>public class Singleton_Hungry {\n private static Singleton_Hungry instance = new Singleton_Hungry();\n private Singleton_Hungry() {\n }\n public static Singleton_Hungry getInstance() {\n     return instance;\n }\n}</code></pre></blockquote>\n</blockquote>\n</li>\n<li><p><strong>双检锁/双重校验锁（DCL，即 double-checked locking）</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化：</strong> 是</p>\n<p><strong>是否多线程安全：</strong> 是</p>\n<p><em>这种方式采用双锁机制，安全且在多线程情况下能保持高性能</em></p>\n<blockquote>\n<p>双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题。由于singleton=new Singleton()对象的创建在JVM中可能会进行重排序，在多线程访问下存在风险，使用volatile修饰signleton实例变量有效，解决该问题</p>\n<pre><code>public class Singleton_DCL {\n //保证instance在所有线程同步\n private volatile static Singleton_DCL instance = null;\n //private避免类在外部被实例化\n private Singleton_DCL() {\n }\n public static Singleton_DCL getInstance() {\n     if (instance == null) {\n         synchronized (Singleton_DCL.class) {\n             if (instance == null) {\n                 instance = new Singleton_DCL();\n             }\n         }\n     }\n     return instance;\n }\n}</code></pre></blockquote>\n</blockquote>\n</li>\n<li><p><strong>静态内部类单例模式</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化：</strong> 是</p>\n<p><strong>是否多线程安全：</strong> 是</p>\n<p><em>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用</em></p>\n<blockquote>\n<p>只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，具体根据项目选择</p>\n<pre><code>public class Singleton_staticInnerClass {</code></pre></blockquote>\n</blockquote>\n<p> private Singleton_staticInnerClass(){<br> }<br> private static class Inner {</p>\n<pre><code> private static final Singleton_staticInnerClass\n         INSTANCE = new Singleton_staticInnerClass();</code></pre><p> }<br> public static final Singleton_staticInnerClass getInstance() {</p>\n<pre><code> return Inner.INSTANCE;</code></pre><p> }<br>}</p>\n<pre><code></code></pre></li>\n<li><p><strong>枚举单例模式</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化：</strong> 否</p>\n<p><strong>是否多线程安全：</strong> 是</p>\n<p><em>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化</em></p>\n<blockquote>\n<p>这种方式是《Effective Java》中提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化</p>\n<pre><code>public enum  Singleton_enum {\n INSTANCE;\n //doSomething 该实例支持的行为</code></pre></blockquote>\n</blockquote>\n<p> //可以省略此方法，通过Singleton.INSTANCE进行操作<br> public static Singleton_enum getInstance() {</p>\n<pre><code> return Singleton_enum.INSTANCE;</code></pre><p> }<br>}</p>\n<pre><code></code></pre></li>\n</ol>\n<h4 id=\"【例子-懒汉式】\"><a href=\"#【例子-懒汉式】\" class=\"headerlink\" title=\"【例子-懒汉式】\"></a>【例子-懒汉式】</h4><pre><code>public class President {\n    //保证instance在所有线程中同步\n    private static volatile President instance = null;\n    //private避免类在外部被实例化\n    private President() {\n        System.out.println(&quot;选举一个总统&quot;);\n    }\n    //在getInstance方法上加同步\n    public static synchronized President getInstance() {\n        if (instance == null) {\n            instance = new President();\n        } else {\n            System.out.println(&quot;已经实例化了...&quot;);\n        }\n        return instance;\n    }\n    public void getName() {\n        System.out.println(&quot;我是总统：川建国&quot;);\n    }\n}</code></pre><pre><code>public class Client {\n    public static void main(String[] args) {\n        President zt = President.getInstance();\n        zt.getName();\n        President zt_1 = President.getInstance();\n        zt_1.getName();\n        if (zt == zt_1) {\n            System.out.println(&quot;是同一个人&quot;);\n        } else {\n            System.out.println(&quot;不是同一个人&quot;);\n        }\n    }\n}</code></pre><p><strong>运行结果</strong></p>\n<pre><code>选举一个总统\n我是美国总统：川建国\n已经实例化一次了，不能再实例化了\n我是美国总统：川建国\n是同一个人</code></pre>","site":{"data":{"musics":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h2 id=\"设计模式之单例模式\"><a href=\"#设计模式之单例模式\" class=\"headerlink\" title=\"设计模式之单例模式\"></a>设计模式之单例模式</h2><p><em>单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象</em></p>\n<blockquote>\n<ol>\n<li>单例类只能有一个实例</li>\n<li>单例类必须自己创建自己的唯一实例</li>\n<li>单例类对外提供一个访问该单例的全局访问点</li>\n</ol>\n</blockquote>\n<h4 id=\"一、了解单例模式\"><a href=\"#一、了解单例模式\" class=\"headerlink\" title=\"一、了解单例模式\"></a>一、了解单例模式</h4><p><strong>应用场景：</strong> </p>\n<ol>\n<li>在应用场景中，某类只要求生成一个对象的时候，如一个班班主任、班长等</li>\n<li>对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如Web中的配置对象、数据库中的连接池等</li>\n<li>当某类需要频繁的实例化，而创建的对象又频繁被销毁的时候，如多线程的连接池、网络连接池等<blockquote>\n<p><strong><em>注意事项：</em></strong> getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化</p>\n</blockquote>\n</li>\n</ol>\n<p><strong>单例模式的结构：</strong></p>\n<blockquote>\n<p><em>单例类：</em> 包含一个实例且能自行创建这个实例的类<br><em>访问类：</em> 使用单例的类</p>\n</blockquote>\n<p>单例模式的结构图<br><img src=\"https://note.youdao.com/yws/res/3162/WEBRESOURCE4530fa811a5cf0f1fc7124974411f3ab\" alt=\"t.jpg\"></p>\n<h4 id=\"二、单例模式实现的几种方式\"><a href=\"#二、单例模式实现的几种方式\" class=\"headerlink\" title=\"二、单例模式实现的几种方式\"></a>二、单例模式实现的几种方式</h4><p><em>单例模式通常有==两种实现形式==： <strong>==懒汉式、饿汉式==</strong></em></p>\n<ol>\n<li><p><strong>懒汉式，线程不安全</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化</strong>：是</p>\n<p><strong>是否多线程安全</strong>：否</p>\n<p><em>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized，所以严格意义上它并不算单例模式。这种方式 <strong>延迟加载(lazy loading)</strong> 很明显，不要求线程安全，在多线程不能正常工作</em></p>\n<pre><code>public class Singleton {\n private static Singleton instance = null;</code></pre></blockquote>\n<p> private  Singleton() {<br> }<br> /**</p>\n<ul>\n<li>线程安全</li>\n<li>public static synchronized Singleton getInstance() {</li>\n<li>/<br>public static Singleton getInstance() {<br>  if (instance == null) {<pre><code>  instance = new Singleton();</code></pre>  }<br>  return instance;<br>}<br>}<pre><code></code></pre></li>\n</ul>\n</li>\n<li><p><strong>饿汉式</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化：</strong> 否</p>\n<p><strong>是否多线程安全：</strong> 是</p>\n<p><em>这种方式比较常用，但容易产生垃圾对象</em></p>\n<blockquote>\n<p>优点：没有加锁，执行效率会提高</p>\n<p>缺点：类加载时就初始化，浪费内存</p>\n<pre><code>public class Singleton_Hungry {\n private static Singleton_Hungry instance = new Singleton_Hungry();\n private Singleton_Hungry() {\n }\n public static Singleton_Hungry getInstance() {\n     return instance;\n }\n}</code></pre></blockquote>\n</blockquote>\n</li>\n<li><p><strong>双检锁/双重校验锁（DCL，即 double-checked locking）</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化：</strong> 是</p>\n<p><strong>是否多线程安全：</strong> 是</p>\n<p><em>这种方式采用双锁机制，安全且在多线程情况下能保持高性能</em></p>\n<blockquote>\n<p>双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题。由于singleton=new Singleton()对象的创建在JVM中可能会进行重排序，在多线程访问下存在风险，使用volatile修饰signleton实例变量有效，解决该问题</p>\n<pre><code>public class Singleton_DCL {\n //保证instance在所有线程同步\n private volatile static Singleton_DCL instance = null;\n //private避免类在外部被实例化\n private Singleton_DCL() {\n }\n public static Singleton_DCL getInstance() {\n     if (instance == null) {\n         synchronized (Singleton_DCL.class) {\n             if (instance == null) {\n                 instance = new Singleton_DCL();\n             }\n         }\n     }\n     return instance;\n }\n}</code></pre></blockquote>\n</blockquote>\n</li>\n<li><p><strong>静态内部类单例模式</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化：</strong> 是</p>\n<p><strong>是否多线程安全：</strong> 是</p>\n<p><em>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用</em></p>\n<blockquote>\n<p>只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，具体根据项目选择</p>\n<pre><code>public class Singleton_staticInnerClass {</code></pre></blockquote>\n</blockquote>\n<p> private Singleton_staticInnerClass(){<br> }<br> private static class Inner {</p>\n<pre><code> private static final Singleton_staticInnerClass\n         INSTANCE = new Singleton_staticInnerClass();</code></pre><p> }<br> public static final Singleton_staticInnerClass getInstance() {</p>\n<pre><code> return Inner.INSTANCE;</code></pre><p> }<br>}</p>\n<pre><code></code></pre></li>\n<li><p><strong>枚举单例模式</strong></p>\n<blockquote>\n<p><strong>是否Lazy初始化：</strong> 否</p>\n<p><strong>是否多线程安全：</strong> 是</p>\n<p><em>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化</em></p>\n<blockquote>\n<p>这种方式是《Effective Java》中提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化</p>\n<pre><code>public enum  Singleton_enum {\n INSTANCE;\n //doSomething 该实例支持的行为</code></pre></blockquote>\n</blockquote>\n<p> //可以省略此方法，通过Singleton.INSTANCE进行操作<br> public static Singleton_enum getInstance() {</p>\n<pre><code> return Singleton_enum.INSTANCE;</code></pre><p> }<br>}</p>\n<pre><code></code></pre></li>\n</ol>\n<h4 id=\"【例子-懒汉式】\"><a href=\"#【例子-懒汉式】\" class=\"headerlink\" title=\"【例子-懒汉式】\"></a>【例子-懒汉式】</h4><pre><code>public class President {\n    //保证instance在所有线程中同步\n    private static volatile President instance = null;\n    //private避免类在外部被实例化\n    private President() {\n        System.out.println(&quot;选举一个总统&quot;);\n    }\n    //在getInstance方法上加同步\n    public static synchronized President getInstance() {\n        if (instance == null) {\n            instance = new President();\n        } else {\n            System.out.println(&quot;已经实例化了...&quot;);\n        }\n        return instance;\n    }\n    public void getName() {\n        System.out.println(&quot;我是总统：川建国&quot;);\n    }\n}</code></pre><pre><code>public class Client {\n    public static void main(String[] args) {\n        President zt = President.getInstance();\n        zt.getName();\n        President zt_1 = President.getInstance();\n        zt_1.getName();\n        if (zt == zt_1) {\n            System.out.println(&quot;是同一个人&quot;);\n        } else {\n            System.out.println(&quot;不是同一个人&quot;);\n        }\n    }\n}</code></pre><p><strong>运行结果</strong></p>\n<pre><code>选举一个总统\n我是美国总统：川建国\n已经实例化一次了，不能再实例化了\n我是美国总统：川建国\n是同一个人</code></pre>"},{"title":"设计模式-开篇","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-19T07:39:12.000Z","password":null,"summary":"软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案","_content":"\n## 设计模式学习笔记（Java版）\n### [ywy学习链接yuy](http://c.biancheng.net/view/1317.html)\n### 设计模式的概念与意义\n**1.软件设计模式的概念**\n\n软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。\n\n**2. 学习设计模式的意义**\n\n设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。\n- 可以提高程序员的思维能力、编程能力和设计能力\n- 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期\n- 使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强\n\n*当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。*\n### 软件设计模式的基本要素\n软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。\n1. 模式名称\n>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。==**模式名称**==（**PatternName**）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。\n2. 问题\n>==**问题**==（**Problem**）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。\n3. 解决方案\n>模式问题的 ==**解决方案**==（**Solution**）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。\n4. 效果\n>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些 ==**效果**==（**Consequence**）对理解和评价这些模式有很大的帮助。\n### 设计模式的类型\n总共23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。以及另一类设计模式：J2EE 设计模式。\n#### 一、创建型模式\n*这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活*\n>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产\n\n- ***工厂（Factory）模式：*** 定义一个用于创建产品的接口，由子类决定生产什么产品\n- ***抽象工厂（Abstract Factory）模式：*** 提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品\n- ***单例（Singleton）模式：*** 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式\n- ***建造者（Builder）模式：*** 将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象\n- ***原型（Prototype）模式：*** 将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例\n\n*以上 5 种创建型模式，除了==工厂方法模式==属于类创建型模式，其他的全部属于对象创建型模式*\n#### 二、结构型模式\n*这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式*\n>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象\n\n- ***适配器（Adapter）模式：*** 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作\n- ***桥接（Bridge）模式：*** 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度\n- ***组合（Composite）模式：*** 将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性\n- ***装饰器（Decorator）模式：*** 动态的给对象增加一些职责，即增加其额外的功能\n- ***外观（Facade）模式：*** 为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问\n- ***享元模式（Flyweight）：*** 运用共享技术来有效地支持大量细粒度对象的复用\n- ***代理（Proxy）模式：*** 为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性\n- ==***过滤器（Filter、Criteria）模式：***==\n\n*以上 7 种结构型模式，除了==适配器模式==分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式*\n#### 三、行为型模式\n*这些设计模式特别关注对象之间的通信*\n>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配\n>\n>==行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为==。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性\n\n- ***职责链（Chain of Responsibility）模式：*** 把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合\n- ***命令（Command）模式：*** 将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开\n- ***解释器（Interpreter）模式：*** 提供如何定义语言的文法，以及对语言句子的解释方法，即解释器\n- ***迭代器（Iterator）模式：*** 提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示\n- ***中介者（Mediator）模式：*** 定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解\n- ***备忘录（Memento）模式：*** 在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它\n- ***观察者（Observer）模式:*** 多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为\n- ***状态（State）模式：*** 允许一个对象在其内部状态发生改变时改变其行为能力\n- ***策略（Strategy）模式：*** 定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户\n- ***模板方法（TemplateMethod）模式：*** 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤\n- ***访问者（Visitor）模式：*** 在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问\n- ==***空对象（Null Object）模式：***==\n\n*以上 11 种行为型模式，除了==模板方法模式和解释器模式==是类行为型模式，其他的全部属于对象行为型模式*\n#### 四、J2EE模式\n*这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的*\n- ***MVC （MVC）模式：***\n- ***业务代表（Business Delegate）模式：***\n- ***组合实体（Composite Entity）模式：***\n- ***数据访问对象（Data Access Object）模式：***\n- ***前端控制器（Front Controller）模式：***\n- ***拦截过滤器（Intercepting Filter）模式：***\n- ***服务定位器（Service Locator）模式：***\n- ***传输对象（Transfer Object）模式：***\n### 设计模式的六大原则\n***1、开闭原则（Open Close Principle）***\n>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n\n***2、里氏代换原则（Liskov Substitution Principle）***\n>里氏代换原则是面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n***3、依赖倒转原则（Dependence Inversion Principle）***\n>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n\n***4、接口隔离原则（Interface Segregation Principle）***\n>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n\n***5、迪米特法则，又称最少知道原则（Demeter Principle）***\n>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n***6、合成复用原则（Composite Reuse Principle）***\n>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n\n***\n### 设计模式原则详解↑↓\n#### 1. 开闭原则\n*定义：软件实体应当对扩展开放，对修改关闭，这就是开闭原则的经典定义*\n>软件实体包括：\n>- 项目中划分出的模块\n>- 类与接口\n>- 方法\n\n==*开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求*==\n\n**1. 开闭原则的作用**\n\n*开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：*\n>**1. 对软件测试的影响**\n>> 软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行\n>\n>**2. 可提高代码的可复用性**\n>> 粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性\n>\n>**3. 可以提高软件的可维护性**\n>> 遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护\n\n**2. 开闭原则的实现方法**\n\n*可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中*\n>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。\n#### 2.里氏替换原则\n*继承必须确保超类所拥有的性质在子类中仍然成立*\n>里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范\n\n**1. 里氏替换原则的作用**\n>- 里氏替换原则是实现开闭原则的重要方式之一\n>- 它克服了继承中重写父类造成的可复用性变差的缺点\n>- 它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性\n\n**2. 里氏替换原则的实现方法**\n\n*==里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。== 也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法*\n>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大\n>\n>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系\n>\n>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等\n\n**【例子】里氏替换原则在“几维鸟不是鸟”实例中的应用**\n> 分析：鸟一般都会飞行，如燕子的飞行速度大概是每小时 120 千米。但是新西兰的几维鸟由于翅膀退化无法飞行。假如要设计一个实例，计算这两种鸟飞行 300 千米要花费的时间。显然，拿燕子来测试这段代码，结果正确，能计算出所需要的时间；但拿几维鸟来测试，结果会发生“除零异常”或是“无穷大”，明显不符合预期，其类图如图所示\n![i.jpg](https://note.youdao.com/yws/res/2171/WEBRESOURCEb0b7e4aa2855e4160fc5ec48e5bec699)\n\n**程序代码如下：**\n```\npublic class Client {\n    public static void main(String[] args) {\n        Bird swallow = new Swallow();\n        Bird brownKiwi = new BrownKiwi();\n        swallow.setSpeed(120);\n        brownKiwi.setSpeed(120);\n        System.out.println(\"如果飞行300公里：\");\n        try {\n            System.out.println(\"燕子将飞行\" + swallow.getFlyTime(300) + \"小时.\");\n            System.out.println(\"几维鸟将飞行\" + brownKiwi.getFlyTime(300) + \"小时。\");\n        } catch (Exception err) {\n            System.out.println(\"发生错误了!\");\n        }\n    }\n}\n\n//鸟类\nclass Bird {\n    double flySpeed;\n\n    public void setSpeed(double speed) {\n        flySpeed = speed;\n    }\n\n    public double getFlyTime(double distance) {\n        return (distance / flySpeed);\n    }\n}\n\n//燕子类\nclass Swallow extends Bird {\n}\n\n//几维鸟类\nclass BrownKiwi extends Bird {\n    public void setSpeed(double speed) {\n        flySpeed = 0;\n    }\n}\n```\n**程序的运行结果如下：**\n```\n如果飞行300公里：\n燕子将飞行2.5小时.\n几维鸟将飞行Infinity小时。\n```\n程序运行'错误'的原因是：几维鸟类重写了鸟类的 setSpeed(double speed) 方法，这违背了里氏替换原则。正确的做法是：取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，它们都有奔跑的能力。几维鸟的飞行速度虽然为0，但奔跑速度不为 0，可以计算出其奔跑 300 千米所要花费的时间\n![j.jpg](https://note.youdao.com/yws/res/2187/WEBRESOURCEc6636816a2809bdedea10b99879e900e)\n#### 3.依赖倒置原则\n*依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：==要面向接口编程，不要面向实现编程==*\n\n**依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合**\n>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类\n>\n>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成\n\n**1.依赖倒置原则的作用**\n>- 依赖倒置原则可以降低类间的耦合性\n>- 依赖倒置原则可以提高系统的稳定性\n>- 依赖倒置原则可以减少并行开发引起的风险\n>- 依赖倒置原则可以提高代码的可读性和可维护性\n\n**2.依赖倒置原则的实现方法**\n\n==依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性==，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。\n>1. 每个类尽量提供接口或抽象类，或者两者都具备。\n>2. 变量的声明类型尽量是接口或者是抽象类。\n>3. 任何类都不应该从具体类派生。\n>4. 使用继承时尽量遵循里氏替换原则\n\n**【例1】依赖倒置原则在“顾客购物程序”中的应用**\n![k.jpg](https://note.youdao.com/yws/res/2214/WEBRESOURCE95ac53001ab5f0f2fc0212d6f7d47157)\n**程序代码如下：**\n```\npublic class Client_shop {\n    public static void main(String[] args) {\n        Customer yu = new Customer();\n        System.out.println(\"顾客购买以下商品：\");\n        yu.shopping(new ShaoGuanShop());\n        yu.shopping(new WuYuanShop());\n    }\n}\n\n//商店\ninterface Shop {\n    public String sell(); //卖\n}\n\n//韶关网店\nclass ShaoGuanShop implements Shop {\n    public String sell() {\n        return \"韶关土特产：香菇、木耳……\";\n    }\n}\n\n//婺源网店\nclass WuYuanShop implements Shop {\n    public String sell() {\n        return \"婺源土特产：绿茶、酒糟鱼……\";\n    }\n}\n\n//顾客\nclass Customer {\n    public void shopping(Shop shop) {\n        //购物\n        System.out.println(shop.sell());\n    }\n}\n```\n**程序运行结果如下：**\n```\n顾客购买以下商品：\n韶关土特产：香菇、木耳……\n婺源土特产：绿茶、酒糟鱼……\n```\n#### ==单一职责原则==\n*单一职责原则又称单一功能原则。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分*\n\n**该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：**\n>1. 一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力\n>2. 当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费\n\n**1. 单一职责原则的优点**\n\n*单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点*\n>- 降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多\n>- 提高类的可读性。复杂性降低，自然其可读性会提高\n>- 提高系统的可维护性。可读性提高，那自然更容易维护了\n>- 变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响\n\n**2. 单一职责原则的实现方法**\n\n**【例子】大学学生工作管理程序**\n![l.jpg](https://note.youdao.com/yws/res/2246/WEBRESOURCE9046e1cd669709587f9a653cb1dac1e0)\n#### 4.接口隔离原则\n*接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法*\n\n**1. 定义**\n>1. 客户端不应该被迫依赖于它不使用的方法；\n>2. 一个类对另一个类的依赖应该建立在最小的接口上↓↓\n\n>**↑要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用**\n\n*接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：*\n>- 单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离\n>- 单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建\n\n**2. 接口隔离原则的优点**\n\n*接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：*\n>1. 将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性\n>2. 接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性\n>3. 如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险\n>4. 使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义\n>5. 能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码\n\n**3. 接口隔离原则的实现方法**\n\n*在具体应用接口隔离原则时，应该根据以下几个规则来衡量：*\n>- 接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑\n>- 为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法\n>- 了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑\n>- 提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情\n\n**【例子】学生成绩管理程序**\n![m.jpg](https://note.youdao.com/yws/res/2291/WEBRESOURCE9e46465b02babadf8e94e080ce81ac43)\n**程序代码如下：**\n```\npublic class Client_score {\n    public static void main(String[] args) {\n        InputModule input =StuScoreList.getInputModule();\n        CountModule count =StuScoreList.getCountModule();\n        PrintModule print =StuScoreList.getPrintModule();\n        input.insert();\n        count.countTotalScore();\n        print.printStuInfo();\n        input.delete();\n    }\n}\n\n//输入模块接口\ninterface InputModule {\n    void insert();\n\n    void delete();\n\n    void modify();\n}\n\n//统计模块接口\ninterface CountModule {\n    void countTotalScore();\n\n    void countAverage();\n}\n\n//打印模块接口\ninterface PrintModule {\n    void printStuInfo();\n\n    void queryStuInfo();\n}\n\n//实现类\nclass StuScoreList implements InputModule, CountModule, PrintModule {\n    private StuScoreList() {\n    }\n\n    public static InputModule getInputModule() {\n        return new StuScoreList();\n    }\n\n    public static CountModule getCountModule() {\n        return new StuScoreList();\n    }\n\n    public static PrintModule getPrintModule() {\n        return new StuScoreList();\n    }\n\n    @Override\n    public void insert() {\n        System.out.println(\"输入模块的insert()方法被调用！\");\n    }\n\n    @Override\n    public void delete() {\n        System.out.println(\"输入模块的delete()方法被调用！\");\n    }\n\n    @Override\n    public void modify() {\n        System.out.println(\"输入模块的modify()方法被调用！\");\n    }\n\n    @Override\n    public void countTotalScore() {\n        System.out.println(\"统计模块的countTotalScore()方法被调用！\");\n    }\n\n    @Override\n    public void countAverage() {\n        System.out.println(\"统计模块的countAverage()方法被调用！\");\n    }\n\n    @Override\n    public void printStuInfo() {\n        System.out.println(\"打印模块的printStuInfo()方法被调用！\");\n    }\n\n    @Override\n    public void queryStuInfo() {\n        System.out.println(\"打印模块的queryStuInfo()方法被调用！\");\n    }\n}\n```\n**程序运行结果如下：**\n```\n输入模块的insert()方法被调用！\n统计模块的countTotalScore()方法被调用！\n打印模块的printStuInfo()方法被调用！\n输入模块的delete()方法被调用！\n```\n#### 5.迪米特法则\n*迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性*\n>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法\n\n**1. 迪米特法则的优点**\n\n*迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点*\n>1. 降低了类之间的耦合度，提高了模块的相对独立性。\n>2. 由于亲合度降低，从而提高了类的可复用率和系统的扩展性\n \n*但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。*\n\n**2. 迪米特法则的实现方法**\n\n*从迪米特法则的定义和特点可知，它强调以下两点：*\n>1. 从依赖者的角度来说，只依赖应该依赖的对象。\n>2. 从被依赖者的角度说，只暴露应该暴露的方法\n\n*所以，在运用迪米特法则时要注意以下 6 点:*\n>1. 在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。\n>2. 在类的结构设计上，尽量降低类成员的访问权限。\n>3. 在类的设计上，优先考虑将一个类设置成不变类。\n>4. 在对其他类的引用上，将引用其他对象的次数降到最低。\n>5. 不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。\n>6. 谨慎使用序列化（Serializable）功能。\n\n**【例子】明星与经纪人的关系实例**\n\n*分析：明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如与粉丝的见面会，与媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则，其类图如图所示：*\n![n.jpg](https://note.youdao.com/yws/res/2326/WEBRESOURCEce99ebf001f38b2cb8dafc7bcc135b9a)\n**程序代码如下：**\n```\npublic class Client_star {\n    public static void main(String[] args) {\n        Agent agent = new Agent();\n        agent.setMyStar(new Star(\"YU\"));\n        agent.setMyFans(new Fans(\"YS\"));\n        agent.setMyCompany(new Company(\"ywy_company\"));\n        agent.meeting();\n        agent.business();\n    }\n}\n\n//经纪人\n@Setter\nclass Agent {\n    private Star myStar;\n    private Fans myFans;\n    private Company myCompany;\n\n    public void meeting() {\n        System.out.println(myFans.getName() + \"与明星\" + myStar.getName() + \"见面了。\");\n    }\n\n    public void business() {\n        System.out.println(myCompany.getName() + \"与明星\" + myStar.getName() + \"洽淡业务。\");\n    }\n}\n\n//明星\n@Getter\n@AllArgsConstructor\nclass Star {\n    private String name;\n}\n\n//粉丝\n@Getter\n@AllArgsConstructor\nclass Fans {\n    private String name;\n}\n\n//媒体公司\n@Getter\n@AllArgsConstructor\nclass Company {\n    private String name;\n}\n```\n**程序运行结果如下：**\n```\nYS与明星YU见面了。\nywy_company与明星YU洽淡业务。\n```\n#### 6.合成复用原则\n*它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现*\n\n*==如果要使用继承关系，则必须严格遵循里氏替换原则==。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范*\n\n**1.合成复用原则的重要性**\n\n*通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：*\n>1. 继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用\n>2. 子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护\n>3. 它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化\n\n*采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：*\n>1. 它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用\n>2. 新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口\n>3. 复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象\n\n**2.合成复用原则的实现方法**\n\n*合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用*\n\n**【例子】汽车分类管理程序**\n\n*继承关系实现汽车分类的类图：*\n>分析：汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多\n![o.jpg](https://note.youdao.com/yws/res/2361/WEBRESOURCE8da802979a817c48eecca0c4322b8061)\n\n*组合关系实现汽车分类的类图：*\n>从上图可以看出用继承关系实现会产生很多子类，而且增加新的“动力源”或者增加新的“颜色”都要修改源代码，这违背了开闭原则，显然不可取\n![p.jpg](https://note.youdao.com/yws/res/2366/WEBRESOURCE2c5dab2f41f12cf6f5d94effd3291c85)\n\n### 总结\n*上面一共介绍了 7 种设计原则，它们分别为==开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则以及合成复用原则==*\n\n***这 7 种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。***\n>- 其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；\n>- 里氏替换原则告诉我们不要破坏继承体系；\n>- 依赖倒置原则告诉我们要面向接口编程；\n>- 单一职责原则告诉我们实现类要职责单一；\n>- 接口隔离原则告诉我们在设计接口的时候要精简单一；\n>- 迪米特法则告诉我们要降低耦合度；\n>- 合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用\n\n","source":"_posts/设计模式-开篇.md","raw":"---\ntitle: 设计模式-开篇\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-10-19 15:39:12\npassword:\nsummary: 软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案\ntags:\n- 设计模式\ncategories:\n- Java\n---\n\n## 设计模式学习笔记（Java版）\n### [ywy学习链接yuy](http://c.biancheng.net/view/1317.html)\n### 设计模式的概念与意义\n**1.软件设计模式的概念**\n\n软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。\n\n**2. 学习设计模式的意义**\n\n设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。\n- 可以提高程序员的思维能力、编程能力和设计能力\n- 使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期\n- 使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强\n\n*当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。*\n### 软件设计模式的基本要素\n软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。\n1. 模式名称\n>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。==**模式名称**==（**PatternName**）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。\n2. 问题\n>==**问题**==（**Problem**）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。\n3. 解决方案\n>模式问题的 ==**解决方案**==（**Solution**）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。\n4. 效果\n>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些 ==**效果**==（**Consequence**）对理解和评价这些模式有很大的帮助。\n### 设计模式的类型\n总共23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。以及另一类设计模式：J2EE 设计模式。\n#### 一、创建型模式\n*这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活*\n>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产\n\n- ***工厂（Factory）模式：*** 定义一个用于创建产品的接口，由子类决定生产什么产品\n- ***抽象工厂（Abstract Factory）模式：*** 提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品\n- ***单例（Singleton）模式：*** 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式\n- ***建造者（Builder）模式：*** 将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象\n- ***原型（Prototype）模式：*** 将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例\n\n*以上 5 种创建型模式，除了==工厂方法模式==属于类创建型模式，其他的全部属于对象创建型模式*\n#### 二、结构型模式\n*这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式*\n>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象\n\n- ***适配器（Adapter）模式：*** 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作\n- ***桥接（Bridge）模式：*** 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度\n- ***组合（Composite）模式：*** 将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性\n- ***装饰器（Decorator）模式：*** 动态的给对象增加一些职责，即增加其额外的功能\n- ***外观（Facade）模式：*** 为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问\n- ***享元模式（Flyweight）：*** 运用共享技术来有效地支持大量细粒度对象的复用\n- ***代理（Proxy）模式：*** 为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性\n- ==***过滤器（Filter、Criteria）模式：***==\n\n*以上 7 种结构型模式，除了==适配器模式==分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式*\n#### 三、行为型模式\n*这些设计模式特别关注对象之间的通信*\n>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配\n>\n>==行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为==。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性\n\n- ***职责链（Chain of Responsibility）模式：*** 把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合\n- ***命令（Command）模式：*** 将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开\n- ***解释器（Interpreter）模式：*** 提供如何定义语言的文法，以及对语言句子的解释方法，即解释器\n- ***迭代器（Iterator）模式：*** 提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示\n- ***中介者（Mediator）模式：*** 定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解\n- ***备忘录（Memento）模式：*** 在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它\n- ***观察者（Observer）模式:*** 多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为\n- ***状态（State）模式：*** 允许一个对象在其内部状态发生改变时改变其行为能力\n- ***策略（Strategy）模式：*** 定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户\n- ***模板方法（TemplateMethod）模式：*** 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤\n- ***访问者（Visitor）模式：*** 在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问\n- ==***空对象（Null Object）模式：***==\n\n*以上 11 种行为型模式，除了==模板方法模式和解释器模式==是类行为型模式，其他的全部属于对象行为型模式*\n#### 四、J2EE模式\n*这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的*\n- ***MVC （MVC）模式：***\n- ***业务代表（Business Delegate）模式：***\n- ***组合实体（Composite Entity）模式：***\n- ***数据访问对象（Data Access Object）模式：***\n- ***前端控制器（Front Controller）模式：***\n- ***拦截过滤器（Intercepting Filter）模式：***\n- ***服务定位器（Service Locator）模式：***\n- ***传输对象（Transfer Object）模式：***\n### 设计模式的六大原则\n***1、开闭原则（Open Close Principle）***\n>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n\n***2、里氏代换原则（Liskov Substitution Principle）***\n>里氏代换原则是面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n***3、依赖倒转原则（Dependence Inversion Principle）***\n>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n\n***4、接口隔离原则（Interface Segregation Principle）***\n>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n\n***5、迪米特法则，又称最少知道原则（Demeter Principle）***\n>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n***6、合成复用原则（Composite Reuse Principle）***\n>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n\n***\n### 设计模式原则详解↑↓\n#### 1. 开闭原则\n*定义：软件实体应当对扩展开放，对修改关闭，这就是开闭原则的经典定义*\n>软件实体包括：\n>- 项目中划分出的模块\n>- 类与接口\n>- 方法\n\n==*开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求*==\n\n**1. 开闭原则的作用**\n\n*开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：*\n>**1. 对软件测试的影响**\n>> 软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行\n>\n>**2. 可提高代码的可复用性**\n>> 粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性\n>\n>**3. 可以提高软件的可维护性**\n>> 遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护\n\n**2. 开闭原则的实现方法**\n\n*可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中*\n>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。\n#### 2.里氏替换原则\n*继承必须确保超类所拥有的性质在子类中仍然成立*\n>里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范\n\n**1. 里氏替换原则的作用**\n>- 里氏替换原则是实现开闭原则的重要方式之一\n>- 它克服了继承中重写父类造成的可复用性变差的缺点\n>- 它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性\n\n**2. 里氏替换原则的实现方法**\n\n*==里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。== 也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法*\n>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大\n>\n>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系\n>\n>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等\n\n**【例子】里氏替换原则在“几维鸟不是鸟”实例中的应用**\n> 分析：鸟一般都会飞行，如燕子的飞行速度大概是每小时 120 千米。但是新西兰的几维鸟由于翅膀退化无法飞行。假如要设计一个实例，计算这两种鸟飞行 300 千米要花费的时间。显然，拿燕子来测试这段代码，结果正确，能计算出所需要的时间；但拿几维鸟来测试，结果会发生“除零异常”或是“无穷大”，明显不符合预期，其类图如图所示\n![i.jpg](https://note.youdao.com/yws/res/2171/WEBRESOURCEb0b7e4aa2855e4160fc5ec48e5bec699)\n\n**程序代码如下：**\n```\npublic class Client {\n    public static void main(String[] args) {\n        Bird swallow = new Swallow();\n        Bird brownKiwi = new BrownKiwi();\n        swallow.setSpeed(120);\n        brownKiwi.setSpeed(120);\n        System.out.println(\"如果飞行300公里：\");\n        try {\n            System.out.println(\"燕子将飞行\" + swallow.getFlyTime(300) + \"小时.\");\n            System.out.println(\"几维鸟将飞行\" + brownKiwi.getFlyTime(300) + \"小时。\");\n        } catch (Exception err) {\n            System.out.println(\"发生错误了!\");\n        }\n    }\n}\n\n//鸟类\nclass Bird {\n    double flySpeed;\n\n    public void setSpeed(double speed) {\n        flySpeed = speed;\n    }\n\n    public double getFlyTime(double distance) {\n        return (distance / flySpeed);\n    }\n}\n\n//燕子类\nclass Swallow extends Bird {\n}\n\n//几维鸟类\nclass BrownKiwi extends Bird {\n    public void setSpeed(double speed) {\n        flySpeed = 0;\n    }\n}\n```\n**程序的运行结果如下：**\n```\n如果飞行300公里：\n燕子将飞行2.5小时.\n几维鸟将飞行Infinity小时。\n```\n程序运行'错误'的原因是：几维鸟类重写了鸟类的 setSpeed(double speed) 方法，这违背了里氏替换原则。正确的做法是：取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，它们都有奔跑的能力。几维鸟的飞行速度虽然为0，但奔跑速度不为 0，可以计算出其奔跑 300 千米所要花费的时间\n![j.jpg](https://note.youdao.com/yws/res/2187/WEBRESOURCEc6636816a2809bdedea10b99879e900e)\n#### 3.依赖倒置原则\n*依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：==要面向接口编程，不要面向实现编程==*\n\n**依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合**\n>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类\n>\n>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成\n\n**1.依赖倒置原则的作用**\n>- 依赖倒置原则可以降低类间的耦合性\n>- 依赖倒置原则可以提高系统的稳定性\n>- 依赖倒置原则可以减少并行开发引起的风险\n>- 依赖倒置原则可以提高代码的可读性和可维护性\n\n**2.依赖倒置原则的实现方法**\n\n==依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性==，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。\n>1. 每个类尽量提供接口或抽象类，或者两者都具备。\n>2. 变量的声明类型尽量是接口或者是抽象类。\n>3. 任何类都不应该从具体类派生。\n>4. 使用继承时尽量遵循里氏替换原则\n\n**【例1】依赖倒置原则在“顾客购物程序”中的应用**\n![k.jpg](https://note.youdao.com/yws/res/2214/WEBRESOURCE95ac53001ab5f0f2fc0212d6f7d47157)\n**程序代码如下：**\n```\npublic class Client_shop {\n    public static void main(String[] args) {\n        Customer yu = new Customer();\n        System.out.println(\"顾客购买以下商品：\");\n        yu.shopping(new ShaoGuanShop());\n        yu.shopping(new WuYuanShop());\n    }\n}\n\n//商店\ninterface Shop {\n    public String sell(); //卖\n}\n\n//韶关网店\nclass ShaoGuanShop implements Shop {\n    public String sell() {\n        return \"韶关土特产：香菇、木耳……\";\n    }\n}\n\n//婺源网店\nclass WuYuanShop implements Shop {\n    public String sell() {\n        return \"婺源土特产：绿茶、酒糟鱼……\";\n    }\n}\n\n//顾客\nclass Customer {\n    public void shopping(Shop shop) {\n        //购物\n        System.out.println(shop.sell());\n    }\n}\n```\n**程序运行结果如下：**\n```\n顾客购买以下商品：\n韶关土特产：香菇、木耳……\n婺源土特产：绿茶、酒糟鱼……\n```\n#### ==单一职责原则==\n*单一职责原则又称单一功能原则。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分*\n\n**该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：**\n>1. 一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力\n>2. 当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费\n\n**1. 单一职责原则的优点**\n\n*单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点*\n>- 降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多\n>- 提高类的可读性。复杂性降低，自然其可读性会提高\n>- 提高系统的可维护性。可读性提高，那自然更容易维护了\n>- 变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响\n\n**2. 单一职责原则的实现方法**\n\n**【例子】大学学生工作管理程序**\n![l.jpg](https://note.youdao.com/yws/res/2246/WEBRESOURCE9046e1cd669709587f9a653cb1dac1e0)\n#### 4.接口隔离原则\n*接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法*\n\n**1. 定义**\n>1. 客户端不应该被迫依赖于它不使用的方法；\n>2. 一个类对另一个类的依赖应该建立在最小的接口上↓↓\n\n>**↑要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用**\n\n*接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：*\n>- 单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离\n>- 单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建\n\n**2. 接口隔离原则的优点**\n\n*接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：*\n>1. 将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性\n>2. 接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性\n>3. 如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险\n>4. 使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义\n>5. 能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码\n\n**3. 接口隔离原则的实现方法**\n\n*在具体应用接口隔离原则时，应该根据以下几个规则来衡量：*\n>- 接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑\n>- 为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法\n>- 了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑\n>- 提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情\n\n**【例子】学生成绩管理程序**\n![m.jpg](https://note.youdao.com/yws/res/2291/WEBRESOURCE9e46465b02babadf8e94e080ce81ac43)\n**程序代码如下：**\n```\npublic class Client_score {\n    public static void main(String[] args) {\n        InputModule input =StuScoreList.getInputModule();\n        CountModule count =StuScoreList.getCountModule();\n        PrintModule print =StuScoreList.getPrintModule();\n        input.insert();\n        count.countTotalScore();\n        print.printStuInfo();\n        input.delete();\n    }\n}\n\n//输入模块接口\ninterface InputModule {\n    void insert();\n\n    void delete();\n\n    void modify();\n}\n\n//统计模块接口\ninterface CountModule {\n    void countTotalScore();\n\n    void countAverage();\n}\n\n//打印模块接口\ninterface PrintModule {\n    void printStuInfo();\n\n    void queryStuInfo();\n}\n\n//实现类\nclass StuScoreList implements InputModule, CountModule, PrintModule {\n    private StuScoreList() {\n    }\n\n    public static InputModule getInputModule() {\n        return new StuScoreList();\n    }\n\n    public static CountModule getCountModule() {\n        return new StuScoreList();\n    }\n\n    public static PrintModule getPrintModule() {\n        return new StuScoreList();\n    }\n\n    @Override\n    public void insert() {\n        System.out.println(\"输入模块的insert()方法被调用！\");\n    }\n\n    @Override\n    public void delete() {\n        System.out.println(\"输入模块的delete()方法被调用！\");\n    }\n\n    @Override\n    public void modify() {\n        System.out.println(\"输入模块的modify()方法被调用！\");\n    }\n\n    @Override\n    public void countTotalScore() {\n        System.out.println(\"统计模块的countTotalScore()方法被调用！\");\n    }\n\n    @Override\n    public void countAverage() {\n        System.out.println(\"统计模块的countAverage()方法被调用！\");\n    }\n\n    @Override\n    public void printStuInfo() {\n        System.out.println(\"打印模块的printStuInfo()方法被调用！\");\n    }\n\n    @Override\n    public void queryStuInfo() {\n        System.out.println(\"打印模块的queryStuInfo()方法被调用！\");\n    }\n}\n```\n**程序运行结果如下：**\n```\n输入模块的insert()方法被调用！\n统计模块的countTotalScore()方法被调用！\n打印模块的printStuInfo()方法被调用！\n输入模块的delete()方法被调用！\n```\n#### 5.迪米特法则\n*迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性*\n>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法\n\n**1. 迪米特法则的优点**\n\n*迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点*\n>1. 降低了类之间的耦合度，提高了模块的相对独立性。\n>2. 由于亲合度降低，从而提高了类的可复用率和系统的扩展性\n \n*但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。*\n\n**2. 迪米特法则的实现方法**\n\n*从迪米特法则的定义和特点可知，它强调以下两点：*\n>1. 从依赖者的角度来说，只依赖应该依赖的对象。\n>2. 从被依赖者的角度说，只暴露应该暴露的方法\n\n*所以，在运用迪米特法则时要注意以下 6 点:*\n>1. 在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。\n>2. 在类的结构设计上，尽量降低类成员的访问权限。\n>3. 在类的设计上，优先考虑将一个类设置成不变类。\n>4. 在对其他类的引用上，将引用其他对象的次数降到最低。\n>5. 不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。\n>6. 谨慎使用序列化（Serializable）功能。\n\n**【例子】明星与经纪人的关系实例**\n\n*分析：明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如与粉丝的见面会，与媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则，其类图如图所示：*\n![n.jpg](https://note.youdao.com/yws/res/2326/WEBRESOURCEce99ebf001f38b2cb8dafc7bcc135b9a)\n**程序代码如下：**\n```\npublic class Client_star {\n    public static void main(String[] args) {\n        Agent agent = new Agent();\n        agent.setMyStar(new Star(\"YU\"));\n        agent.setMyFans(new Fans(\"YS\"));\n        agent.setMyCompany(new Company(\"ywy_company\"));\n        agent.meeting();\n        agent.business();\n    }\n}\n\n//经纪人\n@Setter\nclass Agent {\n    private Star myStar;\n    private Fans myFans;\n    private Company myCompany;\n\n    public void meeting() {\n        System.out.println(myFans.getName() + \"与明星\" + myStar.getName() + \"见面了。\");\n    }\n\n    public void business() {\n        System.out.println(myCompany.getName() + \"与明星\" + myStar.getName() + \"洽淡业务。\");\n    }\n}\n\n//明星\n@Getter\n@AllArgsConstructor\nclass Star {\n    private String name;\n}\n\n//粉丝\n@Getter\n@AllArgsConstructor\nclass Fans {\n    private String name;\n}\n\n//媒体公司\n@Getter\n@AllArgsConstructor\nclass Company {\n    private String name;\n}\n```\n**程序运行结果如下：**\n```\nYS与明星YU见面了。\nywy_company与明星YU洽淡业务。\n```\n#### 6.合成复用原则\n*它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现*\n\n*==如果要使用继承关系，则必须严格遵循里氏替换原则==。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范*\n\n**1.合成复用原则的重要性**\n\n*通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：*\n>1. 继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用\n>2. 子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护\n>3. 它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化\n\n*采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：*\n>1. 它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用\n>2. 新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口\n>3. 复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象\n\n**2.合成复用原则的实现方法**\n\n*合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用*\n\n**【例子】汽车分类管理程序**\n\n*继承关系实现汽车分类的类图：*\n>分析：汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多\n![o.jpg](https://note.youdao.com/yws/res/2361/WEBRESOURCE8da802979a817c48eecca0c4322b8061)\n\n*组合关系实现汽车分类的类图：*\n>从上图可以看出用继承关系实现会产生很多子类，而且增加新的“动力源”或者增加新的“颜色”都要修改源代码，这违背了开闭原则，显然不可取\n![p.jpg](https://note.youdao.com/yws/res/2366/WEBRESOURCE2c5dab2f41f12cf6f5d94effd3291c85)\n\n### 总结\n*上面一共介绍了 7 种设计原则，它们分别为==开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则以及合成复用原则==*\n\n***这 7 种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。***\n>- 其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；\n>- 里氏替换原则告诉我们不要破坏继承体系；\n>- 依赖倒置原则告诉我们要面向接口编程；\n>- 单一职责原则告诉我们实现类要职责单一；\n>- 接口隔离原则告诉我们在设计接口的时候要精简单一；\n>- 迪米特法则告诉我们要降低耦合度；\n>- 合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用\n\n","slug":"设计模式-开篇","published":1,"updated":"2019-10-19T07:55:18.430Z","_id":"ck1x9lwpq000qpguddzsm35g0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"设计模式学习笔记（Java版）\"><a href=\"#设计模式学习笔记（Java版）\" class=\"headerlink\" title=\"设计模式学习笔记（Java版）\"></a>设计模式学习笔记（Java版）</h2><h3 id=\"ywy学习链接yuy\"><a href=\"#ywy学习链接yuy\" class=\"headerlink\" title=\"ywy学习链接yuy\"></a><a href=\"http://c.biancheng.net/view/1317.html\" target=\"_blank\" rel=\"noopener\">ywy学习链接yuy</a></h3><h3 id=\"设计模式的概念与意义\"><a href=\"#设计模式的概念与意义\" class=\"headerlink\" title=\"设计模式的概念与意义\"></a>设计模式的概念与意义</h3><p><strong>1.软件设计模式的概念</strong></p>\n<p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p>\n<p><strong>2. 学习设计模式的意义</strong></p>\n<p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。</p>\n<ul>\n<li>可以提高程序员的思维能力、编程能力和设计能力</li>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强</li>\n</ul>\n<p><em>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</em></p>\n<h3 id=\"软件设计模式的基本要素\"><a href=\"#软件设计模式的基本要素\" class=\"headerlink\" title=\"软件设计模式的基本要素\"></a>软件设计模式的基本要素</h3><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p>\n<ol>\n<li>模式名称<blockquote>\n<p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。==<strong>模式名称</strong>==（<strong>PatternName</strong>）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p>\n</blockquote>\n</li>\n<li>问题<blockquote>\n<p>==<strong>问题</strong>==（<strong>Problem</strong>）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p>\n</blockquote>\n</li>\n<li>解决方案<blockquote>\n<p>模式问题的 ==<strong>解决方案</strong>==（<strong>Solution</strong>）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p>\n</blockquote>\n</li>\n<li>效果<blockquote>\n<p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些 ==<strong>效果</strong>==（<strong>Consequence</strong>）对理解和评价这些模式有很大的帮助。</p>\n</blockquote>\n<h3 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h3>总共23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。以及另一类设计模式：J2EE 设计模式。<h4 id=\"一、创建型模式\"><a href=\"#一、创建型模式\" class=\"headerlink\" title=\"一、创建型模式\"></a>一、创建型模式</h4></li>\n</ol>\n<p><em>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</em></p>\n<blockquote>\n<p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产</p>\n</blockquote>\n<ul>\n<li><strong><em>工厂（Factory）模式：</em></strong> 定义一个用于创建产品的接口，由子类决定生产什么产品</li>\n<li><strong><em>抽象工厂（Abstract Factory）模式：</em></strong> 提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品</li>\n<li><strong><em>单例（Singleton）模式：</em></strong> 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式</li>\n<li><strong><em>建造者（Builder）模式：</em></strong> 将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象</li>\n<li><strong><em>原型（Prototype）模式：</em></strong> 将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例</li>\n</ul>\n<p><em>以上 5 种创建型模式，除了==工厂方法模式==属于类创建型模式，其他的全部属于对象创建型模式</em></p>\n<h4 id=\"二、结构型模式\"><a href=\"#二、结构型模式\" class=\"headerlink\" title=\"二、结构型模式\"></a>二、结构型模式</h4><p><em>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</em></p>\n<blockquote>\n<p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象</p>\n</blockquote>\n<ul>\n<li><strong><em>适配器（Adapter）模式：</em></strong> 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作</li>\n<li><strong><em>桥接（Bridge）模式：</em></strong> 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度</li>\n<li><strong><em>组合（Composite）模式：</em></strong> 将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性</li>\n<li><strong><em>装饰器（Decorator）模式：</em></strong> 动态的给对象增加一些职责，即增加其额外的功能</li>\n<li><strong><em>外观（Facade）模式：</em></strong> 为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问</li>\n<li><strong><em>享元模式（Flyweight）：</em></strong> 运用共享技术来有效地支持大量细粒度对象的复用</li>\n<li><strong><em>代理（Proxy）模式：</em></strong> 为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性</li>\n<li>==<strong><em>过滤器（Filter、Criteria）模式：</em></strong>==</li>\n</ul>\n<p><em>以上 7 种结构型模式，除了==适配器模式==分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式</em></p>\n<h4 id=\"三、行为型模式\"><a href=\"#三、行为型模式\" class=\"headerlink\" title=\"三、行为型模式\"></a>三、行为型模式</h4><p><em>这些设计模式特别关注对象之间的通信</em></p>\n<blockquote>\n<p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配</p>\n<p>==行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为==。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性</p>\n</blockquote>\n<ul>\n<li><strong><em>职责链（Chain of Responsibility）模式：</em></strong> 把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合</li>\n<li><strong><em>命令（Command）模式：</em></strong> 将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开</li>\n<li><strong><em>解释器（Interpreter）模式：</em></strong> 提供如何定义语言的文法，以及对语言句子的解释方法，即解释器</li>\n<li><strong><em>迭代器（Iterator）模式：</em></strong> 提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示</li>\n<li><strong><em>中介者（Mediator）模式：</em></strong> 定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解</li>\n<li><strong><em>备忘录（Memento）模式：</em></strong> 在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它</li>\n<li><strong><em>观察者（Observer）模式:</em></strong> 多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为</li>\n<li><strong><em>状态（State）模式：</em></strong> 允许一个对象在其内部状态发生改变时改变其行为能力</li>\n<li><strong><em>策略（Strategy）模式：</em></strong> 定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户</li>\n<li><strong><em>模板方法（TemplateMethod）模式：</em></strong> 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</li>\n<li><strong><em>访问者（Visitor）模式：</em></strong> 在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问</li>\n<li>==<strong><em>空对象（Null Object）模式：</em></strong>==</li>\n</ul>\n<p><em>以上 11 种行为型模式，除了==模板方法模式和解释器模式==是类行为型模式，其他的全部属于对象行为型模式</em></p>\n<h4 id=\"四、J2EE模式\"><a href=\"#四、J2EE模式\" class=\"headerlink\" title=\"四、J2EE模式\"></a>四、J2EE模式</h4><p><em>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的</em></p>\n<ul>\n<li><strong><em>MVC （MVC）模式：</em></strong></li>\n<li><strong><em>业务代表（Business Delegate）模式：</em></strong></li>\n<li><strong><em>组合实体（Composite Entity）模式：</em></strong></li>\n<li><strong><em>数据访问对象（Data Access Object）模式：</em></strong></li>\n<li><strong><em>前端控制器（Front Controller）模式：</em></strong></li>\n<li><strong><em>拦截过滤器（Intercepting Filter）模式：</em></strong></li>\n<li><strong><em>服务定位器（Service Locator）模式：</em></strong></li>\n<li><strong><em>传输对象（Transfer Object）模式：</em></strong><h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3></li>\n</ul>\n<p><strong><em>1、开闭原则（Open Close Principle）</em></strong></p>\n<blockquote>\n<p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n</blockquote>\n<p><strong><em>2、里氏代换原则（Liskov Substitution Principle）</em></strong></p>\n<blockquote>\n<p>里氏代换原则是面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n</blockquote>\n<p><strong><em>3、依赖倒转原则（Dependence Inversion Principle）</em></strong></p>\n<blockquote>\n<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n</blockquote>\n<p><strong><em>4、接口隔离原则（Interface Segregation Principle）</em></strong></p>\n<blockquote>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n</blockquote>\n<p><strong><em>5、迪米特法则，又称最少知道原则（Demeter Principle）</em></strong></p>\n<blockquote>\n<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n</blockquote>\n<p><strong><em>6、合成复用原则（Composite Reuse Principle）</em></strong></p>\n<blockquote>\n<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n</blockquote>\n<hr>\n<h3 id=\"设计模式原则详解↑↓\"><a href=\"#设计模式原则详解↑↓\" class=\"headerlink\" title=\"设计模式原则详解↑↓\"></a>设计模式原则详解↑↓</h3><h4 id=\"1-开闭原则\"><a href=\"#1-开闭原则\" class=\"headerlink\" title=\"1. 开闭原则\"></a>1. 开闭原则</h4><p><em>定义：软件实体应当对扩展开放，对修改关闭，这就是开闭原则的经典定义</em></p>\n<blockquote>\n<p>软件实体包括：</p>\n<ul>\n<li>项目中划分出的模块</li>\n<li>类与接口</li>\n<li>方法</li>\n</ul>\n</blockquote>\n<p>==<em>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求</em>==</p>\n<p><strong>1. 开闭原则的作用</strong></p>\n<p><em>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：</em></p>\n<blockquote>\n<p><strong>1. 对软件测试的影响</strong></p>\n<blockquote>\n<p>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行</p>\n</blockquote>\n<p><strong>2. 可提高代码的可复用性</strong></p>\n<blockquote>\n<p>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性</p>\n</blockquote>\n<p><strong>3. 可以提高软件的可维护性</strong></p>\n<blockquote>\n<p>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护</p>\n</blockquote>\n</blockquote>\n<p><strong>2. 开闭原则的实现方法</strong></p>\n<p><em>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中</em></p>\n<blockquote>\n<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>\n</blockquote>\n<h4 id=\"2-里氏替换原则\"><a href=\"#2-里氏替换原则\" class=\"headerlink\" title=\"2.里氏替换原则\"></a>2.里氏替换原则</h4><p><em>继承必须确保超类所拥有的性质在子类中仍然成立</em></p>\n<blockquote>\n<p>里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范</p>\n</blockquote>\n<p><strong>1. 里氏替换原则的作用</strong></p>\n<blockquote>\n<ul>\n<li>里氏替换原则是实现开闭原则的重要方式之一</li>\n<li>它克服了继承中重写父类造成的可复用性变差的缺点</li>\n<li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性</li>\n</ul>\n</blockquote>\n<p><strong>2. 里氏替换原则的实现方法</strong></p>\n<p><em>==里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。== 也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</em></p>\n<blockquote>\n<p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大</p>\n<p>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系</p>\n<p>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等</p>\n</blockquote>\n<p><strong>【例子】里氏替换原则在“几维鸟不是鸟”实例中的应用</strong></p>\n<blockquote>\n<p>分析：鸟一般都会飞行，如燕子的飞行速度大概是每小时 120 千米。但是新西兰的几维鸟由于翅膀退化无法飞行。假如要设计一个实例，计算这两种鸟飞行 300 千米要花费的时间。显然，拿燕子来测试这段代码，结果正确，能计算出所需要的时间；但拿几维鸟来测试，结果会发生“除零异常”或是“无穷大”，明显不符合预期，其类图如图所示<br><img src=\"https://note.youdao.com/yws/res/2171/WEBRESOURCEb0b7e4aa2855e4160fc5ec48e5bec699\" alt=\"i.jpg\"></p>\n</blockquote>\n<p><strong>程序代码如下：</strong></p>\n<pre><code>public class Client {\n    public static void main(String[] args) {\n        Bird swallow = new Swallow();\n        Bird brownKiwi = new BrownKiwi();\n        swallow.setSpeed(120);\n        brownKiwi.setSpeed(120);\n        System.out.println(&quot;如果飞行300公里：&quot;);\n        try {\n            System.out.println(&quot;燕子将飞行&quot; + swallow.getFlyTime(300) + &quot;小时.&quot;);\n            System.out.println(&quot;几维鸟将飞行&quot; + brownKiwi.getFlyTime(300) + &quot;小时。&quot;);\n        } catch (Exception err) {\n            System.out.println(&quot;发生错误了!&quot;);\n        }\n    }\n}\n\n//鸟类\nclass Bird {\n    double flySpeed;\n\n    public void setSpeed(double speed) {\n        flySpeed = speed;\n    }\n\n    public double getFlyTime(double distance) {\n        return (distance / flySpeed);\n    }\n}\n\n//燕子类\nclass Swallow extends Bird {\n}\n\n//几维鸟类\nclass BrownKiwi extends Bird {\n    public void setSpeed(double speed) {\n        flySpeed = 0;\n    }\n}</code></pre><p><strong>程序的运行结果如下：</strong></p>\n<pre><code>如果飞行300公里：\n燕子将飞行2.5小时.\n几维鸟将飞行Infinity小时。</code></pre><p>程序运行’错误’的原因是：几维鸟类重写了鸟类的 setSpeed(double speed) 方法，这违背了里氏替换原则。正确的做法是：取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，它们都有奔跑的能力。几维鸟的飞行速度虽然为0，但奔跑速度不为 0，可以计算出其奔跑 300 千米所要花费的时间<br><img src=\"https://note.youdao.com/yws/res/2187/WEBRESOURCEc6636816a2809bdedea10b99879e900e\" alt=\"j.jpg\"></p>\n<h4 id=\"3-依赖倒置原则\"><a href=\"#3-依赖倒置原则\" class=\"headerlink\" title=\"3.依赖倒置原则\"></a>3.依赖倒置原则</h4><p><em>依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：==要面向接口编程，不要面向实现编程==</em></p>\n<p><strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合</strong></p>\n<blockquote>\n<p>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类</p>\n<p>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成</p>\n</blockquote>\n<p><strong>1.依赖倒置原则的作用</strong></p>\n<blockquote>\n<ul>\n<li>依赖倒置原则可以降低类间的耦合性</li>\n<li>依赖倒置原则可以提高系统的稳定性</li>\n<li>依赖倒置原则可以减少并行开发引起的风险</li>\n<li>依赖倒置原则可以提高代码的可读性和可维护性</li>\n</ul>\n</blockquote>\n<p><strong>2.依赖倒置原则的实现方法</strong></p>\n<p>==依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性==，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。</p>\n<blockquote>\n<ol>\n<li>每个类尽量提供接口或抽象类，或者两者都具备。</li>\n<li>变量的声明类型尽量是接口或者是抽象类。</li>\n<li>任何类都不应该从具体类派生。</li>\n<li>使用继承时尽量遵循里氏替换原则</li>\n</ol>\n</blockquote>\n<p><strong>【例1】依赖倒置原则在“顾客购物程序”中的应用</strong><br><img src=\"https://note.youdao.com/yws/res/2214/WEBRESOURCE95ac53001ab5f0f2fc0212d6f7d47157\" alt=\"k.jpg\"><br><strong>程序代码如下：</strong></p>\n<pre><code>public class Client_shop {\n    public static void main(String[] args) {\n        Customer yu = new Customer();\n        System.out.println(&quot;顾客购买以下商品：&quot;);\n        yu.shopping(new ShaoGuanShop());\n        yu.shopping(new WuYuanShop());\n    }\n}\n\n//商店\ninterface Shop {\n    public String sell(); //卖\n}\n\n//韶关网店\nclass ShaoGuanShop implements Shop {\n    public String sell() {\n        return &quot;韶关土特产：香菇、木耳……&quot;;\n    }\n}\n\n//婺源网店\nclass WuYuanShop implements Shop {\n    public String sell() {\n        return &quot;婺源土特产：绿茶、酒糟鱼……&quot;;\n    }\n}\n\n//顾客\nclass Customer {\n    public void shopping(Shop shop) {\n        //购物\n        System.out.println(shop.sell());\n    }\n}</code></pre><p><strong>程序运行结果如下：</strong></p>\n<pre><code>顾客购买以下商品：\n韶关土特产：香菇、木耳……\n婺源土特产：绿茶、酒糟鱼……</code></pre><h4 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"==单一职责原则==\"></a>==单一职责原则==</h4><p><em>单一职责原则又称单一功能原则。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</em></p>\n<p><strong>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</strong></p>\n<blockquote>\n<ol>\n<li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力</li>\n<li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费</li>\n</ol>\n</blockquote>\n<p><strong>1. 单一职责原则的优点</strong></p>\n<p><em>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点</em></p>\n<blockquote>\n<ul>\n<li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多</li>\n<li>提高类的可读性。复杂性降低，自然其可读性会提高</li>\n<li>提高系统的可维护性。可读性提高，那自然更容易维护了</li>\n<li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响</li>\n</ul>\n</blockquote>\n<p><strong>2. 单一职责原则的实现方法</strong></p>\n<p><strong>【例子】大学学生工作管理程序</strong><br><img src=\"https://note.youdao.com/yws/res/2246/WEBRESOURCE9046e1cd669709587f9a653cb1dac1e0\" alt=\"l.jpg\"></p>\n<h4 id=\"4-接口隔离原则\"><a href=\"#4-接口隔离原则\" class=\"headerlink\" title=\"4.接口隔离原则\"></a>4.接口隔离原则</h4><p><em>接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法</em></p>\n<p><strong>1. 定义</strong></p>\n<blockquote>\n<ol>\n<li>客户端不应该被迫依赖于它不使用的方法；</li>\n<li>一个类对另一个类的依赖应该建立在最小的接口上↓↓</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>↑要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用</strong></p>\n</blockquote>\n<p><em>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</em></p>\n<blockquote>\n<ul>\n<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离</li>\n<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建</li>\n</ul>\n</blockquote>\n<p><strong>2. 接口隔离原则的优点</strong></p>\n<p><em>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：</em></p>\n<blockquote>\n<ol>\n<li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性</li>\n<li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性</li>\n<li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险</li>\n<li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义</li>\n<li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码</li>\n</ol>\n</blockquote>\n<p><strong>3. 接口隔离原则的实现方法</strong></p>\n<p><em>在具体应用接口隔离原则时，应该根据以下几个规则来衡量：</em></p>\n<blockquote>\n<ul>\n<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑</li>\n<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法</li>\n<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑</li>\n<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情</li>\n</ul>\n</blockquote>\n<p><strong>【例子】学生成绩管理程序</strong><br><img src=\"https://note.youdao.com/yws/res/2291/WEBRESOURCE9e46465b02babadf8e94e080ce81ac43\" alt=\"m.jpg\"><br><strong>程序代码如下：</strong></p>\n<pre><code>public class Client_score {\n    public static void main(String[] args) {\n        InputModule input =StuScoreList.getInputModule();\n        CountModule count =StuScoreList.getCountModule();\n        PrintModule print =StuScoreList.getPrintModule();\n        input.insert();\n        count.countTotalScore();\n        print.printStuInfo();\n        input.delete();\n    }\n}\n\n//输入模块接口\ninterface InputModule {\n    void insert();\n\n    void delete();\n\n    void modify();\n}\n\n//统计模块接口\ninterface CountModule {\n    void countTotalScore();\n\n    void countAverage();\n}\n\n//打印模块接口\ninterface PrintModule {\n    void printStuInfo();\n\n    void queryStuInfo();\n}\n\n//实现类\nclass StuScoreList implements InputModule, CountModule, PrintModule {\n    private StuScoreList() {\n    }\n\n    public static InputModule getInputModule() {\n        return new StuScoreList();\n    }\n\n    public static CountModule getCountModule() {\n        return new StuScoreList();\n    }\n\n    public static PrintModule getPrintModule() {\n        return new StuScoreList();\n    }\n\n    @Override\n    public void insert() {\n        System.out.println(&quot;输入模块的insert()方法被调用！&quot;);\n    }\n\n    @Override\n    public void delete() {\n        System.out.println(&quot;输入模块的delete()方法被调用！&quot;);\n    }\n\n    @Override\n    public void modify() {\n        System.out.println(&quot;输入模块的modify()方法被调用！&quot;);\n    }\n\n    @Override\n    public void countTotalScore() {\n        System.out.println(&quot;统计模块的countTotalScore()方法被调用！&quot;);\n    }\n\n    @Override\n    public void countAverage() {\n        System.out.println(&quot;统计模块的countAverage()方法被调用！&quot;);\n    }\n\n    @Override\n    public void printStuInfo() {\n        System.out.println(&quot;打印模块的printStuInfo()方法被调用！&quot;);\n    }\n\n    @Override\n    public void queryStuInfo() {\n        System.out.println(&quot;打印模块的queryStuInfo()方法被调用！&quot;);\n    }\n}</code></pre><p><strong>程序运行结果如下：</strong></p>\n<pre><code>输入模块的insert()方法被调用！\n统计模块的countTotalScore()方法被调用！\n打印模块的printStuInfo()方法被调用！\n输入模块的delete()方法被调用！</code></pre><h4 id=\"5-迪米特法则\"><a href=\"#5-迪米特法则\" class=\"headerlink\" title=\"5.迪米特法则\"></a>5.迪米特法则</h4><p><em>迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性</em></p>\n<blockquote>\n<p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法</p>\n</blockquote>\n<p><strong>1. 迪米特法则的优点</strong></p>\n<p><em>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点</em></p>\n<blockquote>\n<ol>\n<li>降低了类之间的耦合度，提高了模块的相对独立性。</li>\n<li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性</li>\n</ol>\n</blockquote>\n<p><em>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</em></p>\n<p><strong>2. 迪米特法则的实现方法</strong></p>\n<p><em>从迪米特法则的定义和特点可知，它强调以下两点：</em></p>\n<blockquote>\n<ol>\n<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>\n<li>从被依赖者的角度说，只暴露应该暴露的方法</li>\n</ol>\n</blockquote>\n<p><em>所以，在运用迪米特法则时要注意以下 6 点:</em></p>\n<blockquote>\n<ol>\n<li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li>\n<li>在类的结构设计上，尽量降低类成员的访问权限。</li>\n<li>在类的设计上，优先考虑将一个类设置成不变类。</li>\n<li>在对其他类的引用上，将引用其他对象的次数降到最低。</li>\n<li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</li>\n<li>谨慎使用序列化（Serializable）功能。</li>\n</ol>\n</blockquote>\n<p><strong>【例子】明星与经纪人的关系实例</strong></p>\n<p><em>分析：明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如与粉丝的见面会，与媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则，其类图如图所示：</em><br><img src=\"https://note.youdao.com/yws/res/2326/WEBRESOURCEce99ebf001f38b2cb8dafc7bcc135b9a\" alt=\"n.jpg\"><br><strong>程序代码如下：</strong></p>\n<pre><code>public class Client_star {\n    public static void main(String[] args) {\n        Agent agent = new Agent();\n        agent.setMyStar(new Star(&quot;YU&quot;));\n        agent.setMyFans(new Fans(&quot;YS&quot;));\n        agent.setMyCompany(new Company(&quot;ywy_company&quot;));\n        agent.meeting();\n        agent.business();\n    }\n}\n\n//经纪人\n@Setter\nclass Agent {\n    private Star myStar;\n    private Fans myFans;\n    private Company myCompany;\n\n    public void meeting() {\n        System.out.println(myFans.getName() + &quot;与明星&quot; + myStar.getName() + &quot;见面了。&quot;);\n    }\n\n    public void business() {\n        System.out.println(myCompany.getName() + &quot;与明星&quot; + myStar.getName() + &quot;洽淡业务。&quot;);\n    }\n}\n\n//明星\n@Getter\n@AllArgsConstructor\nclass Star {\n    private String name;\n}\n\n//粉丝\n@Getter\n@AllArgsConstructor\nclass Fans {\n    private String name;\n}\n\n//媒体公司\n@Getter\n@AllArgsConstructor\nclass Company {\n    private String name;\n}</code></pre><p><strong>程序运行结果如下：</strong></p>\n<pre><code>YS与明星YU见面了。\nywy_company与明星YU洽淡业务。</code></pre><h4 id=\"6-合成复用原则\"><a href=\"#6-合成复用原则\" class=\"headerlink\" title=\"6.合成复用原则\"></a>6.合成复用原则</h4><p><em>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</em></p>\n<p><em>==如果要使用继承关系，则必须严格遵循里氏替换原则==。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范</em></p>\n<p><strong>1.合成复用原则的重要性</strong></p>\n<p><em>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</em></p>\n<blockquote>\n<ol>\n<li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用</li>\n<li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护</li>\n<li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化</li>\n</ol>\n</blockquote>\n<p><em>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</em></p>\n<blockquote>\n<ol>\n<li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用</li>\n<li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口</li>\n<li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象</li>\n</ol>\n</blockquote>\n<p><strong>2.合成复用原则的实现方法</strong></p>\n<p><em>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用</em></p>\n<p><strong>【例子】汽车分类管理程序</strong></p>\n<p><em>继承关系实现汽车分类的类图：</em></p>\n<blockquote>\n<p>分析：汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多<br><img src=\"https://note.youdao.com/yws/res/2361/WEBRESOURCE8da802979a817c48eecca0c4322b8061\" alt=\"o.jpg\"></p>\n</blockquote>\n<p><em>组合关系实现汽车分类的类图：</em></p>\n<blockquote>\n<p>从上图可以看出用继承关系实现会产生很多子类，而且增加新的“动力源”或者增加新的“颜色”都要修改源代码，这违背了开闭原则，显然不可取<br><img src=\"https://note.youdao.com/yws/res/2366/WEBRESOURCE2c5dab2f41f12cf6f5d94effd3291c85\" alt=\"p.jpg\"></p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><em>上面一共介绍了 7 种设计原则，它们分别为==开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则以及合成复用原则==</em></p>\n<p><strong><em>这 7 种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。</em></strong></p>\n<blockquote>\n<ul>\n<li>其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；</li>\n<li>里氏替换原则告诉我们不要破坏继承体系；</li>\n<li>依赖倒置原则告诉我们要面向接口编程；</li>\n<li>单一职责原则告诉我们实现类要职责单一；</li>\n<li>接口隔离原则告诉我们在设计接口的时候要精简单一；</li>\n<li>迪米特法则告诉我们要降低耦合度；</li>\n<li>合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用</li>\n</ul>\n</blockquote>\n","site":{"data":{"musics":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h2 id=\"设计模式学习笔记（Java版）\"><a href=\"#设计模式学习笔记（Java版）\" class=\"headerlink\" title=\"设计模式学习笔记（Java版）\"></a>设计模式学习笔记（Java版）</h2><h3 id=\"ywy学习链接yuy\"><a href=\"#ywy学习链接yuy\" class=\"headerlink\" title=\"ywy学习链接yuy\"></a><a href=\"http://c.biancheng.net/view/1317.html\" target=\"_blank\" rel=\"noopener\">ywy学习链接yuy</a></h3><h3 id=\"设计模式的概念与意义\"><a href=\"#设计模式的概念与意义\" class=\"headerlink\" title=\"设计模式的概念与意义\"></a>设计模式的概念与意义</h3><p><strong>1.软件设计模式的概念</strong></p>\n<p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p>\n<p><strong>2. 学习设计模式的意义</strong></p>\n<p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。</p>\n<ul>\n<li>可以提高程序员的思维能力、编程能力和设计能力</li>\n<li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期</li>\n<li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强</li>\n</ul>\n<p><em>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</em></p>\n<h3 id=\"软件设计模式的基本要素\"><a href=\"#软件设计模式的基本要素\" class=\"headerlink\" title=\"软件设计模式的基本要素\"></a>软件设计模式的基本要素</h3><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p>\n<ol>\n<li>模式名称<blockquote>\n<p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。==<strong>模式名称</strong>==（<strong>PatternName</strong>）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p>\n</blockquote>\n</li>\n<li>问题<blockquote>\n<p>==<strong>问题</strong>==（<strong>Problem</strong>）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p>\n</blockquote>\n</li>\n<li>解决方案<blockquote>\n<p>模式问题的 ==<strong>解决方案</strong>==（<strong>Solution</strong>）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p>\n</blockquote>\n</li>\n<li>效果<blockquote>\n<p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些 ==<strong>效果</strong>==（<strong>Consequence</strong>）对理解和评价这些模式有很大的帮助。</p>\n</blockquote>\n<h3 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h3>总共23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。以及另一类设计模式：J2EE 设计模式。<h4 id=\"一、创建型模式\"><a href=\"#一、创建型模式\" class=\"headerlink\" title=\"一、创建型模式\"></a>一、创建型模式</h4></li>\n</ol>\n<p><em>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</em></p>\n<blockquote>\n<p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产</p>\n</blockquote>\n<ul>\n<li><strong><em>工厂（Factory）模式：</em></strong> 定义一个用于创建产品的接口，由子类决定生产什么产品</li>\n<li><strong><em>抽象工厂（Abstract Factory）模式：</em></strong> 提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品</li>\n<li><strong><em>单例（Singleton）模式：</em></strong> 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式</li>\n<li><strong><em>建造者（Builder）模式：</em></strong> 将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象</li>\n<li><strong><em>原型（Prototype）模式：</em></strong> 将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例</li>\n</ul>\n<p><em>以上 5 种创建型模式，除了==工厂方法模式==属于类创建型模式，其他的全部属于对象创建型模式</em></p>\n<h4 id=\"二、结构型模式\"><a href=\"#二、结构型模式\" class=\"headerlink\" title=\"二、结构型模式\"></a>二、结构型模式</h4><p><em>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</em></p>\n<blockquote>\n<p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象</p>\n</blockquote>\n<ul>\n<li><strong><em>适配器（Adapter）模式：</em></strong> 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作</li>\n<li><strong><em>桥接（Bridge）模式：</em></strong> 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度</li>\n<li><strong><em>组合（Composite）模式：</em></strong> 将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性</li>\n<li><strong><em>装饰器（Decorator）模式：</em></strong> 动态的给对象增加一些职责，即增加其额外的功能</li>\n<li><strong><em>外观（Facade）模式：</em></strong> 为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问</li>\n<li><strong><em>享元模式（Flyweight）：</em></strong> 运用共享技术来有效地支持大量细粒度对象的复用</li>\n<li><strong><em>代理（Proxy）模式：</em></strong> 为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性</li>\n<li>==<strong><em>过滤器（Filter、Criteria）模式：</em></strong>==</li>\n</ul>\n<p><em>以上 7 种结构型模式，除了==适配器模式==分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式</em></p>\n<h4 id=\"三、行为型模式\"><a href=\"#三、行为型模式\" class=\"headerlink\" title=\"三、行为型模式\"></a>三、行为型模式</h4><p><em>这些设计模式特别关注对象之间的通信</em></p>\n<blockquote>\n<p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配</p>\n<p>==行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为==。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性</p>\n</blockquote>\n<ul>\n<li><strong><em>职责链（Chain of Responsibility）模式：</em></strong> 把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合</li>\n<li><strong><em>命令（Command）模式：</em></strong> 将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开</li>\n<li><strong><em>解释器（Interpreter）模式：</em></strong> 提供如何定义语言的文法，以及对语言句子的解释方法，即解释器</li>\n<li><strong><em>迭代器（Iterator）模式：</em></strong> 提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示</li>\n<li><strong><em>中介者（Mediator）模式：</em></strong> 定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解</li>\n<li><strong><em>备忘录（Memento）模式：</em></strong> 在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它</li>\n<li><strong><em>观察者（Observer）模式:</em></strong> 多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为</li>\n<li><strong><em>状态（State）模式：</em></strong> 允许一个对象在其内部状态发生改变时改变其行为能力</li>\n<li><strong><em>策略（Strategy）模式：</em></strong> 定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户</li>\n<li><strong><em>模板方法（TemplateMethod）模式：</em></strong> 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</li>\n<li><strong><em>访问者（Visitor）模式：</em></strong> 在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问</li>\n<li>==<strong><em>空对象（Null Object）模式：</em></strong>==</li>\n</ul>\n<p><em>以上 11 种行为型模式，除了==模板方法模式和解释器模式==是类行为型模式，其他的全部属于对象行为型模式</em></p>\n<h4 id=\"四、J2EE模式\"><a href=\"#四、J2EE模式\" class=\"headerlink\" title=\"四、J2EE模式\"></a>四、J2EE模式</h4><p><em>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的</em></p>\n<ul>\n<li><strong><em>MVC （MVC）模式：</em></strong></li>\n<li><strong><em>业务代表（Business Delegate）模式：</em></strong></li>\n<li><strong><em>组合实体（Composite Entity）模式：</em></strong></li>\n<li><strong><em>数据访问对象（Data Access Object）模式：</em></strong></li>\n<li><strong><em>前端控制器（Front Controller）模式：</em></strong></li>\n<li><strong><em>拦截过滤器（Intercepting Filter）模式：</em></strong></li>\n<li><strong><em>服务定位器（Service Locator）模式：</em></strong></li>\n<li><strong><em>传输对象（Transfer Object）模式：</em></strong><h3 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h3></li>\n</ul>\n<p><strong><em>1、开闭原则（Open Close Principle）</em></strong></p>\n<blockquote>\n<p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n</blockquote>\n<p><strong><em>2、里氏代换原则（Liskov Substitution Principle）</em></strong></p>\n<blockquote>\n<p>里氏代换原则是面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n</blockquote>\n<p><strong><em>3、依赖倒转原则（Dependence Inversion Principle）</em></strong></p>\n<blockquote>\n<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n</blockquote>\n<p><strong><em>4、接口隔离原则（Interface Segregation Principle）</em></strong></p>\n<blockquote>\n<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n</blockquote>\n<p><strong><em>5、迪米特法则，又称最少知道原则（Demeter Principle）</em></strong></p>\n<blockquote>\n<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n</blockquote>\n<p><strong><em>6、合成复用原则（Composite Reuse Principle）</em></strong></p>\n<blockquote>\n<p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n</blockquote>\n<hr>\n<h3 id=\"设计模式原则详解↑↓\"><a href=\"#设计模式原则详解↑↓\" class=\"headerlink\" title=\"设计模式原则详解↑↓\"></a>设计模式原则详解↑↓</h3><h4 id=\"1-开闭原则\"><a href=\"#1-开闭原则\" class=\"headerlink\" title=\"1. 开闭原则\"></a>1. 开闭原则</h4><p><em>定义：软件实体应当对扩展开放，对修改关闭，这就是开闭原则的经典定义</em></p>\n<blockquote>\n<p>软件实体包括：</p>\n<ul>\n<li>项目中划分出的模块</li>\n<li>类与接口</li>\n<li>方法</li>\n</ul>\n</blockquote>\n<p>==<em>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求</em>==</p>\n<p><strong>1. 开闭原则的作用</strong></p>\n<p><em>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：</em></p>\n<blockquote>\n<p><strong>1. 对软件测试的影响</strong></p>\n<blockquote>\n<p>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行</p>\n</blockquote>\n<p><strong>2. 可提高代码的可复用性</strong></p>\n<blockquote>\n<p>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性</p>\n</blockquote>\n<p><strong>3. 可以提高软件的可维护性</strong></p>\n<blockquote>\n<p>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护</p>\n</blockquote>\n</blockquote>\n<p><strong>2. 开闭原则的实现方法</strong></p>\n<p><em>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中</em></p>\n<blockquote>\n<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>\n</blockquote>\n<h4 id=\"2-里氏替换原则\"><a href=\"#2-里氏替换原则\" class=\"headerlink\" title=\"2.里氏替换原则\"></a>2.里氏替换原则</h4><p><em>继承必须确保超类所拥有的性质在子类中仍然成立</em></p>\n<blockquote>\n<p>里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范</p>\n</blockquote>\n<p><strong>1. 里氏替换原则的作用</strong></p>\n<blockquote>\n<ul>\n<li>里氏替换原则是实现开闭原则的重要方式之一</li>\n<li>它克服了继承中重写父类造成的可复用性变差的缺点</li>\n<li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性</li>\n</ul>\n</blockquote>\n<p><strong>2. 里氏替换原则的实现方法</strong></p>\n<p><em>==里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。== 也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</em></p>\n<blockquote>\n<p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大</p>\n<p>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系</p>\n<p>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等</p>\n</blockquote>\n<p><strong>【例子】里氏替换原则在“几维鸟不是鸟”实例中的应用</strong></p>\n<blockquote>\n<p>分析：鸟一般都会飞行，如燕子的飞行速度大概是每小时 120 千米。但是新西兰的几维鸟由于翅膀退化无法飞行。假如要设计一个实例，计算这两种鸟飞行 300 千米要花费的时间。显然，拿燕子来测试这段代码，结果正确，能计算出所需要的时间；但拿几维鸟来测试，结果会发生“除零异常”或是“无穷大”，明显不符合预期，其类图如图所示<br><img src=\"https://note.youdao.com/yws/res/2171/WEBRESOURCEb0b7e4aa2855e4160fc5ec48e5bec699\" alt=\"i.jpg\"></p>\n</blockquote>\n<p><strong>程序代码如下：</strong></p>\n<pre><code>public class Client {\n    public static void main(String[] args) {\n        Bird swallow = new Swallow();\n        Bird brownKiwi = new BrownKiwi();\n        swallow.setSpeed(120);\n        brownKiwi.setSpeed(120);\n        System.out.println(&quot;如果飞行300公里：&quot;);\n        try {\n            System.out.println(&quot;燕子将飞行&quot; + swallow.getFlyTime(300) + &quot;小时.&quot;);\n            System.out.println(&quot;几维鸟将飞行&quot; + brownKiwi.getFlyTime(300) + &quot;小时。&quot;);\n        } catch (Exception err) {\n            System.out.println(&quot;发生错误了!&quot;);\n        }\n    }\n}\n\n//鸟类\nclass Bird {\n    double flySpeed;\n\n    public void setSpeed(double speed) {\n        flySpeed = speed;\n    }\n\n    public double getFlyTime(double distance) {\n        return (distance / flySpeed);\n    }\n}\n\n//燕子类\nclass Swallow extends Bird {\n}\n\n//几维鸟类\nclass BrownKiwi extends Bird {\n    public void setSpeed(double speed) {\n        flySpeed = 0;\n    }\n}</code></pre><p><strong>程序的运行结果如下：</strong></p>\n<pre><code>如果飞行300公里：\n燕子将飞行2.5小时.\n几维鸟将飞行Infinity小时。</code></pre><p>程序运行’错误’的原因是：几维鸟类重写了鸟类的 setSpeed(double speed) 方法，这违背了里氏替换原则。正确的做法是：取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，它们都有奔跑的能力。几维鸟的飞行速度虽然为0，但奔跑速度不为 0，可以计算出其奔跑 300 千米所要花费的时间<br><img src=\"https://note.youdao.com/yws/res/2187/WEBRESOURCEc6636816a2809bdedea10b99879e900e\" alt=\"j.jpg\"></p>\n<h4 id=\"3-依赖倒置原则\"><a href=\"#3-依赖倒置原则\" class=\"headerlink\" title=\"3.依赖倒置原则\"></a>3.依赖倒置原则</h4><p><em>依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：==要面向接口编程，不要面向实现编程==</em></p>\n<p><strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合</strong></p>\n<blockquote>\n<p>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类</p>\n<p>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成</p>\n</blockquote>\n<p><strong>1.依赖倒置原则的作用</strong></p>\n<blockquote>\n<ul>\n<li>依赖倒置原则可以降低类间的耦合性</li>\n<li>依赖倒置原则可以提高系统的稳定性</li>\n<li>依赖倒置原则可以减少并行开发引起的风险</li>\n<li>依赖倒置原则可以提高代码的可读性和可维护性</li>\n</ul>\n</blockquote>\n<p><strong>2.依赖倒置原则的实现方法</strong></p>\n<p>==依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性==，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。</p>\n<blockquote>\n<ol>\n<li>每个类尽量提供接口或抽象类，或者两者都具备。</li>\n<li>变量的声明类型尽量是接口或者是抽象类。</li>\n<li>任何类都不应该从具体类派生。</li>\n<li>使用继承时尽量遵循里氏替换原则</li>\n</ol>\n</blockquote>\n<p><strong>【例1】依赖倒置原则在“顾客购物程序”中的应用</strong><br><img src=\"https://note.youdao.com/yws/res/2214/WEBRESOURCE95ac53001ab5f0f2fc0212d6f7d47157\" alt=\"k.jpg\"><br><strong>程序代码如下：</strong></p>\n<pre><code>public class Client_shop {\n    public static void main(String[] args) {\n        Customer yu = new Customer();\n        System.out.println(&quot;顾客购买以下商品：&quot;);\n        yu.shopping(new ShaoGuanShop());\n        yu.shopping(new WuYuanShop());\n    }\n}\n\n//商店\ninterface Shop {\n    public String sell(); //卖\n}\n\n//韶关网店\nclass ShaoGuanShop implements Shop {\n    public String sell() {\n        return &quot;韶关土特产：香菇、木耳……&quot;;\n    }\n}\n\n//婺源网店\nclass WuYuanShop implements Shop {\n    public String sell() {\n        return &quot;婺源土特产：绿茶、酒糟鱼……&quot;;\n    }\n}\n\n//顾客\nclass Customer {\n    public void shopping(Shop shop) {\n        //购物\n        System.out.println(shop.sell());\n    }\n}</code></pre><p><strong>程序运行结果如下：</strong></p>\n<pre><code>顾客购买以下商品：\n韶关土特产：香菇、木耳……\n婺源土特产：绿茶、酒糟鱼……</code></pre><h4 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"==单一职责原则==\"></a>==单一职责原则==</h4><p><em>单一职责原则又称单一功能原则。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</em></p>\n<p><strong>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</strong></p>\n<blockquote>\n<ol>\n<li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力</li>\n<li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费</li>\n</ol>\n</blockquote>\n<p><strong>1. 单一职责原则的优点</strong></p>\n<p><em>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点</em></p>\n<blockquote>\n<ul>\n<li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多</li>\n<li>提高类的可读性。复杂性降低，自然其可读性会提高</li>\n<li>提高系统的可维护性。可读性提高，那自然更容易维护了</li>\n<li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响</li>\n</ul>\n</blockquote>\n<p><strong>2. 单一职责原则的实现方法</strong></p>\n<p><strong>【例子】大学学生工作管理程序</strong><br><img src=\"https://note.youdao.com/yws/res/2246/WEBRESOURCE9046e1cd669709587f9a653cb1dac1e0\" alt=\"l.jpg\"></p>\n<h4 id=\"4-接口隔离原则\"><a href=\"#4-接口隔离原则\" class=\"headerlink\" title=\"4.接口隔离原则\"></a>4.接口隔离原则</h4><p><em>接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法</em></p>\n<p><strong>1. 定义</strong></p>\n<blockquote>\n<ol>\n<li>客户端不应该被迫依赖于它不使用的方法；</li>\n<li>一个类对另一个类的依赖应该建立在最小的接口上↓↓</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><strong>↑要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用</strong></p>\n</blockquote>\n<p><em>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</em></p>\n<blockquote>\n<ul>\n<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离</li>\n<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建</li>\n</ul>\n</blockquote>\n<p><strong>2. 接口隔离原则的优点</strong></p>\n<p><em>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：</em></p>\n<blockquote>\n<ol>\n<li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性</li>\n<li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性</li>\n<li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险</li>\n<li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义</li>\n<li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码</li>\n</ol>\n</blockquote>\n<p><strong>3. 接口隔离原则的实现方法</strong></p>\n<p><em>在具体应用接口隔离原则时，应该根据以下几个规则来衡量：</em></p>\n<blockquote>\n<ul>\n<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑</li>\n<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法</li>\n<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑</li>\n<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情</li>\n</ul>\n</blockquote>\n<p><strong>【例子】学生成绩管理程序</strong><br><img src=\"https://note.youdao.com/yws/res/2291/WEBRESOURCE9e46465b02babadf8e94e080ce81ac43\" alt=\"m.jpg\"><br><strong>程序代码如下：</strong></p>\n<pre><code>public class Client_score {\n    public static void main(String[] args) {\n        InputModule input =StuScoreList.getInputModule();\n        CountModule count =StuScoreList.getCountModule();\n        PrintModule print =StuScoreList.getPrintModule();\n        input.insert();\n        count.countTotalScore();\n        print.printStuInfo();\n        input.delete();\n    }\n}\n\n//输入模块接口\ninterface InputModule {\n    void insert();\n\n    void delete();\n\n    void modify();\n}\n\n//统计模块接口\ninterface CountModule {\n    void countTotalScore();\n\n    void countAverage();\n}\n\n//打印模块接口\ninterface PrintModule {\n    void printStuInfo();\n\n    void queryStuInfo();\n}\n\n//实现类\nclass StuScoreList implements InputModule, CountModule, PrintModule {\n    private StuScoreList() {\n    }\n\n    public static InputModule getInputModule() {\n        return new StuScoreList();\n    }\n\n    public static CountModule getCountModule() {\n        return new StuScoreList();\n    }\n\n    public static PrintModule getPrintModule() {\n        return new StuScoreList();\n    }\n\n    @Override\n    public void insert() {\n        System.out.println(&quot;输入模块的insert()方法被调用！&quot;);\n    }\n\n    @Override\n    public void delete() {\n        System.out.println(&quot;输入模块的delete()方法被调用！&quot;);\n    }\n\n    @Override\n    public void modify() {\n        System.out.println(&quot;输入模块的modify()方法被调用！&quot;);\n    }\n\n    @Override\n    public void countTotalScore() {\n        System.out.println(&quot;统计模块的countTotalScore()方法被调用！&quot;);\n    }\n\n    @Override\n    public void countAverage() {\n        System.out.println(&quot;统计模块的countAverage()方法被调用！&quot;);\n    }\n\n    @Override\n    public void printStuInfo() {\n        System.out.println(&quot;打印模块的printStuInfo()方法被调用！&quot;);\n    }\n\n    @Override\n    public void queryStuInfo() {\n        System.out.println(&quot;打印模块的queryStuInfo()方法被调用！&quot;);\n    }\n}</code></pre><p><strong>程序运行结果如下：</strong></p>\n<pre><code>输入模块的insert()方法被调用！\n统计模块的countTotalScore()方法被调用！\n打印模块的printStuInfo()方法被调用！\n输入模块的delete()方法被调用！</code></pre><h4 id=\"5-迪米特法则\"><a href=\"#5-迪米特法则\" class=\"headerlink\" title=\"5.迪米特法则\"></a>5.迪米特法则</h4><p><em>迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性</em></p>\n<blockquote>\n<p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法</p>\n</blockquote>\n<p><strong>1. 迪米特法则的优点</strong></p>\n<p><em>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点</em></p>\n<blockquote>\n<ol>\n<li>降低了类之间的耦合度，提高了模块的相对独立性。</li>\n<li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性</li>\n</ol>\n</blockquote>\n<p><em>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</em></p>\n<p><strong>2. 迪米特法则的实现方法</strong></p>\n<p><em>从迪米特法则的定义和特点可知，它强调以下两点：</em></p>\n<blockquote>\n<ol>\n<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>\n<li>从被依赖者的角度说，只暴露应该暴露的方法</li>\n</ol>\n</blockquote>\n<p><em>所以，在运用迪米特法则时要注意以下 6 点:</em></p>\n<blockquote>\n<ol>\n<li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li>\n<li>在类的结构设计上，尽量降低类成员的访问权限。</li>\n<li>在类的设计上，优先考虑将一个类设置成不变类。</li>\n<li>在对其他类的引用上，将引用其他对象的次数降到最低。</li>\n<li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</li>\n<li>谨慎使用序列化（Serializable）功能。</li>\n</ol>\n</blockquote>\n<p><strong>【例子】明星与经纪人的关系实例</strong></p>\n<p><em>分析：明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如与粉丝的见面会，与媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则，其类图如图所示：</em><br><img src=\"https://note.youdao.com/yws/res/2326/WEBRESOURCEce99ebf001f38b2cb8dafc7bcc135b9a\" alt=\"n.jpg\"><br><strong>程序代码如下：</strong></p>\n<pre><code>public class Client_star {\n    public static void main(String[] args) {\n        Agent agent = new Agent();\n        agent.setMyStar(new Star(&quot;YU&quot;));\n        agent.setMyFans(new Fans(&quot;YS&quot;));\n        agent.setMyCompany(new Company(&quot;ywy_company&quot;));\n        agent.meeting();\n        agent.business();\n    }\n}\n\n//经纪人\n@Setter\nclass Agent {\n    private Star myStar;\n    private Fans myFans;\n    private Company myCompany;\n\n    public void meeting() {\n        System.out.println(myFans.getName() + &quot;与明星&quot; + myStar.getName() + &quot;见面了。&quot;);\n    }\n\n    public void business() {\n        System.out.println(myCompany.getName() + &quot;与明星&quot; + myStar.getName() + &quot;洽淡业务。&quot;);\n    }\n}\n\n//明星\n@Getter\n@AllArgsConstructor\nclass Star {\n    private String name;\n}\n\n//粉丝\n@Getter\n@AllArgsConstructor\nclass Fans {\n    private String name;\n}\n\n//媒体公司\n@Getter\n@AllArgsConstructor\nclass Company {\n    private String name;\n}</code></pre><p><strong>程序运行结果如下：</strong></p>\n<pre><code>YS与明星YU见面了。\nywy_company与明星YU洽淡业务。</code></pre><h4 id=\"6-合成复用原则\"><a href=\"#6-合成复用原则\" class=\"headerlink\" title=\"6.合成复用原则\"></a>6.合成复用原则</h4><p><em>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</em></p>\n<p><em>==如果要使用继承关系，则必须严格遵循里氏替换原则==。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范</em></p>\n<p><strong>1.合成复用原则的重要性</strong></p>\n<p><em>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</em></p>\n<blockquote>\n<ol>\n<li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用</li>\n<li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护</li>\n<li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化</li>\n</ol>\n</blockquote>\n<p><em>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</em></p>\n<blockquote>\n<ol>\n<li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用</li>\n<li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口</li>\n<li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象</li>\n</ol>\n</blockquote>\n<p><strong>2.合成复用原则的实现方法</strong></p>\n<p><em>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用</em></p>\n<p><strong>【例子】汽车分类管理程序</strong></p>\n<p><em>继承关系实现汽车分类的类图：</em></p>\n<blockquote>\n<p>分析：汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多<br><img src=\"https://note.youdao.com/yws/res/2361/WEBRESOURCE8da802979a817c48eecca0c4322b8061\" alt=\"o.jpg\"></p>\n</blockquote>\n<p><em>组合关系实现汽车分类的类图：</em></p>\n<blockquote>\n<p>从上图可以看出用继承关系实现会产生很多子类，而且增加新的“动力源”或者增加新的“颜色”都要修改源代码，这违背了开闭原则，显然不可取<br><img src=\"https://note.youdao.com/yws/res/2366/WEBRESOURCE2c5dab2f41f12cf6f5d94effd3291c85\" alt=\"p.jpg\"></p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><em>上面一共介绍了 7 种设计原则，它们分别为==开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则以及合成复用原则==</em></p>\n<p><strong><em>这 7 种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。</em></strong></p>\n<blockquote>\n<ul>\n<li>其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；</li>\n<li>里氏替换原则告诉我们不要破坏继承体系；</li>\n<li>依赖倒置原则告诉我们要面向接口编程；</li>\n<li>单一职责原则告诉我们实现类要职责单一；</li>\n<li>接口隔离原则告诉我们在设计接口的时候要精简单一；</li>\n<li>迪米特法则告诉我们要降低耦合度；</li>\n<li>合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用</li>\n</ul>\n</blockquote>\n"},{"title":"My First Blog","date":"2019-10-19T04:12:12.000Z","top":false,"cover":false,"password":null,"toc":true,"mathjax":false,"summary":"My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!","_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=566261001&auto=1&height=66\"></iframe></div>\n\n#### First root\n**First of me**","source":"_posts/2017-conclusion/2017-conclusion.md","raw":"---\ntitle: My First Blog\ndate: 2019-10-19 12:12:12\ntop: false\ncover: false\npassword:\ntoc: true\nmathjax: false\nsummary: My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!My First Blog!\ntags:\n- init\ncategories:\n- init\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=566261001&auto=1&height=66\"></iframe></div>\n\n#### First root\n**First of me**","slug":"2017-conclusion/2017-conclusion","published":1,"updated":"2019-10-19T11:24:32.372Z","_id":"ck1xbts21000004ud5c5fnj84","comments":1,"layout":"post","photos":[],"link":"","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=566261001&auto=1&height=66\"></iframe></div>\n\n<h4 id=\"First-root\"><a href=\"#First-root\" class=\"headerlink\" title=\"First root\"></a>First root</h4><p><strong>First of me</strong></p>\n","site":{"data":{"musics":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=566261001&auto=1&height=66\"></iframe></div>\n\n<h4 id=\"First-root\"><a href=\"#First-root\" class=\"headerlink\" title=\"First root\"></a>First root</h4><p><strong>First of me</strong></p>\n"},{"title":"设计模式-工厂模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-19T11:25:22.000Z","password":null,"summary":"工厂模式（Factory Pattern）是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象","_content":"\n## 设计模式之工厂模式&工厂方法模式&抽象工厂模式\n*工厂模式（Factory Pattern）是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象*\n#### 介绍\n> **定义：** 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行\n>\n> **分类：**\n>>1. *简单工厂（Simple Factory）模式*，又称静态工厂方法模式\n>>2. *工厂方法（Factory Method）模式*，又称多态性工厂模式或虚拟构造子模式\n>>3. *抽象工厂（Abstract Factory）模式*，又称工具箱模式\n>\n> **主要功能：** 主要功能是帮助我们把对象的实例化部分抽取了出来，目的是降低系统中代码耦合度，并且增强了系统的扩展性\n>\n> **在开源框架中的使用：**\n>> 1. Spring中通过getBean(\"xxx\") 获取Bean\n>> 2. Java消息服务JMS中（这以消息队列ActiveMQ为例）\n```\n    // 1、创建一个连接工厂对象，需要指定服务的ip及端口。\n    ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"tcp://192.168.xx.xx:xxxxx\");\n    // 2、使用工厂对象创建一个Connection对象。\n    Connection connection = connectionFactory.createConnection();\n```\n> **为什么要使用工厂模式：**\n>> 1. **解耦：** 把对象的创建和使用的过程分开\n>> 2. **降低代码重复：** 如果创建对象的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码\n>> 3. **降低维护成本：** 由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建某个对象的地方去逐个修正，只需要在工厂里修改即可，降低维护成本\n***\n#### 一、简单工厂模式\n*严格的说，简单工厂模式并不是23种常用的设计模式之一，它只算工厂模式的一个特殊实现。简单工厂模式在实际中的应用相对于其他两个工厂模式用的还是相对少得多，因为它只适应很多简单的情况*\n\n*最重要的是它违背了我们在概述中说的 **==开放-封闭原则==**（可以通过反射的机制来避免）。因为每次你要新添加一个功能，都需要在生switch-case语句（或者if-else语句）中去修改代码，添加分支条件*\n\n**适用场景：**\n- 创建的对象较少\n- 客户端不关心对象的创建过程\n\n**简单工厂模式角色分配：**\n1. **工厂(Factory)角色：** 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以直接被外部调用，创建所需的产品对象\n2. **抽象产品(Product)角色：** 简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口\n3. **具体产品(Concrete Product)角色：** 简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例\n\n**简单工厂模式结构图**\n\n![s.jpg](https://note.youdao.com/yws/res/3018/WEBRESOURCE023b70852baff37122039478cf473c41)\n\n**简单工厂实例：**\n\n*创建一个可以绘制不同形状的绘图工具，可以绘制圆形、长方形、正方形等，每个图形都会有一个draw()方法用于绘图*\n1. 创建Shape接口\n```\npublic interface Shape {\n    void draw();\n}\n```\n2. 创建实现改接口的具体实现类\n```\n/**\n * 圆形\n */\npublic class Circle implements Shape {\n    public Circle() {\n        System.out.println(\"Circle：圆形\");\n    }\n    @Override\n    public void draw() {\n        System.out.println(\"Draw Circle\");\n    }\n}\n/**\n * 长方形\n */\npublic class Rectangle implements Shape {\n    public Rectangle() {\n        System.out.println(\"Rectangle：长方形\");\n    }\n    @Override\n    public void draw() {\n        System.out.println(\"Draw Rectangle\");\n    }\n}\n/**\n * 正方形\n */\n public class Square implements Shape {\n    public Square() {\n        System.out.println(\"Square：正方形\");\n    }\n    @Override\n    public void draw() {\n        System.out.println(\"Draw Square\");\n    }\n}\n```\n3. 创建工厂类\n```\npublic class ShapeFactory {\n    //使用getShape()方法获取形状类型的对象\n    public static Shape getShape(String shapeType) {\n        if (shapeType == null) {\n            return null;\n        }\n        if (shapeType.equalsIgnoreCase(\"CIRCLE\")) {\n            return new Circle();\n        } else if (shapeType.equalsIgnoreCase(\"RECTANGLE\")) {\n            return new Rectangle();\n        } else if (shapeType.equalsIgnoreCase(\"SQUARE\")) {\n            return new Square();\n        }\n        return null;\n    }\n}\n```\n4. 测试类\n```\npublic class Client {\n    public static void main(String[] args) {\n        //获取Circle的对象，并调用它的draw()方法\n        Shape circle = ShapeFactory.getShape(\"CIRCLE\");\n        circle.draw();\n\n        //获取Rectangle的对象，并调用它的draw()方法\n        Shape rectangle = ShapeFactory.getShape(\"Rectangle\");\n        rectangle.draw();\n\n        //获取Square的对象，并调用它的draw()方法\n        Shape square = ShapeFactory.getShape(\"square\");\n        square.draw();\n    }\n}\n```\n**运行结果**\n```\nCircle：圆形\nDraw Circle\nRectangle：长方形\nDraw Rectangle\nSquare：正方形\nDraw Square\n```\n*这样的实现有个问题，如果新增新的形状类型的话，就需要修改工厂类中的getShape()方法，这明显不符合 **开放-封闭原则***\n#### 一-一使用反射机制改造简单工厂\n**将工厂类改造为：**\n```\n/**\n * 利用反射解决简单工厂每次增加新的产品类型都需要修改工厂中的方法的弊端\n */\npublic class ShapeFactory_1 {\n    //方式一：使用泛型省略类型强制转换，支持多态↑↓\n    public static <T> T getClass(Class<? extends T> clazz) {\n        T obj = null;\n        try {\n            obj = (T) Class.forName(clazz.getName()).newInstance();\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n    //方式二：调用时需要进行强制转换↑↓\n    public static Object getClass_1(Class<? extends Shape> clazz) {\n        Object obj = null;\n        try {\n            obj = Class.forName(clazz.getName()).newInstance();\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n}\n```\n**测试类**\n```\npublic class Client_1 {\n    public static void main(String[] args) {\n        Circle circle = ShapeFactory_1.getClass(Circle.class);\n        circle.draw();\n        Rectangle rectangle = ShapeFactory_1.getClass(Rectangle.class);\n        rectangle.draw();\n        //方式二：\n        Square square = (Square) ShapeFactory_1.getClass_1(Square.class);\n        square.draw();\n    }\n}\n```\n*使用反射的方式让程序符合了 **开放-封闭原则**，但是每一次传入的都是产品类的全部路径，还可以通过 **反射+配置文件**的方式改善*\n***\n#### 二、工厂方法模式\n*工厂方法模式是简单工厂的进一步深化，在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。也就是说 **每个对象都有一个与之对应的工厂**，是工厂模式家族中用得最多的模式*\n\n**适用场景：**\n- 一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体的工厂类创建；客户端需要知道创建具体产品的工厂类\n- 一个类通过其子类来指定创建那个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏原则\n- 将创建对象的任务委托给多个多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中\n>>1. 客户只知道创建产品的工厂名，而不知道具体的产品名。如TCL电视工厂、海信电视工厂等\n>>2. 创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口\n>>3. 客户不关心创建产品的细节，只关心产品的品牌。\n\n**工厂方法模式角色分配：**\n1. ***抽象工厂(Abstract Factory)角色：*** 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂必须实现这个接口\n2. ***具体工厂(Concrete Factory)角色：*** 这是实现抽象接口的具体工厂类，包含于应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象\n3. ***抽象产品(Abstract Product)角色：*** 工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口\n4. ***具体产品(Concrete Product)角色：*** 这个角色实现了抽象产品角色所定义的接口。某具体产品由专门的具体工厂创建，它们之间往往一一对应\n\n**工厂方法模式结构图**\n\n![q.jpg](https://note.youdao.com/yws/res/2996/WEBRESOURCEfc91804b48dd0d9481ea30a44b3f09e7)\n\n**工厂方法模式实例：**\n\n*上面简单工厂例子中的图形接口以及相关图像实现类不变。我们只需要增加一个工厂接口以及实现这个接口的工厂类即可*\n1. 增加一个工厂接口\n```\npublic interface Factory {\n    Shape getShape();\n}\n```\n2. 增加相关工厂类\n```\n/**\n * 圆形工厂类\n */\npublic class CircleFactory implements Factory {\n    @Override\n    public Shape getShape() {\n        return new Circle();\n    }\n}\n/**\n * 长方形工厂类\n */\n public class RectangleFactory implements Factory {\n    @Override\n    public Shape getShape() {\n        return new Rectangle();\n    }\n}\n/**\n * 正方形工厂类\n */\n public class SquareFactory implements Factory {\n    @Override\n    public Shape getShape() {\n        return new Square();\n    }\n}\n```\n3. 测试类\n```\npublic class Client {\n    public static void main(String[] args) {\n        CircleFactory circleFactory = new CircleFactory();\n        Shape circle = circleFactory.getShape();\n        circle.draw();\n    }\n}\n```\n**输出结果**\n```\nCircle：圆形\nDraw Circle\n```\n#### 三、抽象工厂模式\n*在工厂方法模式中，我们发现我们生产的都是同一类产品。抽象工厂模式就是工厂方法模式的进一步深化，在这个模式中的工厂类不单单创建一种产品，而是可以创建一组产品*\n\n*是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构*\n\n**适用场景：**\n>- 和工厂方法一样客户端不需要知道它所创建的对象的类\n>- 需要一组对象共同完成某种功能时，并且存在可能多组对象完成不同功能的情况(属于同一个产品族的产品)\n>>1. 当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等\n>>2. 系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋\n>>3. 系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构\n>- 系统结构稳定，不会频繁的增加对象(当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改)\n\n**抽象工厂方法模式角色分配：**\n1. ***抽象工厂(Abstract Factory)角色：*** 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口\n2. ***具体工厂类(Concrete Factory)角色：*** 这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象\n3. ***抽象产品(Abstract Product)角色：*** 工厂方法模式所创建对象的超类型，也就是产品对象的共同父类或共同拥有接口\n4. ***具体产品(Concrete Product)角色：*** 抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。在抽象工厂中创建的产品属于同一产品族，这不同于上面的工厂模式中的工厂只创建单一产品\n\n**抽象工厂模式结构图**\n\n![r.jpg](https://note.youdao.com/yws/res/3006/WEBRESOURCE08db0fe6b1e9b154b24ccb1046f6d307)\n\n**抽象工厂的工厂和工厂方法中的工厂区别：**\n\n***==抽象工厂是生产一整套有产品的（至少要生产两个产品)，这些产品必须相互是有关系或有依赖的，而工厂方法中的工厂是生产单一产品的工厂==***\n\n\n**抽象工厂模式实例：**\n\n*假设现在存在AK、M4A1两类枪，每一种枪对应一种子弹。我们现在这样考虑生产AK的工厂可以顺便生产AK使用的子弹，生产M4A1的工厂可以顺便生产M4A1使用的子弹。（AK工厂生产AK系列产品包括子弹啊，AK枪的类型啊这些，M4A1工厂同理）*\n1. 创建相关接口\n```\n//创建枪及子弹的接口\npublic interface Gun {\n    void shooting();\n}\npublic interface Bullet {\n    void load();\n}\n```\n2. 创建接口对应的实现类\n```\n//枪实现类\npublic class AK implements Gun {\n    @Override\n    public void shooting() {\n        System.out.println(\"shooting with AK\");\n    }\n}\npublic class M4A1 implements Gun {\n    @Override\n    public void shooting() {\n        System.out.println(\"shooting with M4A1\");\n    }\n}\n//子弹实现类\npublic class AK_Bullet implements Bullet {\n    @Override\n    public void load() {\n        System.out.println(\"load bullets with AK\");\n    }\n}\npublic class M4A1_Bullet implements Bullet {\n    @Override\n    public void load() {\n        System.out.println(\"load bullets with M4A1\");\n    }\n}\n```\n3. 创建工厂接口\n```\npublic interface Factory {\n    Gun productGun();\n    Bullet productBullet();\n}\n```\n4.创建具体工厂\n```\n//AK工厂\npublic class AK_Factory implements Factory {\n    @Override\n    public Gun productGun() {\n        return new AK();\n    }\n\n    @Override\n    public Bullet productBullet() {\n        return new AK_Bullet();\n    }\n}\n//M4A1工厂\npublic class M4A1_Factory implements Factory {\n    @Override\n    public Gun productGun() {\n        return new M4A1();\n    }\n\n    @Override\n    public Bullet productBullet() {\n        return new M4A1_Bullet();\n    }\n}\n```\n5. 测试类\n```\npublic class Client {\n    public static void main(String[] args) {\n        Factory factory;\n        Gun gun;\n        Bullet bullet;\n        factory = new AK_Factory();\n        bullet = factory.productBullet();\n        bullet.load();\n        gun = factory.productGun();\n        gun.shooting();\n    }\n}\n```\n**输出结果**\n```\nload bullets with AK\nshooting with AK\n```\n\n\n\n\n\n\n\n\n\n","source":"_posts/设计模式-工厂模式.md","raw":"---\ntitle: 设计模式-工厂模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-10-19 19:25:22\npassword:\nsummary: 工厂模式（Factory Pattern）是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象\ntags:\n- 设计模式\ncategories:\n- Java\n---\n\n## 设计模式之工厂模式&工厂方法模式&抽象工厂模式\n*工厂模式（Factory Pattern）是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象*\n#### 介绍\n> **定义：** 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行\n>\n> **分类：**\n>>1. *简单工厂（Simple Factory）模式*，又称静态工厂方法模式\n>>2. *工厂方法（Factory Method）模式*，又称多态性工厂模式或虚拟构造子模式\n>>3. *抽象工厂（Abstract Factory）模式*，又称工具箱模式\n>\n> **主要功能：** 主要功能是帮助我们把对象的实例化部分抽取了出来，目的是降低系统中代码耦合度，并且增强了系统的扩展性\n>\n> **在开源框架中的使用：**\n>> 1. Spring中通过getBean(\"xxx\") 获取Bean\n>> 2. Java消息服务JMS中（这以消息队列ActiveMQ为例）\n```\n    // 1、创建一个连接工厂对象，需要指定服务的ip及端口。\n    ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(\"tcp://192.168.xx.xx:xxxxx\");\n    // 2、使用工厂对象创建一个Connection对象。\n    Connection connection = connectionFactory.createConnection();\n```\n> **为什么要使用工厂模式：**\n>> 1. **解耦：** 把对象的创建和使用的过程分开\n>> 2. **降低代码重复：** 如果创建对象的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码\n>> 3. **降低维护成本：** 由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建某个对象的地方去逐个修正，只需要在工厂里修改即可，降低维护成本\n***\n#### 一、简单工厂模式\n*严格的说，简单工厂模式并不是23种常用的设计模式之一，它只算工厂模式的一个特殊实现。简单工厂模式在实际中的应用相对于其他两个工厂模式用的还是相对少得多，因为它只适应很多简单的情况*\n\n*最重要的是它违背了我们在概述中说的 **==开放-封闭原则==**（可以通过反射的机制来避免）。因为每次你要新添加一个功能，都需要在生switch-case语句（或者if-else语句）中去修改代码，添加分支条件*\n\n**适用场景：**\n- 创建的对象较少\n- 客户端不关心对象的创建过程\n\n**简单工厂模式角色分配：**\n1. **工厂(Factory)角色：** 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以直接被外部调用，创建所需的产品对象\n2. **抽象产品(Product)角色：** 简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口\n3. **具体产品(Concrete Product)角色：** 简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例\n\n**简单工厂模式结构图**\n\n![s.jpg](https://note.youdao.com/yws/res/3018/WEBRESOURCE023b70852baff37122039478cf473c41)\n\n**简单工厂实例：**\n\n*创建一个可以绘制不同形状的绘图工具，可以绘制圆形、长方形、正方形等，每个图形都会有一个draw()方法用于绘图*\n1. 创建Shape接口\n```\npublic interface Shape {\n    void draw();\n}\n```\n2. 创建实现改接口的具体实现类\n```\n/**\n * 圆形\n */\npublic class Circle implements Shape {\n    public Circle() {\n        System.out.println(\"Circle：圆形\");\n    }\n    @Override\n    public void draw() {\n        System.out.println(\"Draw Circle\");\n    }\n}\n/**\n * 长方形\n */\npublic class Rectangle implements Shape {\n    public Rectangle() {\n        System.out.println(\"Rectangle：长方形\");\n    }\n    @Override\n    public void draw() {\n        System.out.println(\"Draw Rectangle\");\n    }\n}\n/**\n * 正方形\n */\n public class Square implements Shape {\n    public Square() {\n        System.out.println(\"Square：正方形\");\n    }\n    @Override\n    public void draw() {\n        System.out.println(\"Draw Square\");\n    }\n}\n```\n3. 创建工厂类\n```\npublic class ShapeFactory {\n    //使用getShape()方法获取形状类型的对象\n    public static Shape getShape(String shapeType) {\n        if (shapeType == null) {\n            return null;\n        }\n        if (shapeType.equalsIgnoreCase(\"CIRCLE\")) {\n            return new Circle();\n        } else if (shapeType.equalsIgnoreCase(\"RECTANGLE\")) {\n            return new Rectangle();\n        } else if (shapeType.equalsIgnoreCase(\"SQUARE\")) {\n            return new Square();\n        }\n        return null;\n    }\n}\n```\n4. 测试类\n```\npublic class Client {\n    public static void main(String[] args) {\n        //获取Circle的对象，并调用它的draw()方法\n        Shape circle = ShapeFactory.getShape(\"CIRCLE\");\n        circle.draw();\n\n        //获取Rectangle的对象，并调用它的draw()方法\n        Shape rectangle = ShapeFactory.getShape(\"Rectangle\");\n        rectangle.draw();\n\n        //获取Square的对象，并调用它的draw()方法\n        Shape square = ShapeFactory.getShape(\"square\");\n        square.draw();\n    }\n}\n```\n**运行结果**\n```\nCircle：圆形\nDraw Circle\nRectangle：长方形\nDraw Rectangle\nSquare：正方形\nDraw Square\n```\n*这样的实现有个问题，如果新增新的形状类型的话，就需要修改工厂类中的getShape()方法，这明显不符合 **开放-封闭原则***\n#### 一-一使用反射机制改造简单工厂\n**将工厂类改造为：**\n```\n/**\n * 利用反射解决简单工厂每次增加新的产品类型都需要修改工厂中的方法的弊端\n */\npublic class ShapeFactory_1 {\n    //方式一：使用泛型省略类型强制转换，支持多态↑↓\n    public static <T> T getClass(Class<? extends T> clazz) {\n        T obj = null;\n        try {\n            obj = (T) Class.forName(clazz.getName()).newInstance();\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n    //方式二：调用时需要进行强制转换↑↓\n    public static Object getClass_1(Class<? extends Shape> clazz) {\n        Object obj = null;\n        try {\n            obj = Class.forName(clazz.getName()).newInstance();\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n}\n```\n**测试类**\n```\npublic class Client_1 {\n    public static void main(String[] args) {\n        Circle circle = ShapeFactory_1.getClass(Circle.class);\n        circle.draw();\n        Rectangle rectangle = ShapeFactory_1.getClass(Rectangle.class);\n        rectangle.draw();\n        //方式二：\n        Square square = (Square) ShapeFactory_1.getClass_1(Square.class);\n        square.draw();\n    }\n}\n```\n*使用反射的方式让程序符合了 **开放-封闭原则**，但是每一次传入的都是产品类的全部路径，还可以通过 **反射+配置文件**的方式改善*\n***\n#### 二、工厂方法模式\n*工厂方法模式是简单工厂的进一步深化，在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。也就是说 **每个对象都有一个与之对应的工厂**，是工厂模式家族中用得最多的模式*\n\n**适用场景：**\n- 一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体的工厂类创建；客户端需要知道创建具体产品的工厂类\n- 一个类通过其子类来指定创建那个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏原则\n- 将创建对象的任务委托给多个多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中\n>>1. 客户只知道创建产品的工厂名，而不知道具体的产品名。如TCL电视工厂、海信电视工厂等\n>>2. 创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口\n>>3. 客户不关心创建产品的细节，只关心产品的品牌。\n\n**工厂方法模式角色分配：**\n1. ***抽象工厂(Abstract Factory)角色：*** 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂必须实现这个接口\n2. ***具体工厂(Concrete Factory)角色：*** 这是实现抽象接口的具体工厂类，包含于应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象\n3. ***抽象产品(Abstract Product)角色：*** 工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口\n4. ***具体产品(Concrete Product)角色：*** 这个角色实现了抽象产品角色所定义的接口。某具体产品由专门的具体工厂创建，它们之间往往一一对应\n\n**工厂方法模式结构图**\n\n![q.jpg](https://note.youdao.com/yws/res/2996/WEBRESOURCEfc91804b48dd0d9481ea30a44b3f09e7)\n\n**工厂方法模式实例：**\n\n*上面简单工厂例子中的图形接口以及相关图像实现类不变。我们只需要增加一个工厂接口以及实现这个接口的工厂类即可*\n1. 增加一个工厂接口\n```\npublic interface Factory {\n    Shape getShape();\n}\n```\n2. 增加相关工厂类\n```\n/**\n * 圆形工厂类\n */\npublic class CircleFactory implements Factory {\n    @Override\n    public Shape getShape() {\n        return new Circle();\n    }\n}\n/**\n * 长方形工厂类\n */\n public class RectangleFactory implements Factory {\n    @Override\n    public Shape getShape() {\n        return new Rectangle();\n    }\n}\n/**\n * 正方形工厂类\n */\n public class SquareFactory implements Factory {\n    @Override\n    public Shape getShape() {\n        return new Square();\n    }\n}\n```\n3. 测试类\n```\npublic class Client {\n    public static void main(String[] args) {\n        CircleFactory circleFactory = new CircleFactory();\n        Shape circle = circleFactory.getShape();\n        circle.draw();\n    }\n}\n```\n**输出结果**\n```\nCircle：圆形\nDraw Circle\n```\n#### 三、抽象工厂模式\n*在工厂方法模式中，我们发现我们生产的都是同一类产品。抽象工厂模式就是工厂方法模式的进一步深化，在这个模式中的工厂类不单单创建一种产品，而是可以创建一组产品*\n\n*是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构*\n\n**适用场景：**\n>- 和工厂方法一样客户端不需要知道它所创建的对象的类\n>- 需要一组对象共同完成某种功能时，并且存在可能多组对象完成不同功能的情况(属于同一个产品族的产品)\n>>1. 当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等\n>>2. 系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋\n>>3. 系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构\n>- 系统结构稳定，不会频繁的增加对象(当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改)\n\n**抽象工厂方法模式角色分配：**\n1. ***抽象工厂(Abstract Factory)角色：*** 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口\n2. ***具体工厂类(Concrete Factory)角色：*** 这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象\n3. ***抽象产品(Abstract Product)角色：*** 工厂方法模式所创建对象的超类型，也就是产品对象的共同父类或共同拥有接口\n4. ***具体产品(Concrete Product)角色：*** 抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。在抽象工厂中创建的产品属于同一产品族，这不同于上面的工厂模式中的工厂只创建单一产品\n\n**抽象工厂模式结构图**\n\n![r.jpg](https://note.youdao.com/yws/res/3006/WEBRESOURCE08db0fe6b1e9b154b24ccb1046f6d307)\n\n**抽象工厂的工厂和工厂方法中的工厂区别：**\n\n***==抽象工厂是生产一整套有产品的（至少要生产两个产品)，这些产品必须相互是有关系或有依赖的，而工厂方法中的工厂是生产单一产品的工厂==***\n\n\n**抽象工厂模式实例：**\n\n*假设现在存在AK、M4A1两类枪，每一种枪对应一种子弹。我们现在这样考虑生产AK的工厂可以顺便生产AK使用的子弹，生产M4A1的工厂可以顺便生产M4A1使用的子弹。（AK工厂生产AK系列产品包括子弹啊，AK枪的类型啊这些，M4A1工厂同理）*\n1. 创建相关接口\n```\n//创建枪及子弹的接口\npublic interface Gun {\n    void shooting();\n}\npublic interface Bullet {\n    void load();\n}\n```\n2. 创建接口对应的实现类\n```\n//枪实现类\npublic class AK implements Gun {\n    @Override\n    public void shooting() {\n        System.out.println(\"shooting with AK\");\n    }\n}\npublic class M4A1 implements Gun {\n    @Override\n    public void shooting() {\n        System.out.println(\"shooting with M4A1\");\n    }\n}\n//子弹实现类\npublic class AK_Bullet implements Bullet {\n    @Override\n    public void load() {\n        System.out.println(\"load bullets with AK\");\n    }\n}\npublic class M4A1_Bullet implements Bullet {\n    @Override\n    public void load() {\n        System.out.println(\"load bullets with M4A1\");\n    }\n}\n```\n3. 创建工厂接口\n```\npublic interface Factory {\n    Gun productGun();\n    Bullet productBullet();\n}\n```\n4.创建具体工厂\n```\n//AK工厂\npublic class AK_Factory implements Factory {\n    @Override\n    public Gun productGun() {\n        return new AK();\n    }\n\n    @Override\n    public Bullet productBullet() {\n        return new AK_Bullet();\n    }\n}\n//M4A1工厂\npublic class M4A1_Factory implements Factory {\n    @Override\n    public Gun productGun() {\n        return new M4A1();\n    }\n\n    @Override\n    public Bullet productBullet() {\n        return new M4A1_Bullet();\n    }\n}\n```\n5. 测试类\n```\npublic class Client {\n    public static void main(String[] args) {\n        Factory factory;\n        Gun gun;\n        Bullet bullet;\n        factory = new AK_Factory();\n        bullet = factory.productBullet();\n        bullet.load();\n        gun = factory.productGun();\n        gun.shooting();\n    }\n}\n```\n**输出结果**\n```\nload bullets with AK\nshooting with AK\n```\n\n\n\n\n\n\n\n\n\n","slug":"设计模式-工厂模式","published":1,"updated":"2019-10-19T11:26:32.478Z","_id":"ck1xh92c70004ywudw42p0d4c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"设计模式之工厂模式-amp-工厂方法模式-amp-抽象工厂模式\"><a href=\"#设计模式之工厂模式-amp-工厂方法模式-amp-抽象工厂模式\" class=\"headerlink\" title=\"设计模式之工厂模式&amp;工厂方法模式&amp;抽象工厂模式\"></a>设计模式之工厂模式&amp;工厂方法模式&amp;抽象工厂模式</h2><p><em>工厂模式（Factory Pattern）是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象</em></p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><blockquote>\n<p><strong>定义：</strong> 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行</p>\n<p><strong>分类：</strong></p>\n<blockquote>\n<ol>\n<li><em>简单工厂（Simple Factory）模式</em>，又称静态工厂方法模式</li>\n<li><em>工厂方法（Factory Method）模式</em>，又称多态性工厂模式或虚拟构造子模式</li>\n<li><em>抽象工厂（Abstract Factory）模式</em>，又称工具箱模式</li>\n</ol>\n</blockquote>\n<p><strong>主要功能：</strong> 主要功能是帮助我们把对象的实例化部分抽取了出来，目的是降低系统中代码耦合度，并且增强了系统的扩展性</p>\n<p><strong>在开源框架中的使用：</strong></p>\n<blockquote>\n<ol>\n<li>Spring中通过getBean(“xxx”) 获取Bean</li>\n<li>Java消息服务JMS中（这以消息队列ActiveMQ为例）<pre><code> // 1、创建一个连接工厂对象，需要指定服务的ip及端口。\n ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(&quot;tcp://192.168.xx.xx:xxxxx&quot;);\n // 2、使用工厂对象创建一个Connection对象。\n Connection connection = connectionFactory.createConnection();</code></pre></li>\n</ol>\n<p><strong>为什么要使用工厂模式：</strong></p>\n<ol>\n<li><strong>解耦：</strong> 把对象的创建和使用的过程分开</li>\n<li><strong>降低代码重复：</strong> 如果创建对象的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码</li>\n<li><strong>降低维护成本：</strong> 由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建某个对象的地方去逐个修正，只需要在工厂里修改即可，降低维护成本</li>\n</ol>\n</blockquote>\n</blockquote>\n<hr>\n<h4 id=\"一、简单工厂模式\"><a href=\"#一、简单工厂模式\" class=\"headerlink\" title=\"一、简单工厂模式\"></a>一、简单工厂模式</h4><p><em>严格的说，简单工厂模式并不是23种常用的设计模式之一，它只算工厂模式的一个特殊实现。简单工厂模式在实际中的应用相对于其他两个工厂模式用的还是相对少得多，因为它只适应很多简单的情况</em></p>\n<p><em>最重要的是它违背了我们在概述中说的 <strong>==开放-封闭原则==</strong>（可以通过反射的机制来避免）。因为每次你要新添加一个功能，都需要在生switch-case语句（或者if-else语句）中去修改代码，添加分支条件</em></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>创建的对象较少</li>\n<li>客户端不关心对象的创建过程</li>\n</ul>\n<p><strong>简单工厂模式角色分配：</strong></p>\n<ol>\n<li><strong>工厂(Factory)角色：</strong> 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以直接被外部调用，创建所需的产品对象</li>\n<li><strong>抽象产品(Product)角色：</strong> 简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口</li>\n<li><strong>具体产品(Concrete Product)角色：</strong> 简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例</li>\n</ol>\n<p><strong>简单工厂模式结构图</strong></p>\n<p><img src=\"https://note.youdao.com/yws/res/3018/WEBRESOURCE023b70852baff37122039478cf473c41\" alt=\"s.jpg\"></p>\n<p><strong>简单工厂实例：</strong></p>\n<p><em>创建一个可以绘制不同形状的绘图工具，可以绘制圆形、长方形、正方形等，每个图形都会有一个draw()方法用于绘图</em></p>\n<ol>\n<li><p>创建Shape接口</p>\n<pre><code>public interface Shape {\n void draw();\n}</code></pre></li>\n<li><p>创建实现改接口的具体实现类</p>\n<pre><code>/**\n* 圆形\n*/\npublic class Circle implements Shape {\n public Circle() {\n     System.out.println(&quot;Circle：圆形&quot;);\n }\n @Override\n public void draw() {\n     System.out.println(&quot;Draw Circle&quot;);\n }\n}\n/**\n* 长方形\n*/\npublic class Rectangle implements Shape {\n public Rectangle() {\n     System.out.println(&quot;Rectangle：长方形&quot;);\n }\n @Override\n public void draw() {\n     System.out.println(&quot;Draw Rectangle&quot;);\n }\n}\n/**\n* 正方形\n*/\npublic class Square implements Shape {\n public Square() {\n     System.out.println(&quot;Square：正方形&quot;);\n }\n @Override\n public void draw() {\n     System.out.println(&quot;Draw Square&quot;);\n }\n}</code></pre></li>\n<li><p>创建工厂类</p>\n<pre><code>public class ShapeFactory {\n //使用getShape()方法获取形状类型的对象\n public static Shape getShape(String shapeType) {\n     if (shapeType == null) {\n         return null;\n     }\n     if (shapeType.equalsIgnoreCase(&quot;CIRCLE&quot;)) {\n         return new Circle();\n     } else if (shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;)) {\n         return new Rectangle();\n     } else if (shapeType.equalsIgnoreCase(&quot;SQUARE&quot;)) {\n         return new Square();\n     }\n     return null;\n }\n}</code></pre></li>\n<li><p>测试类</p>\n<pre><code>public class Client {\n public static void main(String[] args) {\n     //获取Circle的对象，并调用它的draw()方法\n     Shape circle = ShapeFactory.getShape(&quot;CIRCLE&quot;);\n     circle.draw();\n\n     //获取Rectangle的对象，并调用它的draw()方法\n     Shape rectangle = ShapeFactory.getShape(&quot;Rectangle&quot;);\n     rectangle.draw();\n\n     //获取Square的对象，并调用它的draw()方法\n     Shape square = ShapeFactory.getShape(&quot;square&quot;);\n     square.draw();\n }\n}</code></pre></li>\n</ol>\n<p><strong>运行结果</strong></p>\n<pre><code>Circle：圆形\nDraw Circle\nRectangle：长方形\nDraw Rectangle\nSquare：正方形\nDraw Square</code></pre><p><em>这样的实现有个问题，如果新增新的形状类型的话，就需要修改工厂类中的getShape()方法，这明显不符合 <strong>开放-封闭原则</strong></em></p>\n<h4 id=\"一-一使用反射机制改造简单工厂\"><a href=\"#一-一使用反射机制改造简单工厂\" class=\"headerlink\" title=\"一-一使用反射机制改造简单工厂\"></a>一-一使用反射机制改造简单工厂</h4><p><strong>将工厂类改造为：</strong></p>\n<pre><code>/**\n * 利用反射解决简单工厂每次增加新的产品类型都需要修改工厂中的方法的弊端\n */\npublic class ShapeFactory_1 {\n    //方式一：使用泛型省略类型强制转换，支持多态↑↓\n    public static &lt;T&gt; T getClass(Class&lt;? extends T&gt; clazz) {\n        T obj = null;\n        try {\n            obj = (T) Class.forName(clazz.getName()).newInstance();\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n    //方式二：调用时需要进行强制转换↑↓\n    public static Object getClass_1(Class&lt;? extends Shape&gt; clazz) {\n        Object obj = null;\n        try {\n            obj = Class.forName(clazz.getName()).newInstance();\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n}</code></pre><p><strong>测试类</strong></p>\n<pre><code>public class Client_1 {\n    public static void main(String[] args) {\n        Circle circle = ShapeFactory_1.getClass(Circle.class);\n        circle.draw();\n        Rectangle rectangle = ShapeFactory_1.getClass(Rectangle.class);\n        rectangle.draw();\n        //方式二：\n        Square square = (Square) ShapeFactory_1.getClass_1(Square.class);\n        square.draw();\n    }\n}</code></pre><p><em>使用反射的方式让程序符合了 <strong>开放-封闭原则</strong>，但是每一次传入的都是产品类的全部路径，还可以通过 <strong>反射+配置文件</strong>的方式改善</em></p>\n<hr>\n<h4 id=\"二、工厂方法模式\"><a href=\"#二、工厂方法模式\" class=\"headerlink\" title=\"二、工厂方法模式\"></a>二、工厂方法模式</h4><p><em>工厂方法模式是简单工厂的进一步深化，在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。也就是说 <strong>每个对象都有一个与之对应的工厂</strong>，是工厂模式家族中用得最多的模式</em></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体的工厂类创建；客户端需要知道创建具体产品的工厂类</li>\n<li>一个类通过其子类来指定创建那个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏原则</li>\n<li>将创建对象的任务委托给多个多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中<blockquote>\n<blockquote>\n<ol>\n<li>客户只知道创建产品的工厂名，而不知道具体的产品名。如TCL电视工厂、海信电视工厂等</li>\n<li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口</li>\n<li>客户不关心创建产品的细节，只关心产品的品牌。</li>\n</ol>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p><strong>工厂方法模式角色分配：</strong></p>\n<ol>\n<li><strong><em>抽象工厂(Abstract Factory)角色：</em></strong> 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂必须实现这个接口</li>\n<li><strong><em>具体工厂(Concrete Factory)角色：</em></strong> 这是实现抽象接口的具体工厂类，包含于应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象</li>\n<li><strong><em>抽象产品(Abstract Product)角色：</em></strong> 工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口</li>\n<li><strong><em>具体产品(Concrete Product)角色：</em></strong> 这个角色实现了抽象产品角色所定义的接口。某具体产品由专门的具体工厂创建，它们之间往往一一对应</li>\n</ol>\n<p><strong>工厂方法模式结构图</strong></p>\n<p><img src=\"https://note.youdao.com/yws/res/2996/WEBRESOURCEfc91804b48dd0d9481ea30a44b3f09e7\" alt=\"q.jpg\"></p>\n<p><strong>工厂方法模式实例：</strong></p>\n<p><em>上面简单工厂例子中的图形接口以及相关图像实现类不变。我们只需要增加一个工厂接口以及实现这个接口的工厂类即可</em></p>\n<ol>\n<li>增加一个工厂接口<pre><code>public interface Factory {\n Shape getShape();\n}</code></pre></li>\n<li>增加相关工厂类<pre><code>/**\n* 圆形工厂类\n*/\npublic class CircleFactory implements Factory {\n @Override\n public Shape getShape() {\n     return new Circle();\n }\n}\n/**\n* 长方形工厂类\n*/\npublic class RectangleFactory implements Factory {\n @Override\n public Shape getShape() {\n     return new Rectangle();\n }\n}\n/**\n* 正方形工厂类\n*/\npublic class SquareFactory implements Factory {\n @Override\n public Shape getShape() {\n     return new Square();\n }\n}</code></pre></li>\n<li>测试类<pre><code>public class Client {\n public static void main(String[] args) {\n     CircleFactory circleFactory = new CircleFactory();\n     Shape circle = circleFactory.getShape();\n     circle.draw();\n }\n}</code></pre></li>\n</ol>\n<p><strong>输出结果</strong></p>\n<pre><code>Circle：圆形\nDraw Circle</code></pre><h4 id=\"三、抽象工厂模式\"><a href=\"#三、抽象工厂模式\" class=\"headerlink\" title=\"三、抽象工厂模式\"></a>三、抽象工厂模式</h4><p><em>在工厂方法模式中，我们发现我们生产的都是同一类产品。抽象工厂模式就是工厂方法模式的进一步深化，在这个模式中的工厂类不单单创建一种产品，而是可以创建一组产品</em></p>\n<p><em>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构</em></p>\n<p><strong>适用场景：</strong></p>\n<blockquote>\n<ul>\n<li>和工厂方法一样客户端不需要知道它所创建的对象的类</li>\n<li>需要一组对象共同完成某种功能时，并且存在可能多组对象完成不同功能的情况(属于同一个产品族的产品)<blockquote>\n<ol>\n<li>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等</li>\n<li>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋</li>\n<li>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构</li>\n</ol>\n</blockquote>\n</li>\n<li>系统结构稳定，不会频繁的增加对象(当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改)</li>\n</ul>\n</blockquote>\n<p><strong>抽象工厂方法模式角色分配：</strong></p>\n<ol>\n<li><strong><em>抽象工厂(Abstract Factory)角色：</em></strong> 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口</li>\n<li><strong><em>具体工厂类(Concrete Factory)角色：</em></strong> 这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象</li>\n<li><strong><em>抽象产品(Abstract Product)角色：</em></strong> 工厂方法模式所创建对象的超类型，也就是产品对象的共同父类或共同拥有接口</li>\n<li><strong><em>具体产品(Concrete Product)角色：</em></strong> 抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。在抽象工厂中创建的产品属于同一产品族，这不同于上面的工厂模式中的工厂只创建单一产品</li>\n</ol>\n<p><strong>抽象工厂模式结构图</strong></p>\n<p><img src=\"https://note.youdao.com/yws/res/3006/WEBRESOURCE08db0fe6b1e9b154b24ccb1046f6d307\" alt=\"r.jpg\"></p>\n<p><strong>抽象工厂的工厂和工厂方法中的工厂区别：</strong></p>\n<p><strong><em>==抽象工厂是生产一整套有产品的（至少要生产两个产品)，这些产品必须相互是有关系或有依赖的，而工厂方法中的工厂是生产单一产品的工厂==</em></strong></p>\n<p><strong>抽象工厂模式实例：</strong></p>\n<p><em>假设现在存在AK、M4A1两类枪，每一种枪对应一种子弹。我们现在这样考虑生产AK的工厂可以顺便生产AK使用的子弹，生产M4A1的工厂可以顺便生产M4A1使用的子弹。（AK工厂生产AK系列产品包括子弹啊，AK枪的类型啊这些，M4A1工厂同理）</em></p>\n<ol>\n<li><p>创建相关接口</p>\n<pre><code>//创建枪及子弹的接口\npublic interface Gun {\n void shooting();\n}\npublic interface Bullet {\n void load();\n}</code></pre></li>\n<li><p>创建接口对应的实现类</p>\n<pre><code>//枪实现类\npublic class AK implements Gun {\n @Override\n public void shooting() {\n     System.out.println(&quot;shooting with AK&quot;);\n }\n}\npublic class M4A1 implements Gun {\n @Override\n public void shooting() {\n     System.out.println(&quot;shooting with M4A1&quot;);\n }\n}\n//子弹实现类\npublic class AK_Bullet implements Bullet {\n @Override\n public void load() {\n     System.out.println(&quot;load bullets with AK&quot;);\n }\n}\npublic class M4A1_Bullet implements Bullet {\n @Override\n public void load() {\n     System.out.println(&quot;load bullets with M4A1&quot;);\n }\n}</code></pre></li>\n<li><p>创建工厂接口</p>\n<pre><code>public interface Factory {\n Gun productGun();\n Bullet productBullet();\n}</code></pre></li>\n<li><p>创建具体工厂</p>\n<pre><code>//AK工厂\npublic class AK_Factory implements Factory {\n  @Override\n  public Gun productGun() {\n      return new AK();\n  }\n\n  @Override\n  public Bullet productBullet() {\n      return new AK_Bullet();\n  }\n}\n//M4A1工厂\npublic class M4A1_Factory implements Factory {\n  @Override\n  public Gun productGun() {\n      return new M4A1();\n  }\n\n  @Override\n  public Bullet productBullet() {\n      return new M4A1_Bullet();\n  }\n}</code></pre></li>\n<li><p>测试类</p>\n<pre><code>public class Client {\n public static void main(String[] args) {\n     Factory factory;\n     Gun gun;\n     Bullet bullet;\n     factory = new AK_Factory();\n     bullet = factory.productBullet();\n     bullet.load();\n     gun = factory.productGun();\n     gun.shooting();\n }\n}</code></pre></li>\n</ol>\n<p><strong>输出结果</strong></p>\n<pre><code>load bullets with AK\nshooting with AK</code></pre>","site":{"data":{"musics":[{"name":"男人的好","artist":"樊桐舟","url":"/medias/music/nanren.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"心生七面 善恶难辨","artist":"三无MarBlue","url":"/medias/music/xinsheng.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"}],"friends":[{"name":"自然语言处理与深度学习","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"我的知乎专栏，欢迎大家关注","avatar":"/medias/avatars/myzhihu.png"},{"name":"AntNLP","url":"https://antnlp.org","title":"访问主页","introduction":"华东师范大学自然语言处理实验室欢迎您的加入！","avatar":"/medias/avatars/antnlp.ico"},{"name":"IDS²","url":"https://www.smart-dependable-sino-europe.institute","title":"访问主页","introduction":"中欧可靠智能软件联合实验室欢迎您的加入！","avatar":"/medias/avatars/ids2.jpg"},{"name":"孙长志","url":"https://www.czsun.site","title":"访问主页","introduction":"AntNLP博士大师兄！","avatar":"/medias/avatars/sunchangzhi.jpg"},{"name":"纪焘","url":"https://taoji.site","title":"访问主页","introduction":"AntNLP博士带明星！","avatar":"/medias/avatars/jitao.jpg"},{"name":"杜雨沛","url":"https://yupei-du.github.io/","title":"访问主页","introduction":"AntNLP唱跳RAP打篮球全能师兄！","avatar":"/medias/avatars/duyupei.jpg"},{"name":"0xbirdpwn","url":"https://0xbird.top/","title":"访问主页","introduction":"十步杀一人，千里不留行，事了拂衣去，深藏功与名。","avatar":"/medias/avatars/0xbird.png"},{"name":"齐强的博客","url":"https://chrisqiqiang.com/","title":"访问主页","introduction":"燥动灵魂，无处安放；放浪形骸,随处可栖。","avatar":"/medias/avatars/qiqiang.jpg"},{"name":"李佳倩的博客","url":"http://jiaqianlee.com/","title":"访问主页","introduction":"一只小白的成长之路！","avatar":"/medias/avatars/lijiaqian.png"},{"name":"kewlgrl","url":"https://blog.csdn.net/MIKASA3","title":"访问主页","introduction":"好大一只咸鱼哇","avatar":"/medias/avatars/kewlgrl.jpg"},{"name":"孙哥我还是看不透生死","url":"https://www.navazil.com/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zhaokangzhe.jpg"},{"name":"Think Far Blog","url":"https://wuli749826.github.io","title":"访问主页","introduction":"我曾经拥有这一切，转眼都飘散如烟。","avatar":"/medias/avatars/gsy.jpg"},{"name":"望城风景","url":"https://www.itaowei.cn/","title":"访问主页","introduction":"用力活过的日子，才配得上此刻的缅怀。","avatar":"/medias/avatars/taowei.jpg"},{"name":"jxtxzzw空间","url":"https://www.jxtxzzw.com/wordpress","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/zzw.jpg"},{"name":"DREAMWINGS","url":"https://www.dreamwings.cn/","title":"访问主页","introduction":"夢はそこでないと、私の権利である","avatar":"/medias/avatars/qianqian.png"},{"name":"ElaineLv","url":"https://www.elainelv.top/","title":"访问主页","introduction":"Stay hungry, Stay foolish","avatar":"/medias/avatars/lyn-draw.jpg"},{"name":"Subject_No_i","url":"https://subjectnoi.github.io","title":"访问主页","introduction":"在原七海 中野三玖 中野二乃 樱岛麻衣的老公","avatar":"/medias/avatars/lzh.png"},{"name":"菁菁","url":"https://angericky.github.io/","title":"访问主页","introduction":"做什么都是因为喜欢","avatar":"/medias/avatars/jingjing.jpg"},{"name":"婷宝的博客","url":"https://milyyy.github.io/","title":"访问主页","introduction":"希望有一个陪我到老的人，还有很多啦（略略略）~ 不过终极梦想嘛，就是做一个快乐的包租婆啦！ 哈哈哈(●'◡'●)","avatar":"/medias/avatars/milyyy.jpg"},{"name":"隐函数_北极鹅","url":"https://www.zhihu.com/people/bei-ji-e-13","title":"访问主页","introduction":"玩CV的音乐人，搞rock的程序员","avatar":"/medias/avatars/ldy.jpg"},{"name":"Sweet-Q","url":"https://sweet-q.github.io","title":"访问主页","introduction":"华东师范大学数学系","avatar":"/medias/avatars/babyq.png"},{"name":"伟大的蚊子","url":"https://blog.csdn.net/cww97","title":"访问主页","introduction":"鼓楼的夜晚时间匆匆","avatar":"/medias/avatars/cww97.jpg"},{"name":"Fun4wut","url":"https://blog.fun4go.top","title":"访问主页","introduction":"菜鸡欢迎大佬的光顾","avatar":"/medias/avatars/fun4go.png"},{"name":"Hael Chan","url":"https://haelchan.me/","title":"访问主页","introduction":"浙江大学 & NLP & ML","avatar":"/medias/avatars/hael.jpg"},{"name":"happygirlzt","url":"https://www.happygirlzt.com","title":"访问主页","introduction":"A Backend Engineer","avatar":"/medias/avatars/zhangting.jpg"},{"name":"星空无限","url":"https://liyangzone.com","title":"访问主页","introduction":"前端开发，死飞大佬。分享技术，分享生活。","avatar":"/medias/avatars/liyangzone.jpg"},{"name":"Mashiro","url":"https://2heng.xin/","title":"访问主页","introduction":"樱花庄的白猫","avatar":"/medias/avatars/mashiro.jpg"},{"name":"hzwer","url":"http://hzwer.com/","title":"访问主页","introduction":"北京大学计算机系","avatar":"/medias/avatars/hzwer.jpg"},{"name":"MPY634","url":"https://mpy634.cn/","title":"访问主页","introduction":"摸鱼，永无止境。","avatar":"/medias/avatars/mpy634.png"},{"name":"徐铭辰的博客","url":"https://michaelxucs.com","title":"访问主页","introduction":"埃克塞特大学计算机系","avatar":"/medias/avatars/michael.jpg"},{"name":"Mizunashi","url":"https://mizunashi.me","title":"访问主页","introduction":"欢迎大佬们来玩","avatar":"/medias/avatars/mizunashi.png"},{"name":"xuzhongyou","url":"https://xuzhongyou.github.io/","title":"访问主页","introduction":"我哽咽道：你是赵默笙，可我不是何以琛啊。","avatar":"/medias/avatars/xuzhongyou.jpg"},{"name":"Yucheng Li","url":"https://liyucheng.info/","title":"访问主页","introduction":"目前关注知识图谱与关系抽取领域","avatar":"/medias/avatars/liyucheng.jpg"},{"name":"zerol","url":"https://zerol.me/","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/huaji.jpg"},{"name":"Zhang Yi","url":"http://codewithzhangyi.com/","title":"访问主页","introduction":"Coding is the New Sexy","avatar":"/medias/avatars/zhangyi.jpg"},{"name":"科学空间","url":"https://spaces.ac.cn/","title":"访问主页","introduction":"中山大学基础数学研究生","avatar":"/medias/avatars/spacesac.png"},{"name":"神圣超级无敌宇宙大王","url":"http://sscjwdyzdw.club","title":"访问主页","introduction":"华东师范大学计算机系","avatar":"/medias/avatars/qiandongwei.jpg"},{"name":"咸鱼的自我修养","url":"https://chrisju.cn/","title":"访问主页","introduction":"Failing means foolish.","avatar":"/medias/avatars/mouse.jpg"}]}},"excerpt":"","more":"<h2 id=\"设计模式之工厂模式-amp-工厂方法模式-amp-抽象工厂模式\"><a href=\"#设计模式之工厂模式-amp-工厂方法模式-amp-抽象工厂模式\" class=\"headerlink\" title=\"设计模式之工厂模式&amp;工厂方法模式&amp;抽象工厂模式\"></a>设计模式之工厂模式&amp;工厂方法模式&amp;抽象工厂模式</h2><p><em>工厂模式（Factory Pattern）是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象</em></p>\n<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><blockquote>\n<p><strong>定义：</strong> 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行</p>\n<p><strong>分类：</strong></p>\n<blockquote>\n<ol>\n<li><em>简单工厂（Simple Factory）模式</em>，又称静态工厂方法模式</li>\n<li><em>工厂方法（Factory Method）模式</em>，又称多态性工厂模式或虚拟构造子模式</li>\n<li><em>抽象工厂（Abstract Factory）模式</em>，又称工具箱模式</li>\n</ol>\n</blockquote>\n<p><strong>主要功能：</strong> 主要功能是帮助我们把对象的实例化部分抽取了出来，目的是降低系统中代码耦合度，并且增强了系统的扩展性</p>\n<p><strong>在开源框架中的使用：</strong></p>\n<blockquote>\n<ol>\n<li>Spring中通过getBean(“xxx”) 获取Bean</li>\n<li>Java消息服务JMS中（这以消息队列ActiveMQ为例）<pre><code> // 1、创建一个连接工厂对象，需要指定服务的ip及端口。\n ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(&quot;tcp://192.168.xx.xx:xxxxx&quot;);\n // 2、使用工厂对象创建一个Connection对象。\n Connection connection = connectionFactory.createConnection();</code></pre></li>\n</ol>\n<p><strong>为什么要使用工厂模式：</strong></p>\n<ol>\n<li><strong>解耦：</strong> 把对象的创建和使用的过程分开</li>\n<li><strong>降低代码重复：</strong> 如果创建对象的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码</li>\n<li><strong>降低维护成本：</strong> 由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建某个对象的地方去逐个修正，只需要在工厂里修改即可，降低维护成本</li>\n</ol>\n</blockquote>\n</blockquote>\n<hr>\n<h4 id=\"一、简单工厂模式\"><a href=\"#一、简单工厂模式\" class=\"headerlink\" title=\"一、简单工厂模式\"></a>一、简单工厂模式</h4><p><em>严格的说，简单工厂模式并不是23种常用的设计模式之一，它只算工厂模式的一个特殊实现。简单工厂模式在实际中的应用相对于其他两个工厂模式用的还是相对少得多，因为它只适应很多简单的情况</em></p>\n<p><em>最重要的是它违背了我们在概述中说的 <strong>==开放-封闭原则==</strong>（可以通过反射的机制来避免）。因为每次你要新添加一个功能，都需要在生switch-case语句（或者if-else语句）中去修改代码，添加分支条件</em></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>创建的对象较少</li>\n<li>客户端不关心对象的创建过程</li>\n</ul>\n<p><strong>简单工厂模式角色分配：</strong></p>\n<ol>\n<li><strong>工厂(Factory)角色：</strong> 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以直接被外部调用，创建所需的产品对象</li>\n<li><strong>抽象产品(Product)角色：</strong> 简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口</li>\n<li><strong>具体产品(Concrete Product)角色：</strong> 简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例</li>\n</ol>\n<p><strong>简单工厂模式结构图</strong></p>\n<p><img src=\"https://note.youdao.com/yws/res/3018/WEBRESOURCE023b70852baff37122039478cf473c41\" alt=\"s.jpg\"></p>\n<p><strong>简单工厂实例：</strong></p>\n<p><em>创建一个可以绘制不同形状的绘图工具，可以绘制圆形、长方形、正方形等，每个图形都会有一个draw()方法用于绘图</em></p>\n<ol>\n<li><p>创建Shape接口</p>\n<pre><code>public interface Shape {\n void draw();\n}</code></pre></li>\n<li><p>创建实现改接口的具体实现类</p>\n<pre><code>/**\n* 圆形\n*/\npublic class Circle implements Shape {\n public Circle() {\n     System.out.println(&quot;Circle：圆形&quot;);\n }\n @Override\n public void draw() {\n     System.out.println(&quot;Draw Circle&quot;);\n }\n}\n/**\n* 长方形\n*/\npublic class Rectangle implements Shape {\n public Rectangle() {\n     System.out.println(&quot;Rectangle：长方形&quot;);\n }\n @Override\n public void draw() {\n     System.out.println(&quot;Draw Rectangle&quot;);\n }\n}\n/**\n* 正方形\n*/\npublic class Square implements Shape {\n public Square() {\n     System.out.println(&quot;Square：正方形&quot;);\n }\n @Override\n public void draw() {\n     System.out.println(&quot;Draw Square&quot;);\n }\n}</code></pre></li>\n<li><p>创建工厂类</p>\n<pre><code>public class ShapeFactory {\n //使用getShape()方法获取形状类型的对象\n public static Shape getShape(String shapeType) {\n     if (shapeType == null) {\n         return null;\n     }\n     if (shapeType.equalsIgnoreCase(&quot;CIRCLE&quot;)) {\n         return new Circle();\n     } else if (shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;)) {\n         return new Rectangle();\n     } else if (shapeType.equalsIgnoreCase(&quot;SQUARE&quot;)) {\n         return new Square();\n     }\n     return null;\n }\n}</code></pre></li>\n<li><p>测试类</p>\n<pre><code>public class Client {\n public static void main(String[] args) {\n     //获取Circle的对象，并调用它的draw()方法\n     Shape circle = ShapeFactory.getShape(&quot;CIRCLE&quot;);\n     circle.draw();\n\n     //获取Rectangle的对象，并调用它的draw()方法\n     Shape rectangle = ShapeFactory.getShape(&quot;Rectangle&quot;);\n     rectangle.draw();\n\n     //获取Square的对象，并调用它的draw()方法\n     Shape square = ShapeFactory.getShape(&quot;square&quot;);\n     square.draw();\n }\n}</code></pre></li>\n</ol>\n<p><strong>运行结果</strong></p>\n<pre><code>Circle：圆形\nDraw Circle\nRectangle：长方形\nDraw Rectangle\nSquare：正方形\nDraw Square</code></pre><p><em>这样的实现有个问题，如果新增新的形状类型的话，就需要修改工厂类中的getShape()方法，这明显不符合 <strong>开放-封闭原则</strong></em></p>\n<h4 id=\"一-一使用反射机制改造简单工厂\"><a href=\"#一-一使用反射机制改造简单工厂\" class=\"headerlink\" title=\"一-一使用反射机制改造简单工厂\"></a>一-一使用反射机制改造简单工厂</h4><p><strong>将工厂类改造为：</strong></p>\n<pre><code>/**\n * 利用反射解决简单工厂每次增加新的产品类型都需要修改工厂中的方法的弊端\n */\npublic class ShapeFactory_1 {\n    //方式一：使用泛型省略类型强制转换，支持多态↑↓\n    public static &lt;T&gt; T getClass(Class&lt;? extends T&gt; clazz) {\n        T obj = null;\n        try {\n            obj = (T) Class.forName(clazz.getName()).newInstance();\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n    //方式二：调用时需要进行强制转换↑↓\n    public static Object getClass_1(Class&lt;? extends Shape&gt; clazz) {\n        Object obj = null;\n        try {\n            obj = Class.forName(clazz.getName()).newInstance();\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n}</code></pre><p><strong>测试类</strong></p>\n<pre><code>public class Client_1 {\n    public static void main(String[] args) {\n        Circle circle = ShapeFactory_1.getClass(Circle.class);\n        circle.draw();\n        Rectangle rectangle = ShapeFactory_1.getClass(Rectangle.class);\n        rectangle.draw();\n        //方式二：\n        Square square = (Square) ShapeFactory_1.getClass_1(Square.class);\n        square.draw();\n    }\n}</code></pre><p><em>使用反射的方式让程序符合了 <strong>开放-封闭原则</strong>，但是每一次传入的都是产品类的全部路径，还可以通过 <strong>反射+配置文件</strong>的方式改善</em></p>\n<hr>\n<h4 id=\"二、工厂方法模式\"><a href=\"#二、工厂方法模式\" class=\"headerlink\" title=\"二、工厂方法模式\"></a>二、工厂方法模式</h4><p><em>工厂方法模式是简单工厂的进一步深化，在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。也就是说 <strong>每个对象都有一个与之对应的工厂</strong>，是工厂模式家族中用得最多的模式</em></p>\n<p><strong>适用场景：</strong></p>\n<ul>\n<li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体的工厂类创建；客户端需要知道创建具体产品的工厂类</li>\n<li>一个类通过其子类来指定创建那个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏原则</li>\n<li>将创建对象的任务委托给多个多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中<blockquote>\n<blockquote>\n<ol>\n<li>客户只知道创建产品的工厂名，而不知道具体的产品名。如TCL电视工厂、海信电视工厂等</li>\n<li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口</li>\n<li>客户不关心创建产品的细节，只关心产品的品牌。</li>\n</ol>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<p><strong>工厂方法模式角色分配：</strong></p>\n<ol>\n<li><strong><em>抽象工厂(Abstract Factory)角色：</em></strong> 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂必须实现这个接口</li>\n<li><strong><em>具体工厂(Concrete Factory)角色：</em></strong> 这是实现抽象接口的具体工厂类，包含于应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象</li>\n<li><strong><em>抽象产品(Abstract Product)角色：</em></strong> 工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口</li>\n<li><strong><em>具体产品(Concrete Product)角色：</em></strong> 这个角色实现了抽象产品角色所定义的接口。某具体产品由专门的具体工厂创建，它们之间往往一一对应</li>\n</ol>\n<p><strong>工厂方法模式结构图</strong></p>\n<p><img src=\"https://note.youdao.com/yws/res/2996/WEBRESOURCEfc91804b48dd0d9481ea30a44b3f09e7\" alt=\"q.jpg\"></p>\n<p><strong>工厂方法模式实例：</strong></p>\n<p><em>上面简单工厂例子中的图形接口以及相关图像实现类不变。我们只需要增加一个工厂接口以及实现这个接口的工厂类即可</em></p>\n<ol>\n<li>增加一个工厂接口<pre><code>public interface Factory {\n Shape getShape();\n}</code></pre></li>\n<li>增加相关工厂类<pre><code>/**\n* 圆形工厂类\n*/\npublic class CircleFactory implements Factory {\n @Override\n public Shape getShape() {\n     return new Circle();\n }\n}\n/**\n* 长方形工厂类\n*/\npublic class RectangleFactory implements Factory {\n @Override\n public Shape getShape() {\n     return new Rectangle();\n }\n}\n/**\n* 正方形工厂类\n*/\npublic class SquareFactory implements Factory {\n @Override\n public Shape getShape() {\n     return new Square();\n }\n}</code></pre></li>\n<li>测试类<pre><code>public class Client {\n public static void main(String[] args) {\n     CircleFactory circleFactory = new CircleFactory();\n     Shape circle = circleFactory.getShape();\n     circle.draw();\n }\n}</code></pre></li>\n</ol>\n<p><strong>输出结果</strong></p>\n<pre><code>Circle：圆形\nDraw Circle</code></pre><h4 id=\"三、抽象工厂模式\"><a href=\"#三、抽象工厂模式\" class=\"headerlink\" title=\"三、抽象工厂模式\"></a>三、抽象工厂模式</h4><p><em>在工厂方法模式中，我们发现我们生产的都是同一类产品。抽象工厂模式就是工厂方法模式的进一步深化，在这个模式中的工厂类不单单创建一种产品，而是可以创建一组产品</em></p>\n<p><em>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构</em></p>\n<p><strong>适用场景：</strong></p>\n<blockquote>\n<ul>\n<li>和工厂方法一样客户端不需要知道它所创建的对象的类</li>\n<li>需要一组对象共同完成某种功能时，并且存在可能多组对象完成不同功能的情况(属于同一个产品族的产品)<blockquote>\n<ol>\n<li>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等</li>\n<li>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋</li>\n<li>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构</li>\n</ol>\n</blockquote>\n</li>\n<li>系统结构稳定，不会频繁的增加对象(当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改)</li>\n</ul>\n</blockquote>\n<p><strong>抽象工厂方法模式角色分配：</strong></p>\n<ol>\n<li><strong><em>抽象工厂(Abstract Factory)角色：</em></strong> 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口</li>\n<li><strong><em>具体工厂类(Concrete Factory)角色：</em></strong> 这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象</li>\n<li><strong><em>抽象产品(Abstract Product)角色：</em></strong> 工厂方法模式所创建对象的超类型，也就是产品对象的共同父类或共同拥有接口</li>\n<li><strong><em>具体产品(Concrete Product)角色：</em></strong> 抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。在抽象工厂中创建的产品属于同一产品族，这不同于上面的工厂模式中的工厂只创建单一产品</li>\n</ol>\n<p><strong>抽象工厂模式结构图</strong></p>\n<p><img src=\"https://note.youdao.com/yws/res/3006/WEBRESOURCE08db0fe6b1e9b154b24ccb1046f6d307\" alt=\"r.jpg\"></p>\n<p><strong>抽象工厂的工厂和工厂方法中的工厂区别：</strong></p>\n<p><strong><em>==抽象工厂是生产一整套有产品的（至少要生产两个产品)，这些产品必须相互是有关系或有依赖的，而工厂方法中的工厂是生产单一产品的工厂==</em></strong></p>\n<p><strong>抽象工厂模式实例：</strong></p>\n<p><em>假设现在存在AK、M4A1两类枪，每一种枪对应一种子弹。我们现在这样考虑生产AK的工厂可以顺便生产AK使用的子弹，生产M4A1的工厂可以顺便生产M4A1使用的子弹。（AK工厂生产AK系列产品包括子弹啊，AK枪的类型啊这些，M4A1工厂同理）</em></p>\n<ol>\n<li><p>创建相关接口</p>\n<pre><code>//创建枪及子弹的接口\npublic interface Gun {\n void shooting();\n}\npublic interface Bullet {\n void load();\n}</code></pre></li>\n<li><p>创建接口对应的实现类</p>\n<pre><code>//枪实现类\npublic class AK implements Gun {\n @Override\n public void shooting() {\n     System.out.println(&quot;shooting with AK&quot;);\n }\n}\npublic class M4A1 implements Gun {\n @Override\n public void shooting() {\n     System.out.println(&quot;shooting with M4A1&quot;);\n }\n}\n//子弹实现类\npublic class AK_Bullet implements Bullet {\n @Override\n public void load() {\n     System.out.println(&quot;load bullets with AK&quot;);\n }\n}\npublic class M4A1_Bullet implements Bullet {\n @Override\n public void load() {\n     System.out.println(&quot;load bullets with M4A1&quot;);\n }\n}</code></pre></li>\n<li><p>创建工厂接口</p>\n<pre><code>public interface Factory {\n Gun productGun();\n Bullet productBullet();\n}</code></pre></li>\n<li><p>创建具体工厂</p>\n<pre><code>//AK工厂\npublic class AK_Factory implements Factory {\n  @Override\n  public Gun productGun() {\n      return new AK();\n  }\n\n  @Override\n  public Bullet productBullet() {\n      return new AK_Bullet();\n  }\n}\n//M4A1工厂\npublic class M4A1_Factory implements Factory {\n  @Override\n  public Gun productGun() {\n      return new M4A1();\n  }\n\n  @Override\n  public Bullet productBullet() {\n      return new M4A1_Bullet();\n  }\n}</code></pre></li>\n<li><p>测试类</p>\n<pre><code>public class Client {\n public static void main(String[] args) {\n     Factory factory;\n     Gun gun;\n     Bullet bullet;\n     factory = new AK_Factory();\n     bullet = factory.productBullet();\n     bullet.load();\n     gun = factory.productGun();\n     gun.shooting();\n }\n}</code></pre></li>\n</ol>\n<p><strong>输出结果</strong></p>\n<pre><code>load bullets with AK\nshooting with AK</code></pre>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck1x9lwmn0002pguduevlt52s","category_id":"ck1x9ohu40000p4ud91obfxfo","_id":"ck1x9ohu50001p4udxz8wfvcs"},{"post_id":"ck1x9lwpq000qpguddzsm35g0","category_id":"ck1x9ohu40000p4ud91obfxfo","_id":"ck1x9oqap0002p4udii7lbe47"},{"post_id":"ck1x9lwmr0005pgudlcn1wfla","category_id":"ck1x9ohu40000p4ud91obfxfo","_id":"ck1x9oz1d0003p4udep7fq3vg"},{"post_id":"ck1xbts21000004ud5c5fnj84","category_id":"ck1xh92bz0000ywudduwjme0x","_id":"ck1xh92c10003ywud9ydgcf0b"},{"post_id":"ck1xh92c70004ywudw42p0d4c","category_id":"ck1x9ohu40000p4ud91obfxfo","_id":"ck1xh92c90006ywudiivlpzba"}],"PostTag":[{"post_id":"ck1x9lwmn0002pguduevlt52s","tag_id":"ck1x9lwmt0007pgudnsd5q8s6","_id":"ck1x9lwmw000epgudryusg5wr"},{"post_id":"ck1x9lwmr0005pgudlcn1wfla","tag_id":"ck1x9lwmt0007pgudnsd5q8s6","_id":"ck1x9lwmx000ipgudd7342cao"},{"post_id":"ck1x9lwpq000qpguddzsm35g0","tag_id":"ck1x9lwmt0007pgudnsd5q8s6","_id":"ck1x9lwpr000tpgudf4oiy3w4"},{"post_id":"ck1xbts21000004ud5c5fnj84","tag_id":"ck1xh92c00001ywudp0560901","_id":"ck1xh92c00002ywud7dw42nsa"},{"post_id":"ck1xh92c70004ywudw42p0d4c","tag_id":"ck1x9lwmt0007pgudnsd5q8s6","_id":"ck1xh92c80005ywude4eyas9u"}],"Tag":[{"name":"随笔","_id":"ck1x9lwmr0004pguditlxu6r7"},{"name":"设计模式","_id":"ck1x9lwmt0007pgudnsd5q8s6"},{"name":"时序图","_id":"ck1x9lwmu000bpgudtvlfo37a"},{"name":"单例模式","_id":"ck1x9lwmx000hpgudqwtr127n"},{"name":"原则","_id":"ck1x9lwpr000rpgudzaz50363"},{"name":"init","_id":"ck1xh92c00001ywudp0560901"}]}}