<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/2019/10/19/she-ji-mo-shi-dan-li-mo-shi/"/>
      <url>/2019/10/19/she-ji-mo-shi-dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h2><p><em>单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象</em></p><blockquote><ol><li>单例类只能有一个实例</li><li>单例类必须自己创建自己的唯一实例</li><li>单例类对外提供一个访问该单例的全局访问点</li></ol></blockquote><h4 id="一、了解单例模式"><a href="#一、了解单例模式" class="headerlink" title="一、了解单例模式"></a>一、了解单例模式</h4><p><strong>应用场景：</strong> </p><ol><li>在应用场景中，某类只要求生成一个对象的时候，如一个班班主任、班长等</li><li>对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如Web中的配置对象、数据库中的连接池等</li><li>当某类需要频繁的实例化，而创建的对象又频繁被销毁的时候，如多线程的连接池、网络连接池等<blockquote><p><strong><em>注意事项：</em></strong> getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化</p></blockquote></li></ol><p><strong>单例模式的结构：</strong></p><blockquote><p><em>单例类：</em> 包含一个实例且能自行创建这个实例的类<br><em>访问类：</em> 使用单例的类</p></blockquote><p>单例模式的结构图<br><img src="https://note.youdao.com/yws/res/3162/WEBRESOURCE4530fa811a5cf0f1fc7124974411f3ab" alt="t.jpg"></p><h4 id="二、单例模式实现的几种方式"><a href="#二、单例模式实现的几种方式" class="headerlink" title="二、单例模式实现的几种方式"></a>二、单例模式实现的几种方式</h4><p><em>单例模式通常有==两种实现形式==： <strong>==懒汉式、饿汉式==</strong></em></p><ol><li><p><strong>懒汉式，线程不安全</strong></p><blockquote><p><strong>是否Lazy初始化</strong>：是</p><p><strong>是否多线程安全</strong>：否</p><p><em>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized，所以严格意义上它并不算单例模式。这种方式 <strong>延迟加载(lazy loading)</strong> 很明显，不要求线程安全，在多线程不能正常工作</em></p><pre><code>public class Singleton { private static Singleton instance = null;</code></pre></blockquote><p> private  Singleton() {<br> }<br> /**</p><ul><li>线程安全</li><li>public static synchronized Singleton getInstance() {</li><li>/<br>public static Singleton getInstance() {<br>  if (instance == null) {<pre><code>  instance = new Singleton();</code></pre>  }<br>  return instance;<br>}<br>}<pre><code></code></pre></li></ul></li><li><p><strong>饿汉式</strong></p><blockquote><p><strong>是否Lazy初始化：</strong> 否</p><p><strong>是否多线程安全：</strong> 是</p><p><em>这种方式比较常用，但容易产生垃圾对象</em></p><blockquote><p>优点：没有加锁，执行效率会提高</p><p>缺点：类加载时就初始化，浪费内存</p><pre><code>public class Singleton_Hungry { private static Singleton_Hungry instance = new Singleton_Hungry(); private Singleton_Hungry() { } public static Singleton_Hungry getInstance() {     return instance; }}</code></pre></blockquote></blockquote></li><li><p><strong>双检锁/双重校验锁（DCL，即 double-checked locking）</strong></p><blockquote><p><strong>是否Lazy初始化：</strong> 是</p><p><strong>是否多线程安全：</strong> 是</p><p><em>这种方式采用双锁机制，安全且在多线程情况下能保持高性能</em></p><blockquote><p>双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题。由于singleton=new Singleton()对象的创建在JVM中可能会进行重排序，在多线程访问下存在风险，使用volatile修饰signleton实例变量有效，解决该问题</p><pre><code>public class Singleton_DCL { //保证instance在所有线程同步 private volatile static Singleton_DCL instance = null; //private避免类在外部被实例化 private Singleton_DCL() { } public static Singleton_DCL getInstance() {     if (instance == null) {         synchronized (Singleton_DCL.class) {             if (instance == null) {                 instance = new Singleton_DCL();             }         }     }     return instance; }}</code></pre></blockquote></blockquote></li><li><p><strong>静态内部类单例模式</strong></p><blockquote><p><strong>是否Lazy初始化：</strong> 是</p><p><strong>是否多线程安全：</strong> 是</p><p><em>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用</em></p><blockquote><p>只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，具体根据项目选择</p><pre><code>public class Singleton_staticInnerClass {</code></pre></blockquote></blockquote><p> private Singleton_staticInnerClass(){<br> }<br> private static class Inner {</p><pre><code> private static final Singleton_staticInnerClass         INSTANCE = new Singleton_staticInnerClass();</code></pre><p> }<br> public static final Singleton_staticInnerClass getInstance() {</p><pre><code> return Inner.INSTANCE;</code></pre><p> }<br>}</p><pre><code></code></pre></li><li><p><strong>枚举单例模式</strong></p><blockquote><p><strong>是否Lazy初始化：</strong> 否</p><p><strong>是否多线程安全：</strong> 是</p><p><em>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化</em></p><blockquote><p>这种方式是《Effective Java》中提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化</p><pre><code>public enum  Singleton_enum { INSTANCE; //doSomething 该实例支持的行为</code></pre></blockquote></blockquote><p> //可以省略此方法，通过Singleton.INSTANCE进行操作<br> public static Singleton_enum getInstance() {</p><pre><code> return Singleton_enum.INSTANCE;</code></pre><p> }<br>}</p><pre><code></code></pre></li></ol><h4 id="【例子-懒汉式】"><a href="#【例子-懒汉式】" class="headerlink" title="【例子-懒汉式】"></a>【例子-懒汉式】</h4><pre><code>public class President {    //保证instance在所有线程中同步    private static volatile President instance = null;    //private避免类在外部被实例化    private President() {        System.out.println(&quot;选举一个总统&quot;);    }    //在getInstance方法上加同步    public static synchronized President getInstance() {        if (instance == null) {            instance = new President();        } else {            System.out.println(&quot;已经实例化了...&quot;);        }        return instance;    }    public void getName() {        System.out.println(&quot;我是总统：川建国&quot;);    }}</code></pre><pre><code>public class Client {    public static void main(String[] args) {        President zt = President.getInstance();        zt.getName();        President zt_1 = President.getInstance();        zt_1.getName();        if (zt == zt_1) {            System.out.println(&quot;是同一个人&quot;);        } else {            System.out.println(&quot;不是同一个人&quot;);        }    }}</code></pre><p><strong>运行结果</strong></p><pre><code>选举一个总统我是美国总统：川建国已经实例化一次了，不能再实例化了我是美国总统：川建国是同一个人</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-开篇</title>
      <link href="/2019/10/19/she-ji-mo-shi-kai-pian/"/>
      <url>/2019/10/19/she-ji-mo-shi-kai-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式学习笔记（Java版）"><a href="#设计模式学习笔记（Java版）" class="headerlink" title="设计模式学习笔记（Java版）"></a>设计模式学习笔记（Java版）</h2><h3 id="ywy学习链接yuy"><a href="#ywy学习链接yuy" class="headerlink" title="ywy学习链接yuy"></a><a href="http://c.biancheng.net/view/1317.html" target="_blank" rel="noopener">ywy学习链接yuy</a></h3><h3 id="设计模式的概念与意义"><a href="#设计模式的概念与意义" class="headerlink" title="设计模式的概念与意义"></a>设计模式的概念与意义</h3><p><strong>1.软件设计模式的概念</strong></p><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><p><strong>2. 学习设计模式的意义</strong></p><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强</li></ul><p><em>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</em></p><h3 id="软件设计模式的基本要素"><a href="#软件设计模式的基本要素" class="headerlink" title="软件设计模式的基本要素"></a>软件设计模式的基本要素</h3><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p><ol><li>模式名称<blockquote><p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。==<strong>模式名称</strong>==（<strong>PatternName</strong>）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p></blockquote></li><li>问题<blockquote><p>==<strong>问题</strong>==（<strong>Problem</strong>）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p></blockquote></li><li>解决方案<blockquote><p>模式问题的 ==<strong>解决方案</strong>==（<strong>Solution</strong>）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p></blockquote></li><li>效果<blockquote><p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些 ==<strong>效果</strong>==（<strong>Consequence</strong>）对理解和评价这些模式有很大的帮助。</p></blockquote><h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3>总共23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。以及另一类设计模式：J2EE 设计模式。<h4 id="一、创建型模式"><a href="#一、创建型模式" class="headerlink" title="一、创建型模式"></a>一、创建型模式</h4></li></ol><p><em>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</em></p><blockquote><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产</p></blockquote><ul><li><strong><em>工厂（Factory）模式：</em></strong> 定义一个用于创建产品的接口，由子类决定生产什么产品</li><li><strong><em>抽象工厂（Abstract Factory）模式：</em></strong> 提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品</li><li><strong><em>单例（Singleton）模式：</em></strong> 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式</li><li><strong><em>建造者（Builder）模式：</em></strong> 将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象</li><li><strong><em>原型（Prototype）模式：</em></strong> 将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例</li></ul><p><em>以上 5 种创建型模式，除了==工厂方法模式==属于类创建型模式，其他的全部属于对象创建型模式</em></p><h4 id="二、结构型模式"><a href="#二、结构型模式" class="headerlink" title="二、结构型模式"></a>二、结构型模式</h4><p><em>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</em></p><blockquote><p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象</p></blockquote><ul><li><strong><em>适配器（Adapter）模式：</em></strong> 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作</li><li><strong><em>桥接（Bridge）模式：</em></strong> 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度</li><li><strong><em>组合（Composite）模式：</em></strong> 将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性</li><li><strong><em>装饰器（Decorator）模式：</em></strong> 动态的给对象增加一些职责，即增加其额外的功能</li><li><strong><em>外观（Facade）模式：</em></strong> 为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问</li><li><strong><em>享元模式（Flyweight）：</em></strong> 运用共享技术来有效地支持大量细粒度对象的复用</li><li><strong><em>代理（Proxy）模式：</em></strong> 为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性</li><li>==<strong><em>过滤器（Filter、Criteria）模式：</em></strong>==</li></ul><p><em>以上 7 种结构型模式，除了==适配器模式==分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式</em></p><h4 id="三、行为型模式"><a href="#三、行为型模式" class="headerlink" title="三、行为型模式"></a>三、行为型模式</h4><p><em>这些设计模式特别关注对象之间的通信</em></p><blockquote><p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配</p><p>==行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为==。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性</p></blockquote><ul><li><strong><em>职责链（Chain of Responsibility）模式：</em></strong> 把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合</li><li><strong><em>命令（Command）模式：</em></strong> 将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开</li><li><strong><em>解释器（Interpreter）模式：</em></strong> 提供如何定义语言的文法，以及对语言句子的解释方法，即解释器</li><li><strong><em>迭代器（Iterator）模式：</em></strong> 提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示</li><li><strong><em>中介者（Mediator）模式：</em></strong> 定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解</li><li><strong><em>备忘录（Memento）模式：</em></strong> 在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它</li><li><strong><em>观察者（Observer）模式:</em></strong> 多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为</li><li><strong><em>状态（State）模式：</em></strong> 允许一个对象在其内部状态发生改变时改变其行为能力</li><li><strong><em>策略（Strategy）模式：</em></strong> 定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户</li><li><strong><em>模板方法（TemplateMethod）模式：</em></strong> 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</li><li><strong><em>访问者（Visitor）模式：</em></strong> 在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问</li><li>==<strong><em>空对象（Null Object）模式：</em></strong>==</li></ul><p><em>以上 11 种行为型模式，除了==模板方法模式和解释器模式==是类行为型模式，其他的全部属于对象行为型模式</em></p><h4 id="四、J2EE模式"><a href="#四、J2EE模式" class="headerlink" title="四、J2EE模式"></a>四、J2EE模式</h4><p><em>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的</em></p><ul><li><strong><em>MVC （MVC）模式：</em></strong></li><li><strong><em>业务代表（Business Delegate）模式：</em></strong></li><li><strong><em>组合实体（Composite Entity）模式：</em></strong></li><li><strong><em>数据访问对象（Data Access Object）模式：</em></strong></li><li><strong><em>前端控制器（Front Controller）模式：</em></strong></li><li><strong><em>拦截过滤器（Intercepting Filter）模式：</em></strong></li><li><strong><em>服务定位器（Service Locator）模式：</em></strong></li><li><strong><em>传输对象（Transfer Object）模式：</em></strong><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3></li></ul><p><strong><em>1、开闭原则（Open Close Principle）</em></strong></p><blockquote><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p></blockquote><p><strong><em>2、里氏代换原则（Liskov Substitution Principle）</em></strong></p><blockquote><p>里氏代换原则是面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p></blockquote><p><strong><em>3、依赖倒转原则（Dependence Inversion Principle）</em></strong></p><blockquote><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p></blockquote><p><strong><em>4、接口隔离原则（Interface Segregation Principle）</em></strong></p><blockquote><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p></blockquote><p><strong><em>5、迪米特法则，又称最少知道原则（Demeter Principle）</em></strong></p><blockquote><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></blockquote><p><strong><em>6、合成复用原则（Composite Reuse Principle）</em></strong></p><blockquote><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p></blockquote><hr><h3 id="设计模式原则详解↑↓"><a href="#设计模式原则详解↑↓" class="headerlink" title="设计模式原则详解↑↓"></a>设计模式原则详解↑↓</h3><h4 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1. 开闭原则"></a>1. 开闭原则</h4><p><em>定义：软件实体应当对扩展开放，对修改关闭，这就是开闭原则的经典定义</em></p><blockquote><p>软件实体包括：</p><ul><li>项目中划分出的模块</li><li>类与接口</li><li>方法</li></ul></blockquote><p>==<em>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求</em>==</p><p><strong>1. 开闭原则的作用</strong></p><p><em>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：</em></p><blockquote><p><strong>1. 对软件测试的影响</strong></p><blockquote><p>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行</p></blockquote><p><strong>2. 可提高代码的可复用性</strong></p><blockquote><p>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性</p></blockquote><p><strong>3. 可以提高软件的可维护性</strong></p><blockquote><p>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护</p></blockquote></blockquote><p><strong>2. 开闭原则的实现方法</strong></p><p><em>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中</em></p><blockquote><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p></blockquote><h4 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2.里氏替换原则"></a>2.里氏替换原则</h4><p><em>继承必须确保超类所拥有的性质在子类中仍然成立</em></p><blockquote><p>里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范</p></blockquote><p><strong>1. 里氏替换原则的作用</strong></p><blockquote><ul><li>里氏替换原则是实现开闭原则的重要方式之一</li><li>它克服了继承中重写父类造成的可复用性变差的缺点</li><li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性</li></ul></blockquote><p><strong>2. 里氏替换原则的实现方法</strong></p><p><em>==里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。== 也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</em></p><blockquote><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大</p><p>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系</p><p>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等</p></blockquote><p><strong>【例子】里氏替换原则在“几维鸟不是鸟”实例中的应用</strong></p><blockquote><p>分析：鸟一般都会飞行，如燕子的飞行速度大概是每小时 120 千米。但是新西兰的几维鸟由于翅膀退化无法飞行。假如要设计一个实例，计算这两种鸟飞行 300 千米要花费的时间。显然，拿燕子来测试这段代码，结果正确，能计算出所需要的时间；但拿几维鸟来测试，结果会发生“除零异常”或是“无穷大”，明显不符合预期，其类图如图所示<br><img src="https://note.youdao.com/yws/res/2171/WEBRESOURCEb0b7e4aa2855e4160fc5ec48e5bec699" alt="i.jpg"></p></blockquote><p><strong>程序代码如下：</strong></p><pre><code>public class Client {    public static void main(String[] args) {        Bird swallow = new Swallow();        Bird brownKiwi = new BrownKiwi();        swallow.setSpeed(120);        brownKiwi.setSpeed(120);        System.out.println(&quot;如果飞行300公里：&quot;);        try {            System.out.println(&quot;燕子将飞行&quot; + swallow.getFlyTime(300) + &quot;小时.&quot;);            System.out.println(&quot;几维鸟将飞行&quot; + brownKiwi.getFlyTime(300) + &quot;小时。&quot;);        } catch (Exception err) {            System.out.println(&quot;发生错误了!&quot;);        }    }}//鸟类class Bird {    double flySpeed;    public void setSpeed(double speed) {        flySpeed = speed;    }    public double getFlyTime(double distance) {        return (distance / flySpeed);    }}//燕子类class Swallow extends Bird {}//几维鸟类class BrownKiwi extends Bird {    public void setSpeed(double speed) {        flySpeed = 0;    }}</code></pre><p><strong>程序的运行结果如下：</strong></p><pre><code>如果飞行300公里：燕子将飞行2.5小时.几维鸟将飞行Infinity小时。</code></pre><p>程序运行’错误’的原因是：几维鸟类重写了鸟类的 setSpeed(double speed) 方法，这违背了里氏替换原则。正确的做法是：取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，它们都有奔跑的能力。几维鸟的飞行速度虽然为0，但奔跑速度不为 0，可以计算出其奔跑 300 千米所要花费的时间<br><img src="https://note.youdao.com/yws/res/2187/WEBRESOURCEc6636816a2809bdedea10b99879e900e" alt="j.jpg"></p><h4 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3.依赖倒置原则"></a>3.依赖倒置原则</h4><p><em>依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：==要面向接口编程，不要面向实现编程==</em></p><p><strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合</strong></p><blockquote><p>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类</p><p>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成</p></blockquote><p><strong>1.依赖倒置原则的作用</strong></p><blockquote><ul><li>依赖倒置原则可以降低类间的耦合性</li><li>依赖倒置原则可以提高系统的稳定性</li><li>依赖倒置原则可以减少并行开发引起的风险</li><li>依赖倒置原则可以提高代码的可读性和可维护性</li></ul></blockquote><p><strong>2.依赖倒置原则的实现方法</strong></p><p>==依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性==，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。</p><blockquote><ol><li>每个类尽量提供接口或抽象类，或者两者都具备。</li><li>变量的声明类型尽量是接口或者是抽象类。</li><li>任何类都不应该从具体类派生。</li><li>使用继承时尽量遵循里氏替换原则</li></ol></blockquote><p><strong>【例1】依赖倒置原则在“顾客购物程序”中的应用</strong><br><img src="https://note.youdao.com/yws/res/2214/WEBRESOURCE95ac53001ab5f0f2fc0212d6f7d47157" alt="k.jpg"><br><strong>程序代码如下：</strong></p><pre><code>public class Client_shop {    public static void main(String[] args) {        Customer yu = new Customer();        System.out.println(&quot;顾客购买以下商品：&quot;);        yu.shopping(new ShaoGuanShop());        yu.shopping(new WuYuanShop());    }}//商店interface Shop {    public String sell(); //卖}//韶关网店class ShaoGuanShop implements Shop {    public String sell() {        return &quot;韶关土特产：香菇、木耳……&quot;;    }}//婺源网店class WuYuanShop implements Shop {    public String sell() {        return &quot;婺源土特产：绿茶、酒糟鱼……&quot;;    }}//顾客class Customer {    public void shopping(Shop shop) {        //购物        System.out.println(shop.sell());    }}</code></pre><p><strong>程序运行结果如下：</strong></p><pre><code>顾客购买以下商品：韶关土特产：香菇、木耳……婺源土特产：绿茶、酒糟鱼……</code></pre><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="==单一职责原则=="></a>==单一职责原则==</h4><p><em>单一职责原则又称单一功能原则。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</em></p><p><strong>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</strong></p><blockquote><ol><li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力</li><li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费</li></ol></blockquote><p><strong>1. 单一职责原则的优点</strong></p><p><em>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点</em></p><blockquote><ul><li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多</li><li>提高类的可读性。复杂性降低，自然其可读性会提高</li><li>提高系统的可维护性。可读性提高，那自然更容易维护了</li><li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响</li></ul></blockquote><p><strong>2. 单一职责原则的实现方法</strong></p><p><strong>【例子】大学学生工作管理程序</strong><br><img src="https://note.youdao.com/yws/res/2246/WEBRESOURCE9046e1cd669709587f9a653cb1dac1e0" alt="l.jpg"></p><h4 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4.接口隔离原则"></a>4.接口隔离原则</h4><p><em>接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法</em></p><p><strong>1. 定义</strong></p><blockquote><ol><li>客户端不应该被迫依赖于它不使用的方法；</li><li>一个类对另一个类的依赖应该建立在最小的接口上↓↓</li></ol></blockquote><blockquote><p><strong>↑要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用</strong></p></blockquote><p><em>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</em></p><blockquote><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建</li></ul></blockquote><p><strong>2. 接口隔离原则的优点</strong></p><p><em>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：</em></p><blockquote><ol><li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性</li><li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性</li><li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险</li><li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义</li><li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码</li></ol></blockquote><p><strong>3. 接口隔离原则的实现方法</strong></p><p><em>在具体应用接口隔离原则时，应该根据以下几个规则来衡量：</em></p><blockquote><ul><li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑</li><li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法</li><li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情</li></ul></blockquote><p><strong>【例子】学生成绩管理程序</strong><br><img src="https://note.youdao.com/yws/res/2291/WEBRESOURCE9e46465b02babadf8e94e080ce81ac43" alt="m.jpg"><br><strong>程序代码如下：</strong></p><pre><code>public class Client_score {    public static void main(String[] args) {        InputModule input =StuScoreList.getInputModule();        CountModule count =StuScoreList.getCountModule();        PrintModule print =StuScoreList.getPrintModule();        input.insert();        count.countTotalScore();        print.printStuInfo();        input.delete();    }}//输入模块接口interface InputModule {    void insert();    void delete();    void modify();}//统计模块接口interface CountModule {    void countTotalScore();    void countAverage();}//打印模块接口interface PrintModule {    void printStuInfo();    void queryStuInfo();}//实现类class StuScoreList implements InputModule, CountModule, PrintModule {    private StuScoreList() {    }    public static InputModule getInputModule() {        return new StuScoreList();    }    public static CountModule getCountModule() {        return new StuScoreList();    }    public static PrintModule getPrintModule() {        return new StuScoreList();    }    @Override    public void insert() {        System.out.println(&quot;输入模块的insert()方法被调用！&quot;);    }    @Override    public void delete() {        System.out.println(&quot;输入模块的delete()方法被调用！&quot;);    }    @Override    public void modify() {        System.out.println(&quot;输入模块的modify()方法被调用！&quot;);    }    @Override    public void countTotalScore() {        System.out.println(&quot;统计模块的countTotalScore()方法被调用！&quot;);    }    @Override    public void countAverage() {        System.out.println(&quot;统计模块的countAverage()方法被调用！&quot;);    }    @Override    public void printStuInfo() {        System.out.println(&quot;打印模块的printStuInfo()方法被调用！&quot;);    }    @Override    public void queryStuInfo() {        System.out.println(&quot;打印模块的queryStuInfo()方法被调用！&quot;);    }}</code></pre><p><strong>程序运行结果如下：</strong></p><pre><code>输入模块的insert()方法被调用！统计模块的countTotalScore()方法被调用！打印模块的printStuInfo()方法被调用！输入模块的delete()方法被调用！</code></pre><h4 id="5-迪米特法则"><a href="#5-迪米特法则" class="headerlink" title="5.迪米特法则"></a>5.迪米特法则</h4><p><em>迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性</em></p><blockquote><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法</p></blockquote><p><strong>1. 迪米特法则的优点</strong></p><p><em>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点</em></p><blockquote><ol><li>降低了类之间的耦合度，提高了模块的相对独立性。</li><li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性</li></ol></blockquote><p><em>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</em></p><p><strong>2. 迪米特法则的实现方法</strong></p><p><em>从迪米特法则的定义和特点可知，它强调以下两点：</em></p><blockquote><ol><li>从依赖者的角度来说，只依赖应该依赖的对象。</li><li>从被依赖者的角度说，只暴露应该暴露的方法</li></ol></blockquote><p><em>所以，在运用迪米特法则时要注意以下 6 点:</em></p><blockquote><ol><li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li><li>在类的结构设计上，尽量降低类成员的访问权限。</li><li>在类的设计上，优先考虑将一个类设置成不变类。</li><li>在对其他类的引用上，将引用其他对象的次数降到最低。</li><li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</li><li>谨慎使用序列化（Serializable）功能。</li></ol></blockquote><p><strong>【例子】明星与经纪人的关系实例</strong></p><p><em>分析：明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如与粉丝的见面会，与媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则，其类图如图所示：</em><br><img src="https://note.youdao.com/yws/res/2326/WEBRESOURCEce99ebf001f38b2cb8dafc7bcc135b9a" alt="n.jpg"><br><strong>程序代码如下：</strong></p><pre><code>public class Client_star {    public static void main(String[] args) {        Agent agent = new Agent();        agent.setMyStar(new Star(&quot;YU&quot;));        agent.setMyFans(new Fans(&quot;YS&quot;));        agent.setMyCompany(new Company(&quot;ywy_company&quot;));        agent.meeting();        agent.business();    }}//经纪人@Setterclass Agent {    private Star myStar;    private Fans myFans;    private Company myCompany;    public void meeting() {        System.out.println(myFans.getName() + &quot;与明星&quot; + myStar.getName() + &quot;见面了。&quot;);    }    public void business() {        System.out.println(myCompany.getName() + &quot;与明星&quot; + myStar.getName() + &quot;洽淡业务。&quot;);    }}//明星@Getter@AllArgsConstructorclass Star {    private String name;}//粉丝@Getter@AllArgsConstructorclass Fans {    private String name;}//媒体公司@Getter@AllArgsConstructorclass Company {    private String name;}</code></pre><p><strong>程序运行结果如下：</strong></p><pre><code>YS与明星YU见面了。ywy_company与明星YU洽淡业务。</code></pre><h4 id="6-合成复用原则"><a href="#6-合成复用原则" class="headerlink" title="6.合成复用原则"></a>6.合成复用原则</h4><p><em>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</em></p><p><em>==如果要使用继承关系，则必须严格遵循里氏替换原则==。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范</em></p><p><strong>1.合成复用原则的重要性</strong></p><p><em>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</em></p><blockquote><ol><li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用</li><li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护</li><li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化</li></ol></blockquote><p><em>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</em></p><blockquote><ol><li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用</li><li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口</li><li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象</li></ol></blockquote><p><strong>2.合成复用原则的实现方法</strong></p><p><em>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用</em></p><p><strong>【例子】汽车分类管理程序</strong></p><p><em>继承关系实现汽车分类的类图：</em></p><blockquote><p>分析：汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多<br><img src="https://note.youdao.com/yws/res/2361/WEBRESOURCE8da802979a817c48eecca0c4322b8061" alt="o.jpg"></p></blockquote><p><em>组合关系实现汽车分类的类图：</em></p><blockquote><p>从上图可以看出用继承关系实现会产生很多子类，而且增加新的“动力源”或者增加新的“颜色”都要修改源代码，这违背了开闭原则，显然不可取<br><img src="https://note.youdao.com/yws/res/2366/WEBRESOURCE2c5dab2f41f12cf6f5d94effd3291c85" alt="p.jpg"></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em>上面一共介绍了 7 种设计原则，它们分别为==开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则以及合成复用原则==</em></p><p><strong><em>这 7 种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。</em></strong></p><blockquote><ul><li>其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；</li><li>里氏替换原则告诉我们不要破坏继承体系；</li><li>依赖倒置原则告诉我们要面向接口编程；</li><li>单一职责原则告诉我们实现类要职责单一；</li><li>接口隔离原则告诉我们在设计接口的时候要精简单一；</li><li>迪米特法则告诉我们要降低耦合度；</li><li>合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看懂UML类图和时序图</title>
      <link href="/2019/10/19/kan-dong-uml-lei-tu-he-shi-xu-tu/"/>
      <url>/2019/10/19/kan-dong-uml-lei-tu-he-shi-xu-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="看懂UML类图和时序图"><a href="#看懂UML类图和时序图" class="headerlink" title="看懂UML类图和时序图"></a>看懂UML类图和时序图</h2><p>图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP<br><strong><em>==<a href https: design-patterns.readthedocs.io zh_cn latest read_uml.html#dependency"">原文链接</a>==</em></strong></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>请看以下类图，类之间的关系是我们需要关注的<br><img src="https://note.youdao.com/yws/res/1764/WEBRESOURCEd7aa34f602e661b405c479207b2d07c3" alt="a.png"></p><ul><li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类</abstract></li><li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示</li><li>小汽车与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示</li><li>学生与身份证之间是关联关系，使用一根实线表示</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示</li></ul><p>下面我们将介绍这六种关系：</p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><h4 id="泛化关系（generalization）"><a href="#泛化关系（generalization）" class="headerlink" title="泛化关系（generalization）"></a>泛化关系（generalization）</h4><p><em>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)</em></p><p>继承关系为is-a的关系；两个对象如果用is-a来表示，就是继承关系：<br><br>eg:自行车是车、猫是动物</p><p>泛化关系用一条带空心箭头直接表示，如下图（A继承自B）：</p><p><img src="https://note.youdao.com/yws/res/1829/WEBRESOURCE148477c37f9a63f3603b585a485ea709" alt="b.png"></p><p>eg：汽车在实现中有实现，可用汽车定义具体的对象，汽车与SUV之间为泛化关系：</p><p><img src="https://note.youdao.com/yws/res/1841/WEBRESOURCE5803b9647efc3ac6c42eb455984bde54" alt="c.png"></p><p>注：最终代码中，泛化关系表现为继承非抽象类</p><h4 id="实现关系（realize）"><a href="#实现关系（realize）" class="headerlink" title="实现关系（realize）"></a>实现关系（realize）</h4><p>实现关系用一条带空心箭头的虚线表示</p><p>eg：“车”为一个抽象概念，在现实中并无法用来定义对象；只有指明具体的子类（汽车还是自行车）才可以用来定义对象（“车”这个类在C++中用抽象类表示，在Java中用接口这个概念更容易理解）</p><p><img src="https://note.youdao.com/yws/res/1869/WEBRESOURCEdf13ee75feaf2f41f3f900fc86c67ca2" alt="d.png"></p><p>注：最终代码中，实现关系表现为继承抽象类</p><h4 id="聚合关系（aggregation）"><a href="#聚合关系（aggregation）" class="headerlink" title="聚合关系（aggregation）"></a>聚合关系（aggregation）</h4><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p><p><img src="https://note.youdao.com/yws/res/1879/WEBRESOURCE280a26be7a452159b45d144bbf836566" alt="e.png"></p><p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p><p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p><h4 id="组合关系（composition）"><a href="#组合关系（composition）" class="headerlink" title="组合关系（composition）"></a>组合关系（composition）</h4><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p><p><img src="https://note.youdao.com/yws/res/1887/WEBRESOURCE35a42aa703b201fe82ded5f226d3e1c3" alt="f.png"></p><p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p><p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p><h4 id="关联关系（association）"><a href="#关联关系（association）" class="headerlink" title="关联关系（association）"></a>关联关系（association）</h4><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p><p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p><p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p><p><img src="https://note.youdao.com/yws/res/1896/WEBRESOURCE86c446294a9ef91ee318606dee5f7caa" alt="g.png"></p><p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p><h4 id="依赖关系（dependency）"><a href="#依赖关系（dependency）" class="headerlink" title="依赖关系（dependency）"></a>依赖关系（dependency）</h4><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p><p><img src="https://note.youdao.com/yws/res/1903/WEBRESOURCE6ae840efe6108ce0dd5962eccfd04c80" alt="h.png"></p><p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化；依赖关系也可能发生变化；</p><p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p><p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p><p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p><p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二零一七年终总结</title>
      <link href="/2018/01/22/2017-conclusion/2017-conclusion/"/>
      <url>/2018/01/22/2017-conclusion/2017-conclusion/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=407679465&auto=1&height=66"></iframe></div><p>时间过得很快，终于等到放寒假了，虽然这几个月没有课，天天和放假也没啥区别呢。细数一下，还有5个月就要毕业了吧，大一刚入学的场景却依然清楚地记得，转眼间就成了老学长了呢。闲来无事，随便写写，有感而发，无病呻吟而已。</p><h1 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h1><hr><p>回顾我的2017，没做什么事，令我能记得就3件大事吧：</p><ul><li>失恋ing</li><li>ACM退役</li><li>顺利保研</li></ul><p><strong>第一件事</strong>就不想过多回忆了，<strong>2014.12.13 ~ 2017.03.01</strong>，曲终人散。<br><img src="749826.jpg" alt><br>最后引用《我的少女时代》里的一句话吧。</p><blockquote><p>每人都有一颗林真心，遇见是最美好的小幸运，谢谢你出现在我的青春里。</p></blockquote><p><img src="1.jpg" alt><br><strong>第二件事</strong>其实也是黯淡退出吧，大三下开始课程繁忙，也就没怎么训练了，再加上暑假考驾照，于是乎就退役了。回顾三年来，从大一入学时电脑都没怎么碰过的小白，到现在算法也略有所知，也是付出过很大的努力吧，毕竟当年每天刷题，为了一个bug而熬夜到凌晨。最后也算是混了个水水的金牌，奖项不算耀眼。但最重要的是从这段经历中，学到了拼搏、坚持的一种精神，这对以后的研究生涯想必也有很大帮助。<br><img src="2.jpg" alt><br><strong>第三件事</strong>也是意料之中吧，没有什么波折。纠结了很多，虽然<strong>专业第一</strong>，但是最后还是选择保了本校。要问原因，也许是校园情怀，也许是导师人很好，也许是为了方便更早研究，也许就是懒吧。现在尘埃落定，靠人靠天不如靠自己，继续努力吧。<br><img src="3.jpg" alt></p><p>过去的一年，学业未有很大长进，看着同学们整页的4.0绩点，心里倒也没有什么不平衡了。下学期保了研之后选了一门研究生的文本挖掘课，也马马虎虎读了几十篇论文，也算是对自然语言处理和深度学习入了个门，最后的presentation做的还算满意。</p><h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><hr><p>今年最重要的大事莫过于毕业论文了，因为以后要做的方向是句法分析，所以导师给我的毕业论文安排的就是《基于循环神经网络的成分句法分析》。虽然说是基于ACL2013的一篇论文改编的，但是目前为止，我还没有发现有人做和这个完全一样的。也许最后写的好的话可以直接发paper了。</p><p>但是目前基本的框架还没完全搭建起来吧，代码还不是很熟练，现在只写了一个最基础的动态规划+RNN。最近有如下计划：</p><ul><li>准备试一下动态规划+LSTM。</li><li>然后动态规划扩增一个维度，用来保存左右结点的head结点。</li><li>如果这个写好了，就可以和我github找到的PCFG+CYK代码融合了，准备加上每个结点的POS。</li><li>最后加入预训练词向量应该就基本完成了。</li></ul><p>希望能顺利毕业吧，前一段时间一直对一些实现细节有些困惑，代码还写错了，还以为理论错了。也不知道最后出来的结果会怎么样，希望能不错。</p><p>生活方面，最近半年越来越懒了，极少出门，睡得晚，起的也晚。最近买了把尤克里里，也算是陶冶陶冶情操吧，不至于一直盯着电脑。现在也小有长进，能弹一点点了。</p><p>现在能聊天的人越来越少了，QQ微信放那一天也不一定会有人来找，就算有人也多半是咨询问题的，等一个可以交心的人吧。有时我也想过，我是不是太像中央空调了，对所有人都这么有耐心，到头来却还是一个人，付出那么多最后还是一无所有。<br><img src="4.jpg" alt><br>最后还是祝自己2018年顺利吧，希望毕业顺利，研究生涯小有收获，最后等一个有缘人吧。</p><blockquote><p>我遇见谁，会有怎样的对白。<br>我等的人，她在多远的未来。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
