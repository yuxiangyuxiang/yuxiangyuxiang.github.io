<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式-建造者模式(up)</title>
      <link href="/2019/10/23/she-ji-mo-shi-jian-zao-zhe-mo-shi-up/"/>
      <url>/2019/10/23/she-ji-mo-shi-jian-zao-zhe-mo-shi-up/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式之建造者模式-up"><a href="#设计模式之建造者模式-up" class="headerlink" title="设计模式之建造者模式(up)"></a>设计模式之建造者模式(up)</h2><h4 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h4><p><em>==将一个复杂对象的构建和它的表示分离，使同样的构建构成可以创建不同的表示==。建造者模式属于创建型模型，从定义可以看出，建造者模式适用于一个复杂的对象的建造，而且在建造的过程中，客户端不必知道产品内部组成的细节</em></p><h4 id="二、使用场景"><a href="#二、使用场景" class="headerlink" title="二、使用场景"></a>二、使用场景</h4><p>建造者模式适用于一个具有较多的零件的复杂产品的创建过程，由于需求的变化，组成这个复杂产品的零件经常会发生变化，但是他们的组合方式确是相对稳定。建造者模式适用于以下几种场景：</p><blockquote><ol><li>相同的方法，不同的执行顺序，产生不同的结果时</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的结果又不同</li><li>产品类非常复杂，或者产品类中的调用顺序不同产生不同的作用</li><li>当初始化一个对象特别复杂，参数多，而且很多参数都具有默认值时</li></ol></blockquote><h4 id="三、模式结构"><a href="#三、模式结构" class="headerlink" title="三、模式结构"></a>三、模式结构</h4><p>建造者模式主要有四个角色：</p><blockquote><ol><li>Product：要创建的产品类对象</li><li>Builder: 建造者的抽象类，规范产品对象的各个组成部分的建造，一般由子类实现具体的建造过程</li><li>ConcreteBuilder：具体的Builder类，根据不同的业务逻辑具体化对象的各个组成部分的创建</li><li>Director：调用具体的建造者来创建对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建</li></ol></blockquote><h4 id="四、模拟场景"><a href="#四、模拟场景" class="headerlink" title="四、模拟场景"></a>四、模拟场景</h4><p><strong><em>【计算机的组装过程】我们以计算机的组装过程为例，使用建造者模式，首先我们简化计算机的组装过程，这里只考虑三个主要部分，分别为主板、显示器和操作系统</em></strong></p><ol><li><p><strong>定义产品类</strong></p><pre><code>@Datapublic class MacBook { private String mBoard; private String mDisplay; private String mOs; @Override public String toString() {     return &quot;MacBook{&quot; +             &quot;mBoard=&#39;&quot; + mBoard + &#39;\&#39;&#39; +             &quot;, mDisplay=&#39;&quot; + mDisplay + &#39;\&#39;&#39; +             &quot;, mOs=&#39;&quot; + mOs + &#39;\&#39;&#39; +             &#39;}&#39;; }}</code></pre></li></ol><pre><code>2. **构建抽象的Builder类**-抽象的Builder类主要是建造产品的各个组成部分</code></pre><p>/**</p><ul><li><p>抽象Builder类</p></li><li><p>建造MacBook产品的各个组成部分，并返回MacBook产品</p></li><li><p>/<br>public abstract class Builder {<br>  //设置主板<br>  public abstract void builderBoard(String board);<br>  //设置显示器<br>  public abstract void builderDisplay(String display);<br>  //设置操作系统<br>  public abstract void builderOs(String os);<br>  //创建Computer<br>  public abstract MacBook getComputer();<br>}</p><pre><code>3. **具体的Builder类**-具体实例化各个部分的创建</code></pre><p>/**</p></li><li><p>具体builder类</p></li><li><p>具体实例化各个部分的创建</p></li><li><p>/<br>public class MacBookBuilder extends Builder {</p><p>  private MacBook macBook = new MacBook();</p><p>  @Override<br>  public void builderBoard(String board) {</p><pre><code>  macBook.setMBoard(board);</code></pre><p>  }</p><p>  @Override<br>  public void builderDisplay(String display) {</p><pre><code>  macBook.setMDisplay(display);</code></pre><p>  }</p><p>  @Override<br>  public void builderOs(String os) {</p><pre><code>  macBook.setMOs(os);</code></pre><p>  }</p><p>  @Override<br>  public MacBook getComputer() {</p><pre><code>  return macBook;</code></pre><p>  }<br>}</p><pre><code>4. **Director类**-是调用具体的builder构建对象的各个部分，Director类起到封装作用，避免高层模块深入到建造者内部的实现类</code></pre><p>/**</p></li><li><p>Director类的主要作用是调用具体的builder，</p></li><li><p>来构建对象的各个部分，Director类起到封装作用，避免高层模块深入到建造者内部的实现类</p></li><li><p>/<br>public class Director {</p><p>  Builder builder = null;</p><p>  public Director(Builder builder) {</p><pre><code>  this.builder = builder;</code></pre><p>  }</p><p>  public void construct(String board, String display, String os) {</p><pre><code>  builder.builderBoard(board);  builder.builderDisplay(display);  builder.builderOs(os);</code></pre><p>  }<br>}</p><pre><code>5. **客户端**</code></pre><p>public class Client {<br>  public static void main(String[] args) {</p><pre><code>  Builder builder = new MacBookBuilder();  Director director = new Director(builder);  director.construct(&quot;英特尔主板&quot;,&quot;Retina显示器&quot;,&quot;Mac OS X系统&quot;);  System.out.println(builder.getComputer().toString());</code></pre><p>  }<br>}</p><pre><code>**从上面可以看出，产品是通过具体Builder类构建的，Director封装了构建复杂产品对象的过程，对外隐藏了构建细节。Builder和Director一起将一个复杂的对象的构建与表示分离**</code></pre></li></ul><p><em>在实际开发中，Director常常被忽略，而是直接通过Builder的方式链式组装，同时，Builder是一个静态内部类</em></p><pre><code>/** * 实际在开发中，Director常常被忽略，而是直接通过Builder的方式链式组装， * 同时，Builder是一个静态内部类 */@Datapublic class ThinkPad {    private String board;    private String display;    private String os;    private ThinkPad(Builder builder) {        this.board = builder.board;        this.display = builder.display;        this.os = builder.os;    }    static class Builder {        private String board;        private String display;        private String os;        public Builder setBoard(String board) {            this.board = board;            return this;        }        public Builder setDisplay(String display) {            this.display = display;            return this;        }        public Builder setOs(String os) {            this.os = os;            return this;        }        public ThinkPad builder() {            return new ThinkPad(this);        }    }}</code></pre><p><em>客户端通过链式调用组装方法</em></p><pre><code>public class Client {    public static void main(String[] args) {        ThinkPad thinkPad = new ThinkPad.Builder()                .setBoard(&quot;Intel&quot;)                .setDisplay(&quot;JDI&quot;)                .setOs(&quot;Windows 10&quot;)                .builder();        System.out.println(&quot;ThinkPad: board = &quot; + thinkPad.getBoard()                + &quot;, display = &quot; + thinkPad.getDisplay() + &quot;, Os = &quot; + thinkPad.getOs());    }}</code></pre><p><strong>【共享单车例子】</strong></p><ol><li><strong>产品类</strong><pre><code>/*** 产品类*/@Datapublic class Bike { private IFrame frame; private ISeat seat; private ITire tire;}</code></pre></li><li><strong>组装零件类接口</strong><pre><code>/*** 车架*/public interface IFrame { void frame();}/*** 车座*/public interface ISeat { void seat();}/*** 车胎*/public interface ITire { void tire();}</code></pre></li><li><strong>组装零件具体实现</strong><pre><code>//摩拜零件实现/*** 合金车架*/public class AlloyFrame implements IFrame { @Override public void frame() {     System.out.println(&quot;合金车架-Alloy&quot;); }}/*** 真皮车座*/public class DermisSeat implements ISeat { @Override public void seat() {     System.out.println(&quot;真皮车座-Dermis&quot;); }}/*** 实心车胎*/public class SolidTire implements ITire { @Override public void tire() {     System.out.println(&quot;实心车胎-Solid&quot;); }}</code></pre></li></ol><p>//ofo 零件实现类<br>/**</p><ul><li><p>碳质车架</p></li><li><p>/<br>public class CarbonFrame implements IFrame {<br>  @Override<br>  public void frame() {</p><pre><code>  System.out.println(&quot;碳质车架-Carbon&quot;);</code></pre><p>  }<br>}<br>/**</p></li><li><p>橡胶车座</p></li><li><p>/<br>public class RubberSeat implements ISeat {<br>  @Override<br>  public void seat() {</p><pre><code>  System.out.println(&quot;橡胶车座-Rubber&quot;);</code></pre><p>  }<br>}<br>/**</p></li><li><p>空心车胎</p></li><li><p>/<br>public class InflateTire implements ITire {<br>  @Override<br>  public void tire() {</p><pre><code>  System.out.println(&quot;空心车胎-Inflate&quot;);</code></pre><p>  }<br>}</p><pre><code>4. **抽象Builder类**</code></pre><p>/**</p></li><li><p>抽象 builder 类</p></li><li><p>/<br>public abstract class Builder {<br>  abstract void builderFrame();<br>  abstract void builderSeat();<br>  abstract void builderTire();<br>  abstract Bike createBike();<br>}</p><pre><code>5. **具体Builder类**</code></pre><p>/**</p></li><li><p>具体 builder 类-摩拜</p></li><li><p>/<br>public class MoBikeBuilder extends Builder {</p><p>  private Bike mBike = new Bike();</p><p>  @Override<br>  void builderFrame() {</p><pre><code>  mBike.setFrame(new AlloyFrame());</code></pre><p>  }</p><p>  @Override<br>  void builderSeat() {</p><pre><code>  mBike.setSeat(new DermisSeat());</code></pre><p>  }</p><p>  @Override<br>  void builderTire() {</p><pre><code>  mBike.setTire(new SolidTire());</code></pre><p>  }</p><p>  @Override<br>  Bike createBike() {</p><pre><code>  return mBike;</code></pre><p>  }<br>}</p></li></ul><p>/**</p><ul><li><p>具体 builder 类-ofo</p></li><li><p>/<br>public class OfoBuilder extends Builder {</p><p>  private Bike mBike = new Bike();</p><p>  @Override<br>  void builderFrame() {</p><pre><code>  mBike.setFrame(new CarbonFrame());</code></pre><p>  }</p><p>  @Override<br>  void builderSeat() {</p><pre><code>  mBike.setSeat(new RubberSeat());</code></pre><p>  }</p><p>  @Override<br>  void builderTire() {</p><pre><code>  mBike.setTire(new InflateTire());</code></pre><p>  }</p><p>  @Override<br>  Bike createBike() {</p><pre><code>  return mBike;</code></pre><p>  }<br>}</p><pre><code>6. **指挥者类**</code></pre><p>/**</p></li><li><p>指挥者</p></li><li><p>/<br>public class Director {<br>  private Builder builder = null;</p><p>  public Director(Builder builder) {</p><pre><code>  this.builder = builder;</code></pre><p>  }</p><p>  public Bike construct() {</p><pre><code>  builder.builderFrame();  builder.builderSeat();  builder.builderTire();  return builder.createBike();</code></pre><p>  }<br>}</p><pre><code>7. **客户端**</code></pre><p>public class Client {<br>  public static void main(String[] args) {</p><pre><code>  showBike(new MoBikeBuilder());  showBike(new OfoBuilder());</code></pre><p>  }</p><p>  private static void showBike(Builder builder) {</p><pre><code>  Director director = new Director(builder);  Bike bike = director.construct();  bike.getFrame().frame();  bike.getSeat().seat();  bike.getTire().tire();</code></pre><p>  }<br>}</p><pre><code>*上面示例是Builder模式的常规用法，导演类Director在Builder模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把Director和抽象建造者进行结合，示例代码：*</code></pre></li></ul><p><strong>改造后的抽象建造者：</strong></p><pre><code>/** * 2.up * 简化系统结构，将Director和抽象建造者进行结合 */public abstract class Builder_1 {    abstract void buildFrame();    abstract void buildSeat();    abstract void buildTire();    abstract Bike createBike();    /**     * 把导演类中的construct()方法合并到抽象建造者中     * @return 具体产品对象     */    public Bike construct() {        this.buildFrame();        this.buildSeat();        this.buildTire();        return this.createBike();    }}</code></pre><p><em>这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，不太符合单一职责原则，如果construct()方法过于复杂，还是建议封装到Director中</em></p><p><em>除了上面的用途外，还有宁外一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性非常差，而且很容易引入错误，此时就可以利用builder模式进行重构</em></p><p><strong>重构前示例代码：</strong></p><pre><code>@Datapublic class Computer {    private String cpu;    private String screen;    private String memory;    private String mainBoard;    public Computer(String cpu, String screen, String memory, String mainBoard) {        this.cpu = cpu;        this.screen = screen;        this.memory = memory;        this.mainBoard = mainBoard;    }}</code></pre><p><strong>重构后示例代码：</strong></p><pre><code>@Datapublic class Computer_new {    private String cpu;    private String screen;    private String memory;    private String mainBoard;    public Computer_new() {        throw new RuntimeException(&quot;can&#39;t init&quot;);    }    public Computer_new(Builder builder) {        this.cpu = builder.cpu;        this.screen = builder.screen;        this.memory = builder.memory;        this.mainBoard = builder.mainBoard;    }    public static final class Builder {        private String cpu;        private String screen;        private String memory;        private String mainBoard;        public Builder() {        }        public Builder cpu(String cpu) {            this.cpu = cpu;            return this;        }        public Builder screen(String screen) {            this.screen = screen;            return this;        }        public Builder memory(String memory) {            this.memory = memory;            return this;        }        public Builder mainBoard(String mainBoard) {            this.mainBoard = mainBoard;            return this;        }        public Computer_new build() {            return new Computer_new(this);        }    }}</code></pre><p><strong>客户端代码：</strong></p><pre><code>/** * 示例代码只是传入四个参数，如果参数是十四个甚至更多，builder 模式的优势将会更加明显， * 传递参数更加灵活，代码具有更高的可读性 */public class Client {    public static void main(String[] args) {        //非 Builder 模式        Computer computer = new Computer(&quot;cpu&quot;,&quot;screen&quot;,&quot;memory&quot;,&quot;mainBoard&quot;);        //Builder 模式        Computer_new computer_new = new Computer_new.Builder()                .cpu(&quot;cpu&quot;)                .screen(&quot;screen&quot;)                .memory(&quot;memory&quot;)                .mainBoard(&quot;mainBoard&quot;)                .build();        System.out.println(computer);        System.out.println(computer_new);    }}</code></pre><h4 id="五、优缺点比较"><a href="#五、优缺点比较" class="headerlink" title="五、优缺点比较"></a>五、优缺点比较</h4><ol><li><strong>优点：</strong><blockquote><ul><li>使用建造者模式可以使客户端不必知道产品内部组成的细节</li><li>具体的建造者类之间是相互独立的，这有利于系统的扩展</li><li>具体的建造者相互独立，因此可以对建造的过程逐步细化，而不会对其他模块产生任何影响</li></ul></blockquote></li><li><strong>缺点：</strong><blockquote><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，使用范围受到一定的限制</li><li>如果产品内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大</li></ul></blockquote><h4 id="六、建造者模式与工厂模式的比较"><a href="#六、建造者模式与工厂模式的比较" class="headerlink" title="六、建造者模式与工厂模式的比较"></a>六、建造者模式与工厂模式的比较</h4></li></ol><ul><li>与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，而抽象工厂模式返回一系列相关的产品，这些产品位于不同的产品等级结构，构成了一个产品族</li><li>在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品对象；而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象</li><li>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-建造者-菜鸟教程</title>
      <link href="/2019/10/23/she-ji-mo-shi-jian-zao-zhe-mo-shi-cai-niao-jiao-cheng/"/>
      <url>/2019/10/23/she-ji-mo-shi-jian-zao-zhe-mo-shi-cai-niao-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式之建造者模式"><a href="#设计模式之建造者模式" class="headerlink" title="设计模式之建造者模式"></a>设计模式之建造者模式</h2><p><em>定义：将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同表示的对象，这样的设计模式被称为建造者模式。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的</em></p><blockquote><p><strong>优点：</strong></p><ol><li>各个具体的建造者相互独立，有利于系统的扩展</li><li>客户端不必知道产品内部组成的细节，便于控制细节风险</li></ol><p><strong>缺点：</strong></p><ol><li>产品的组成部分必须有共同点，使用范围有限制</li><li>如果产品的内部变化复杂，会存在很多建造者类</li></ol></blockquote><p><em>建造者模式和工厂模式的关注点不同，建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程，两者可以结合使用</em></p><h4 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h4><p><em>==建造者模式由产品、抽象建造者、具体建造者、指挥者等四个要素构成==</em></p><p><strong>1. 模式的结构</strong></p><p>建造者模式的主要角色如下：</p><ol><li>产品角色：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个部件</li><li>抽象建造者：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法getResult()</li><li>具体建造者：实现Builder接口，完成复杂产品的各个部件的具体创建方法</li><li>指挥者：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在这当中不涉及具体产品的信息</li></ol><p><strong>2. 建造者模式的实现-点餐例子</strong></p><p><em>点餐可以点汉堡和冷饮，汉堡和冷饮可以点不同种类的，汉堡装纸盒，冷饮装瓶子中</em></p><p><strong><em>UML结构图如下：</em></strong></p><p><img src="https://note.youdao.com/yws/res/3467/WEBRESOURCE5c62e712d2c500f7dcee867ca7caddfc" alt="u.jpg"></p><p><strong>【编码实现】</strong></p><ol><li>创建表示食物清单和食物包装的接口</li></ol><pre><code>/** * 食物清单接口 */public interface Item {    String name();    Packing packing();    Float price();}/** * 食物包装接口 */public interface Packing {    String pack();}</code></pre><ol start="2"><li>实现食物包装接口，Wrapper为纸盒，Bottle为瓶子</li></ol><pre><code>/** * 具体包装实现类 */public class Wrapper implements Packing {    @Override    public String pack() {        return &quot;wrapper-纸盒&quot;;    }}public class Bottle implements Packing {    @Override    public String pack() {        return &quot;bottle-瓶装&quot;;    }}</code></pre><ol start="3"><li>创建食物清单接口的抽象类，Burger为汉堡，Drink为饮料</li></ol><pre><code>/** * 具体食品抽象类-汉堡 */public abstract class Burger implements Item {    @Override    public Packing packing() {        return new Wrapper();    }    @Override    public abstract Float price();}/** * 具体食品抽象类-饮料 */public abstract class Drink implements Item {    @Override    public Packing packing() {        return new Bottle();    }    @Override    public abstract Float price();}</code></pre><ol start="4"><li>具体食品实现类-汉堡</li></ol><pre><code>/** * 具体食品类-牛肉汉堡 */public class Burger_1 extends Burger {    @Override    public String name() {        return &quot;牛肉汉堡&quot;;    }    @Override    public Float price() {        return 25.0f;    }}/** * 具体食品类-虾仁汉堡 */public class Burger_2 extends Burger {    @Override    public String name() {        return &quot;虾仁汉堡&quot;;    }    @Override    public Float price() {        return 25.0f;    }}</code></pre><ol start="5"><li>具体饮料实现类</li></ol><pre><code>/** * 具体食品类-奶茶 */public class Drink_1 extends Drink {    @Override    public String name() {        return &quot;珍珠奶茶&quot;;    }    @Override    public Float price() {        return 15.0f;    }}/** * 具体食品类-快乐水 */public class Drink_2 extends Drink {    @Override    public String name() {        return &quot;快乐水&quot;;    }    @Override    public Float price() {        return 8.0f;    }}</code></pre><ol start="6"><li>Meal 点餐实现处理</li></ol><pre><code>/** * Meal类，带有上面定义的食物清单Item对象 */public class Meal {    private List&lt;Item&gt; items = new ArrayList&lt;&gt;();    public void addItem(Item item) {        items.add(item);    }    //获取总消费    public float getCost() {        final float[] cost = {0.0f};        items.forEach(item -&gt; {            cost[0] += item.price();        });        return cost[0];    }    public void showItem() {        items.forEach(item -&gt; {            System.out.print(&quot;餐品：&quot; + item.name());            System.out.print(&quot;,包装：&quot; + item.packing().pack());            System.out.println(&quot;,价格：&quot; + item.price());        });    }}</code></pre><ol start="7"><li><strong>指挥者：</strong> 创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象</li></ol><pre><code>/** * 负责创建Meal对象 */public class MealBuilder {    //订单1    public Meal order_1() {        Meal meal = new Meal();        meal.addItem(new Burger_1());        meal.addItem(new Drink_1());        return meal;    }    //订单2    public Meal order_2() {        Meal meal = new Meal();        meal.addItem(new Burger_2());        meal.addItem(new Drink_2());        return meal;    }}</code></pre><ol start="8"><li>客户端</li></ol><pre><code>public class Client {    public static void main(String[] args) {        MealBuilder mealBuilder = new MealBuilder();        Meal order_1 = mealBuilder.order_1();        System.out.println(&quot;------order_1-------&quot;);        order_1.showItem();        System.out.println(&quot;总额：&quot; + order_1.getCost());        Meal order_2 = mealBuilder.order_2();        System.out.println(&quot;------order_2-------&quot;);        order_2.showItem();        System.out.println(&quot;总额：&quot; + order_2.getCost());    }}</code></pre><p><strong>运行结果如下：</strong></p><pre><code>------order_1-------餐品：牛肉汉堡,包装：wrapper-纸盒,价格：25.0餐品：珍珠奶茶,包装：bottle-瓶装,价格：15.0总额：40.0------order_2-------餐品：虾仁汉堡,包装：wrapper-纸盒,价格：25.0餐品：快乐水,包装：bottle-瓶装,价格：8.0总额：33.0</code></pre><h4 id="模式的应用场景"><a href="#模式的应用场景" class="headerlink" title="模式的应用场景"></a>模式的应用场景</h4><p>建造者模式创建的是复杂对象，其产品的各个部分经常会发生变化，但将他们组合到一起的算法却相对稳定，所以它通常在以下场景使用：</p><ul><li>创建的对象较复杂，由多个部件构成，组成对象的各部件可能会不同，但部件间的建造顺序是稳定的</li><li>创建复杂对象的算法独立于该对象的组成部分以及他们的装配方式，即产品的构建过程和最终的表示是独立的<blockquote><p>建造者模式在应用过程中可以根据需要改变，如果创建的产品种类只有一种，只需要一个具体建造者，这时可以省略掉抽象建造者，甚至可以省略掉指挥者角色</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂模式</title>
      <link href="/2019/10/17/she-ji-mo-shi-gong-han-mo-shi/"/>
      <url>/2019/10/17/she-ji-mo-shi-gong-han-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式之工厂模式-amp-工厂方法模式-amp-抽象工厂模式"><a href="#设计模式之工厂模式-amp-工厂方法模式-amp-抽象工厂模式" class="headerlink" title="设计模式之工厂模式&amp;工厂方法模式&amp;抽象工厂模式"></a>设计模式之工厂模式&amp;工厂方法模式&amp;抽象工厂模式</h2><p><em>工厂模式（Factory Pattern）是Java中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象</em></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p><strong>定义：</strong> 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行</p><p><strong>分类：</strong></p><blockquote><ol><li><em>简单工厂（Simple Factory）模式</em>，又称静态工厂方法模式</li><li><em>工厂方法（Factory Method）模式</em>，又称多态性工厂模式或虚拟构造子模式</li><li><em>抽象工厂（Abstract Factory）模式</em>，又称工具箱模式</li></ol></blockquote><p><strong>主要功能：</strong> 主要功能是帮助我们把对象的实例化部分抽取了出来，目的是降低系统中代码耦合度，并且增强了系统的扩展性</p><p><strong>在开源框架中的使用：</strong></p><blockquote><ol><li>Spring中通过getBean(“xxx”) 获取Bean</li><li>Java消息服务JMS中（这以消息队列ActiveMQ为例）<pre><code> // 1、创建一个连接工厂对象，需要指定服务的ip及端口。 ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(&quot;tcp://192.168.xx.xx:xxxxx&quot;); // 2、使用工厂对象创建一个Connection对象。 Connection connection = connectionFactory.createConnection();</code></pre></li></ol><p><strong>为什么要使用工厂模式：</strong></p><ol><li><strong>解耦：</strong> 把对象的创建和使用的过程分开</li><li><strong>降低代码重复：</strong> 如果创建对象的过程都很复杂，需要一定的代码量，而且很多地方都要用到，那么就会有很多的重复代码</li><li><strong>降低维护成本：</strong> 由于创建过程都由工厂统一管理，所以发生业务逻辑变化，不需要找到所有需要创建某个对象的地方去逐个修正，只需要在工厂里修改即可，降低维护成本</li></ol></blockquote></blockquote><hr><h4 id="一、简单工厂模式"><a href="#一、简单工厂模式" class="headerlink" title="一、简单工厂模式"></a>一、简单工厂模式</h4><p><em>严格的说，简单工厂模式并不是23种常用的设计模式之一，它只算工厂模式的一个特殊实现。简单工厂模式在实际中的应用相对于其他两个工厂模式用的还是相对少得多，因为它只适应很多简单的情况</em></p><p><em>最重要的是它违背了我们在概述中说的 <strong>==开放-封闭原则==</strong>（可以通过反射的机制来避免）。因为每次你要新添加一个功能，都需要在生switch-case语句（或者if-else语句）中去修改代码，添加分支条件</em></p><p><strong>适用场景：</strong></p><ul><li>创建的对象较少</li><li>客户端不关心对象的创建过程</li></ul><p><strong>简单工厂模式角色分配：</strong></p><ol><li><strong>工厂(Factory)角色：</strong> 简单工厂模式的核心，它负责实现创建所有实例的内部逻辑。工厂类可以直接被外部调用，创建所需的产品对象</li><li><strong>抽象产品(Product)角色：</strong> 简单工厂模式所创建的所有对象的父类，它负责描述所有实例所共有的公共接口</li><li><strong>具体产品(Concrete Product)角色：</strong> 简单工厂模式的创建目标，所有创建的对象都是充当这个角色的某个具体类的实例</li></ol><p><strong>简单工厂模式结构图</strong></p><p><img src="https://note.youdao.com/yws/res/3018/WEBRESOURCE023b70852baff37122039478cf473c41" alt="s.jpg"></p><p><strong>简单工厂实例：</strong></p><p><em>创建一个可以绘制不同形状的绘图工具，可以绘制圆形、长方形、正方形等，每个图形都会有一个draw()方法用于绘图</em></p><ol><li><p>创建Shape接口</p><pre><code>public interface Shape { void draw();}</code></pre></li><li><p>创建实现改接口的具体实现类</p><pre><code>/*** 圆形*/public class Circle implements Shape { public Circle() {     System.out.println(&quot;Circle：圆形&quot;); } @Override public void draw() {     System.out.println(&quot;Draw Circle&quot;); }}/*** 长方形*/public class Rectangle implements Shape { public Rectangle() {     System.out.println(&quot;Rectangle：长方形&quot;); } @Override public void draw() {     System.out.println(&quot;Draw Rectangle&quot;); }}/*** 正方形*/public class Square implements Shape { public Square() {     System.out.println(&quot;Square：正方形&quot;); } @Override public void draw() {     System.out.println(&quot;Draw Square&quot;); }}</code></pre></li><li><p>创建工厂类</p><pre><code>public class ShapeFactory { //使用getShape()方法获取形状类型的对象 public static Shape getShape(String shapeType) {     if (shapeType == null) {         return null;     }     if (shapeType.equalsIgnoreCase(&quot;CIRCLE&quot;)) {         return new Circle();     } else if (shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;)) {         return new Rectangle();     } else if (shapeType.equalsIgnoreCase(&quot;SQUARE&quot;)) {         return new Square();     }     return null; }}</code></pre></li><li><p>测试类</p><pre><code>public class Client { public static void main(String[] args) {     //获取Circle的对象，并调用它的draw()方法     Shape circle = ShapeFactory.getShape(&quot;CIRCLE&quot;);     circle.draw();     //获取Rectangle的对象，并调用它的draw()方法     Shape rectangle = ShapeFactory.getShape(&quot;Rectangle&quot;);     rectangle.draw();     //获取Square的对象，并调用它的draw()方法     Shape square = ShapeFactory.getShape(&quot;square&quot;);     square.draw(); }}</code></pre></li></ol><p><strong>运行结果</strong></p><pre><code>Circle：圆形Draw CircleRectangle：长方形Draw RectangleSquare：正方形Draw Square</code></pre><p><em>这样的实现有个问题，如果新增新的形状类型的话，就需要修改工厂类中的getShape()方法，这明显不符合 <strong>开放-封闭原则</strong></em></p><h4 id="一-一使用反射机制改造简单工厂"><a href="#一-一使用反射机制改造简单工厂" class="headerlink" title="一-一使用反射机制改造简单工厂"></a>一-一使用反射机制改造简单工厂</h4><p><strong>将工厂类改造为：</strong></p><pre><code>/** * 利用反射解决简单工厂每次增加新的产品类型都需要修改工厂中的方法的弊端 */public class ShapeFactory_1 {    //方式一：使用泛型省略类型强制转换，支持多态↑↓    public static &lt;T&gt; T getClass(Class&lt;? extends T&gt; clazz) {        T obj = null;        try {            obj = (T) Class.forName(clazz.getName()).newInstance();        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {            e.printStackTrace();        }        return obj;    }    //方式二：调用时需要进行强制转换↑↓    public static Object getClass_1(Class&lt;? extends Shape&gt; clazz) {        Object obj = null;        try {            obj = Class.forName(clazz.getName()).newInstance();        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {            e.printStackTrace();        }        return obj;    }}</code></pre><p><strong>测试类</strong></p><pre><code>public class Client_1 {    public static void main(String[] args) {        Circle circle = ShapeFactory_1.getClass(Circle.class);        circle.draw();        Rectangle rectangle = ShapeFactory_1.getClass(Rectangle.class);        rectangle.draw();        //方式二：        Square square = (Square) ShapeFactory_1.getClass_1(Square.class);        square.draw();    }}</code></pre><p><em>使用反射的方式让程序符合了 <strong>开放-封闭原则</strong>，但是每一次传入的都是产品类的全部路径，还可以通过 <strong>反射+配置文件</strong>的方式改善</em></p><hr><h4 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h4><p><em>工厂方法模式是简单工厂的进一步深化，在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。也就是说 <strong>每个对象都有一个与之对应的工厂</strong>，是工厂模式家族中用得最多的模式</em></p><p><strong>适用场景：</strong></p><ul><li>一个类不知道它所需要的对象的类：在工厂方法模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体的产品对象由具体的工厂类创建；客户端需要知道创建具体产品的工厂类</li><li>一个类通过其子类来指定创建那个对象：在工厂方法模式中，对于抽象工厂类只需要提供一个创建产品的接口，而由其子类来确定具体要创建的对象，利用面向对象的多态性和里氏原则</li><li>将创建对象的任务委托给多个多个工厂子类中的某一个，客户端在使用时可以无需关心是哪一个工厂子类创建产品子类，需要时再动态指定，可将具体工厂类的类名存储在配置文件或数据库中<blockquote><blockquote><ol><li>客户只知道创建产品的工厂名，而不知道具体的产品名。如TCL电视工厂、海信电视工厂等</li><li>创建对象的任务由多个具体子工厂中的某一个完成，而抽象工厂只提供创建产品的接口</li><li>客户不关心创建产品的细节，只关心产品的品牌。</li></ol></blockquote></blockquote></li></ul><p><strong>工厂方法模式角色分配：</strong></p><ol><li><strong><em>抽象工厂(Abstract Factory)角色：</em></strong> 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂必须实现这个接口</li><li><strong><em>具体工厂(Concrete Factory)角色：</em></strong> 这是实现抽象接口的具体工厂类，包含于应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象</li><li><strong><em>抽象产品(Abstract Product)角色：</em></strong> 工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口</li><li><strong><em>具体产品(Concrete Product)角色：</em></strong> 这个角色实现了抽象产品角色所定义的接口。某具体产品由专门的具体工厂创建，它们之间往往一一对应</li></ol><p><strong>工厂方法模式结构图</strong></p><p><img src="https://note.youdao.com/yws/res/2996/WEBRESOURCEfc91804b48dd0d9481ea30a44b3f09e7" alt="q.jpg"></p><p><strong>工厂方法模式实例：</strong></p><p><em>上面简单工厂例子中的图形接口以及相关图像实现类不变。我们只需要增加一个工厂接口以及实现这个接口的工厂类即可</em></p><ol><li>增加一个工厂接口<pre><code>public interface Factory { Shape getShape();}</code></pre></li><li>增加相关工厂类<pre><code>/*** 圆形工厂类*/public class CircleFactory implements Factory { @Override public Shape getShape() {     return new Circle(); }}/*** 长方形工厂类*/public class RectangleFactory implements Factory { @Override public Shape getShape() {     return new Rectangle(); }}/*** 正方形工厂类*/public class SquareFactory implements Factory { @Override public Shape getShape() {     return new Square(); }}</code></pre></li><li>测试类<pre><code>public class Client { public static void main(String[] args) {     CircleFactory circleFactory = new CircleFactory();     Shape circle = circleFactory.getShape();     circle.draw(); }}</code></pre></li></ol><p><strong>输出结果</strong></p><pre><code>Circle：圆形Draw Circle</code></pre><h4 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a>三、抽象工厂模式</h4><p><em>在工厂方法模式中，我们发现我们生产的都是同一类产品。抽象工厂模式就是工厂方法模式的进一步深化，在这个模式中的工厂类不单单创建一种产品，而是可以创建一组产品</em></p><p><em>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构</em></p><p><strong>适用场景：</strong></p><blockquote><ul><li>和工厂方法一样客户端不需要知道它所创建的对象的类</li><li>需要一组对象共同完成某种功能时，并且存在可能多组对象完成不同功能的情况(属于同一个产品族的产品)<blockquote><ol><li>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等</li><li>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋</li><li>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构</li></ol></blockquote></li><li>系统结构稳定，不会频繁的增加对象(当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改)</li></ul></blockquote><p><strong>抽象工厂方法模式角色分配：</strong></p><ol><li><strong><em>抽象工厂(Abstract Factory)角色：</em></strong> 是工厂方法模式的核心，与应用程序无关。任何在模式中创建的对象的工厂类必须实现这个接口</li><li><strong><em>具体工厂类(Concrete Factory)角色：</em></strong> 这是实现抽象工厂接口的具体工厂类，包含与应用程序密切相关的逻辑，并且受到应用程序调用以创建某一种产品对象</li><li><strong><em>抽象产品(Abstract Product)角色：</em></strong> 工厂方法模式所创建对象的超类型，也就是产品对象的共同父类或共同拥有接口</li><li><strong><em>具体产品(Concrete Product)角色：</em></strong> 抽象工厂模式所创建的任何产品对象都是某一个具体产品类的实例。在抽象工厂中创建的产品属于同一产品族，这不同于上面的工厂模式中的工厂只创建单一产品</li></ol><p><strong>抽象工厂模式结构图</strong></p><p><img src="https://note.youdao.com/yws/res/3006/WEBRESOURCE08db0fe6b1e9b154b24ccb1046f6d307" alt="r.jpg"></p><p><strong>抽象工厂的工厂和工厂方法中的工厂区别：</strong></p><p><strong><em>==抽象工厂是生产一整套有产品的（至少要生产两个产品)，这些产品必须相互是有关系或有依赖的，而工厂方法中的工厂是生产单一产品的工厂==</em></strong></p><p><strong>抽象工厂模式实例：</strong></p><p><em>假设现在存在AK、M4A1两类枪，每一种枪对应一种子弹。我们现在这样考虑生产AK的工厂可以顺便生产AK使用的子弹，生产M4A1的工厂可以顺便生产M4A1使用的子弹。（AK工厂生产AK系列产品包括子弹啊，AK枪的类型啊这些，M4A1工厂同理）</em></p><ol><li><p>创建相关接口</p><pre><code>//创建枪及子弹的接口public interface Gun { void shooting();}public interface Bullet { void load();}</code></pre></li><li><p>创建接口对应的实现类</p><pre><code>//枪实现类public class AK implements Gun { @Override public void shooting() {     System.out.println(&quot;shooting with AK&quot;); }}public class M4A1 implements Gun { @Override public void shooting() {     System.out.println(&quot;shooting with M4A1&quot;); }}//子弹实现类public class AK_Bullet implements Bullet { @Override public void load() {     System.out.println(&quot;load bullets with AK&quot;); }}public class M4A1_Bullet implements Bullet { @Override public void load() {     System.out.println(&quot;load bullets with M4A1&quot;); }}</code></pre></li><li><p>创建工厂接口</p><pre><code>public interface Factory { Gun productGun(); Bullet productBullet();}</code></pre></li><li><p>创建具体工厂</p><pre><code>//AK工厂public class AK_Factory implements Factory {  @Override  public Gun productGun() {      return new AK();  }  @Override  public Bullet productBullet() {      return new AK_Bullet();  }}//M4A1工厂public class M4A1_Factory implements Factory {  @Override  public Gun productGun() {      return new M4A1();  }  @Override  public Bullet productBullet() {      return new M4A1_Bullet();  }}</code></pre></li><li><p>测试类</p><pre><code>public class Client { public static void main(String[] args) {     Factory factory;     Gun gun;     Bullet bullet;     factory = new AK_Factory();     bullet = factory.productBullet();     bullet.load();     gun = factory.productGun();     gun.shooting(); }}</code></pre></li></ol><p><strong>输出结果</strong></p><pre><code>load bullets with AKshooting with AK</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/2019/10/16/she-ji-mo-shi-dan-li-mo-shi/"/>
      <url>/2019/10/16/she-ji-mo-shi-dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式之单例模式"><a href="#设计模式之单例模式" class="headerlink" title="设计模式之单例模式"></a>设计模式之单例模式</h2><p><em>单例模式是Java中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象</em></p><blockquote><ol><li>单例类只能有一个实例</li><li>单例类必须自己创建自己的唯一实例</li><li>单例类对外提供一个访问该单例的全局访问点</li></ol></blockquote><h4 id="一、了解单例模式"><a href="#一、了解单例模式" class="headerlink" title="一、了解单例模式"></a>一、了解单例模式</h4><p><strong>应用场景：</strong> </p><ol><li>在应用场景中，某类只要求生成一个对象的时候，如一个班班主任、班长等</li><li>对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并加快对象访问速度。如Web中的配置对象、数据库中的连接池等</li><li>当某类需要频繁的实例化，而创建的对象又频繁被销毁的时候，如多线程的连接池、网络连接池等<blockquote><p><strong><em>注意事项：</em></strong> getInstance()方法中需要使用同步锁synchronized(Singleton.class)防止多线程同时进入造成instance被多次实例化</p></blockquote></li></ol><p><strong>单例模式的结构：</strong></p><blockquote><p><em>单例类：</em> 包含一个实例且能自行创建这个实例的类<br><em>访问类：</em> 使用单例的类</p></blockquote><p>单例模式的结构图<br><img src="https://note.youdao.com/yws/res/3162/WEBRESOURCE4530fa811a5cf0f1fc7124974411f3ab" alt="t.jpg"></p><h4 id="二、单例模式实现的几种方式"><a href="#二、单例模式实现的几种方式" class="headerlink" title="二、单例模式实现的几种方式"></a>二、单例模式实现的几种方式</h4><p><em>单例模式通常有==两种实现形式==： <strong>==懒汉式、饿汉式==</strong></em></p><ol><li><p><strong>懒汉式，线程不安全</strong></p><blockquote><p><strong>是否Lazy初始化</strong>：是</p><p><strong>是否多线程安全</strong>：否</p><p><em>这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized，所以严格意义上它并不算单例模式。这种方式 <strong>延迟加载(lazy loading)</strong> 很明显，不要求线程安全，在多线程不能正常工作</em></p><pre><code>public class Singleton { private static Singleton instance = null;</code></pre></blockquote><p> private  Singleton() {<br> }<br> /**</p><ul><li>线程安全</li><li>public static synchronized Singleton getInstance() {</li><li>/<br>public static Singleton getInstance() {<br>  if (instance == null) {<pre><code>  instance = new Singleton();</code></pre>  }<br>  return instance;<br>}<br>}<pre><code></code></pre></li></ul></li><li><p><strong>饿汉式</strong></p><blockquote><p><strong>是否Lazy初始化：</strong> 否</p><p><strong>是否多线程安全：</strong> 是</p><p><em>这种方式比较常用，但容易产生垃圾对象</em></p><blockquote><p>优点：没有加锁，执行效率会提高</p><p>缺点：类加载时就初始化，浪费内存</p><pre><code>public class Singleton_Hungry { private static Singleton_Hungry instance = new Singleton_Hungry(); private Singleton_Hungry() { } public static Singleton_Hungry getInstance() {     return instance; }}</code></pre></blockquote></blockquote></li><li><p><strong>双检锁/双重校验锁（DCL，即 double-checked locking）</strong></p><blockquote><p><strong>是否Lazy初始化：</strong> 是</p><p><strong>是否多线程安全：</strong> 是</p><p><em>这种方式采用双锁机制，安全且在多线程情况下能保持高性能</em></p><blockquote><p>双重检查模式，进行了两次的判断，第一次是为了避免不要的实例，第二次是为了进行同步，避免多线程问题。由于singleton=new Singleton()对象的创建在JVM中可能会进行重排序，在多线程访问下存在风险，使用volatile修饰signleton实例变量有效，解决该问题</p><pre><code>public class Singleton_DCL { //保证instance在所有线程同步 private volatile static Singleton_DCL instance = null; //private避免类在外部被实例化 private Singleton_DCL() { } public static Singleton_DCL getInstance() {     if (instance == null) {         synchronized (Singleton_DCL.class) {             if (instance == null) {                 instance = new Singleton_DCL();             }         }     }     return instance; }}</code></pre></blockquote></blockquote></li><li><p><strong>静态内部类单例模式</strong></p><blockquote><p><strong>是否Lazy初始化：</strong> 是</p><p><strong>是否多线程安全：</strong> 是</p><p><em>这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用</em></p><blockquote><p>只有第一次调用getInstance方法时，虚拟机才加载 Inner 并初始化instance ，只有一个线程可以获得对象的初始化锁，其他线程无法进行初始化，保证对象的唯一性。目前此方式是所有单例模式中最推荐的模式，具体根据项目选择</p><pre><code>public class Singleton_staticInnerClass {</code></pre></blockquote></blockquote><p> private Singleton_staticInnerClass(){<br> }<br> private static class Inner {</p><pre><code> private static final Singleton_staticInnerClass         INSTANCE = new Singleton_staticInnerClass();</code></pre><p> }<br> public static final Singleton_staticInnerClass getInstance() {</p><pre><code> return Inner.INSTANCE;</code></pre><p> }<br>}</p><pre><code></code></pre></li><li><p><strong>枚举单例模式</strong></p><blockquote><p><strong>是否Lazy初始化：</strong> 否</p><p><strong>是否多线程安全：</strong> 是</p><p><em>这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化</em></p><blockquote><p>这种方式是《Effective Java》中提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化</p><pre><code>public enum  Singleton_enum { INSTANCE; //doSomething 该实例支持的行为</code></pre></blockquote></blockquote><p> //可以省略此方法，通过Singleton.INSTANCE进行操作<br> public static Singleton_enum getInstance() {</p><pre><code> return Singleton_enum.INSTANCE;</code></pre><p> }<br>}</p><pre><code></code></pre></li></ol><h4 id="【例子-懒汉式】"><a href="#【例子-懒汉式】" class="headerlink" title="【例子-懒汉式】"></a>【例子-懒汉式】</h4><pre><code>public class President {    //保证instance在所有线程中同步    private static volatile President instance = null;    //private避免类在外部被实例化    private President() {        System.out.println(&quot;选举一个总统&quot;);    }    //在getInstance方法上加同步    public static synchronized President getInstance() {        if (instance == null) {            instance = new President();        } else {            System.out.println(&quot;已经实例化了...&quot;);        }        return instance;    }    public void getName() {        System.out.println(&quot;我是总统：川建国&quot;);    }}</code></pre><pre><code>public class Client {    public static void main(String[] args) {        President zt = President.getInstance();        zt.getName();        President zt_1 = President.getInstance();        zt_1.getName();        if (zt == zt_1) {            System.out.println(&quot;是同一个人&quot;);        } else {            System.out.println(&quot;不是同一个人&quot;);        }    }}</code></pre><p><strong>运行结果</strong></p><pre><code>选举一个总统我是美国总统：川建国已经实例化一次了，不能再实例化了我是美国总统：川建国是同一个人</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-开篇</title>
      <link href="/2019/10/15/she-ji-mo-shi-kai-pian/"/>
      <url>/2019/10/15/she-ji-mo-shi-kai-pian/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式学习笔记（Java版）"><a href="#设计模式学习笔记（Java版）" class="headerlink" title="设计模式学习笔记（Java版）"></a>设计模式学习笔记（Java版）</h2><h3 id="ywy学习链接yuy"><a href="#ywy学习链接yuy" class="headerlink" title="ywy学习链接yuy"></a><a href="http://c.biancheng.net/view/1317.html" target="_blank" rel="noopener">ywy学习链接yuy</a></h3><h3 id="设计模式的概念与意义"><a href="#设计模式的概念与意义" class="headerlink" title="设计模式的概念与意义"></a>设计模式的概念与意义</h3><p><strong>1.软件设计模式的概念</strong></p><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><p><strong>2. 学习设计模式的意义</strong></p><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强</li></ul><p><em>当然，软件设计模式只是一个引导。在具体的软件幵发中，必须根据设计的应用系统的特点和要求来恰当选择。对于简单的程序开发，苛能写一个简单的算法要比引入某种设计模式更加容易。但对大项目的开发或者框架设计，用设计模式来组织代码显然更好。</em></p><h3 id="软件设计模式的基本要素"><a href="#软件设计模式的基本要素" class="headerlink" title="软件设计模式的基本要素"></a>软件设计模式的基本要素</h3><p>软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，其中最关键的元素包括以下 4 个主要部分。</p><ol><li>模式名称<blockquote><p>每一个模式都有自己的名字，通常用一两个词来描述，可以根据模式的问题、特点、解决方案、功能和效果来命名。==<strong>模式名称</strong>==（<strong>PatternName</strong>）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。</p></blockquote></li><li>问题<blockquote><p>==<strong>问题</strong>==（<strong>Problem</strong>）描述了该模式的应用环境，即何时使用该模式。它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。</p></blockquote></li><li>解决方案<blockquote><p>模式问题的 ==<strong>解决方案</strong>==（<strong>Solution</strong>）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。</p></blockquote></li><li>效果<blockquote><p>描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。显式地列出这些 ==<strong>效果</strong>==（<strong>Consequence</strong>）对理解和评价这些模式有很大的帮助。</p></blockquote><h3 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h3>总共23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。以及另一类设计模式：J2EE 设计模式。<h4 id="一、创建型模式"><a href="#一、创建型模式" class="headerlink" title="一、创建型模式"></a>一、创建型模式</h4></li></ol><p><em>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活</em></p><blockquote><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。这样可以降低系统的耦合度，使用者不需要关注对象的创建细节，对象的创建由相关的工厂来完成。就像我们去商场购买商品时，不需要知道商品是怎么生产出来一样，因为它们由专门的厂商生产</p></blockquote><ul><li><strong><em>工厂（Factory）模式：</em></strong> 定义一个用于创建产品的接口，由子类决定生产什么产品</li><li><strong><em>抽象工厂（Abstract Factory）模式：</em></strong> 提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品</li><li><strong><em>单例（Singleton）模式：</em></strong> 某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式</li><li><strong><em>建造者（Builder）模式：</em></strong> 将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象</li><li><strong><em>原型（Prototype）模式：</em></strong> 将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例</li></ul><p><em>以上 5 种创建型模式，除了==工厂方法模式==属于类创建型模式，其他的全部属于对象创建型模式</em></p><h4 id="二、结构型模式"><a href="#二、结构型模式" class="headerlink" title="二、结构型模式"></a>二、结构型模式</h4><p><em>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式</em></p><blockquote><p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象</p></blockquote><ul><li><strong><em>适配器（Adapter）模式：</em></strong> 将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作</li><li><strong><em>桥接（Bridge）模式：</em></strong> 将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度</li><li><strong><em>组合（Composite）模式：</em></strong> 将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性</li><li><strong><em>装饰器（Decorator）模式：</em></strong> 动态的给对象增加一些职责，即增加其额外的功能</li><li><strong><em>外观（Facade）模式：</em></strong> 为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问</li><li><strong><em>享元模式（Flyweight）：</em></strong> 运用共享技术来有效地支持大量细粒度对象的复用</li><li><strong><em>代理（Proxy）模式：</em></strong> 为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性</li><li>==<strong><em>过滤器（Filter、Criteria）模式：</em></strong>==</li></ul><p><em>以上 7 种结构型模式，除了==适配器模式==分为类结构型模式和对象结构型模式两种，其他的全部属于对象结构型模式</em></p><h4 id="三、行为型模式"><a href="#三、行为型模式" class="headerlink" title="三、行为型模式"></a>三、行为型模式</h4><p><em>这些设计模式特别关注对象之间的通信</em></p><blockquote><p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配</p><p>==行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为==。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性</p></blockquote><ul><li><strong><em>职责链（Chain of Responsibility）模式：</em></strong> 把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合</li><li><strong><em>命令（Command）模式：</em></strong> 将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开</li><li><strong><em>解释器（Interpreter）模式：</em></strong> 提供如何定义语言的文法，以及对语言句子的解释方法，即解释器</li><li><strong><em>迭代器（Iterator）模式：</em></strong> 提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示</li><li><strong><em>中介者（Mediator）模式：</em></strong> 定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解</li><li><strong><em>备忘录（Memento）模式：</em></strong> 在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它</li><li><strong><em>观察者（Observer）模式:</em></strong> 多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为</li><li><strong><em>状态（State）模式：</em></strong> 允许一个对象在其内部状态发生改变时改变其行为能力</li><li><strong><em>策略（Strategy）模式：</em></strong> 定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户</li><li><strong><em>模板方法（TemplateMethod）模式：</em></strong> 定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤</li><li><strong><em>访问者（Visitor）模式：</em></strong> 在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问</li><li>==<strong><em>空对象（Null Object）模式：</em></strong>==</li></ul><p><em>以上 11 种行为型模式，除了==模板方法模式和解释器模式==是类行为型模式，其他的全部属于对象行为型模式</em></p><h4 id="四、J2EE模式"><a href="#四、J2EE模式" class="headerlink" title="四、J2EE模式"></a>四、J2EE模式</h4><p><em>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的</em></p><ul><li><strong><em>MVC （MVC）模式：</em></strong></li><li><strong><em>业务代表（Business Delegate）模式：</em></strong></li><li><strong><em>组合实体（Composite Entity）模式：</em></strong></li><li><strong><em>数据访问对象（Data Access Object）模式：</em></strong></li><li><strong><em>前端控制器（Front Controller）模式：</em></strong></li><li><strong><em>拦截过滤器（Intercepting Filter）模式：</em></strong></li><li><strong><em>服务定位器（Service Locator）模式：</em></strong></li><li><strong><em>传输对象（Transfer Object）模式：</em></strong><h3 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h3></li></ul><p><strong><em>1、开闭原则（Open Close Principle）</em></strong></p><blockquote><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p></blockquote><p><strong><em>2、里氏代换原则（Liskov Substitution Principle）</em></strong></p><blockquote><p>里氏代换原则是面向对象设计的基本原则之一。里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p></blockquote><p><strong><em>3、依赖倒转原则（Dependence Inversion Principle）</em></strong></p><blockquote><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p></blockquote><p><strong><em>4、接口隔离原则（Interface Segregation Principle）</em></strong></p><blockquote><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p></blockquote><p><strong><em>5、迪米特法则，又称最少知道原则（Demeter Principle）</em></strong></p><blockquote><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p></blockquote><p><strong><em>6、合成复用原则（Composite Reuse Principle）</em></strong></p><blockquote><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p></blockquote><hr><h3 id="设计模式原则详解↑↓"><a href="#设计模式原则详解↑↓" class="headerlink" title="设计模式原则详解↑↓"></a>设计模式原则详解↑↓</h3><h4 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1. 开闭原则"></a>1. 开闭原则</h4><p><em>定义：软件实体应当对扩展开放，对修改关闭，这就是开闭原则的经典定义</em></p><blockquote><p>软件实体包括：</p><ul><li>项目中划分出的模块</li><li>类与接口</li><li>方法</li></ul></blockquote><p>==<em>开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求</em>==</p><p><strong>1. 开闭原则的作用</strong></p><p><em>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：</em></p><blockquote><p><strong>1. 对软件测试的影响</strong></p><blockquote><p>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行</p></blockquote><p><strong>2. 可提高代码的可复用性</strong></p><blockquote><p>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性</p></blockquote><p><strong>3. 可以提高软件的可维护性</strong></p><blockquote><p>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护</p></blockquote></blockquote><p><strong>2. 开闭原则的实现方法</strong></p><p><em>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中</em></p><blockquote><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p></blockquote><h4 id="2-里氏替换原则"><a href="#2-里氏替换原则" class="headerlink" title="2.里氏替换原则"></a>2.里氏替换原则</h4><p><em>继承必须确保超类所拥有的性质在子类中仍然成立</em></p><blockquote><p>里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范</p></blockquote><p><strong>1. 里氏替换原则的作用</strong></p><blockquote><ul><li>里氏替换原则是实现开闭原则的重要方式之一</li><li>它克服了继承中重写父类造成的可复用性变差的缺点</li><li>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性</li></ul></blockquote><p><strong>2. 里氏替换原则的实现方法</strong></p><p><em>==里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。== 也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法</em></p><blockquote><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大</p><p>如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系</p><p>关于里氏替换原则的例子，最有名的是“正方形不是长方形”。当然，生活中也有很多类似的例子，例如，企鹅、鸵鸟和几维鸟从生物学的角度来划分，它们属于鸟类；但从类的继承关系来看，由于它们不能继承“鸟”会飞的功能，所以它们不能定义成“鸟”的子类。同样，由于“气球鱼”不会游泳，所以不能定义成“鱼”的子类；“玩具炮”炸不了敌人，所以不能定义成“炮”的子类等</p></blockquote><p><strong>【例子】里氏替换原则在“几维鸟不是鸟”实例中的应用</strong></p><blockquote><p>分析：鸟一般都会飞行，如燕子的飞行速度大概是每小时 120 千米。但是新西兰的几维鸟由于翅膀退化无法飞行。假如要设计一个实例，计算这两种鸟飞行 300 千米要花费的时间。显然，拿燕子来测试这段代码，结果正确，能计算出所需要的时间；但拿几维鸟来测试，结果会发生“除零异常”或是“无穷大”，明显不符合预期，其类图如图所示<br><img src="https://note.youdao.com/yws/res/2171/WEBRESOURCEb0b7e4aa2855e4160fc5ec48e5bec699" alt="i.jpg"></p></blockquote><p><strong>程序代码如下：</strong></p><pre><code>public class Client {    public static void main(String[] args) {        Bird swallow = new Swallow();        Bird brownKiwi = new BrownKiwi();        swallow.setSpeed(120);        brownKiwi.setSpeed(120);        System.out.println(&quot;如果飞行300公里：&quot;);        try {            System.out.println(&quot;燕子将飞行&quot; + swallow.getFlyTime(300) + &quot;小时.&quot;);            System.out.println(&quot;几维鸟将飞行&quot; + brownKiwi.getFlyTime(300) + &quot;小时。&quot;);        } catch (Exception err) {            System.out.println(&quot;发生错误了!&quot;);        }    }}//鸟类class Bird {    double flySpeed;    public void setSpeed(double speed) {        flySpeed = speed;    }    public double getFlyTime(double distance) {        return (distance / flySpeed);    }}//燕子类class Swallow extends Bird {}//几维鸟类class BrownKiwi extends Bird {    public void setSpeed(double speed) {        flySpeed = 0;    }}</code></pre><p><strong>程序的运行结果如下：</strong></p><pre><code>如果飞行300公里：燕子将飞行2.5小时.几维鸟将飞行Infinity小时。</code></pre><p>程序运行’错误’的原因是：几维鸟类重写了鸟类的 setSpeed(double speed) 方法，这违背了里氏替换原则。正确的做法是：取消几维鸟原来的继承关系，定义鸟和几维鸟的更一般的父类，如动物类，它们都有奔跑的能力。几维鸟的飞行速度虽然为0，但奔跑速度不为 0，可以计算出其奔跑 300 千米所要花费的时间<br><img src="https://note.youdao.com/yws/res/2187/WEBRESOURCEc6636816a2809bdedea10b99879e900e" alt="j.jpg"></p><h4 id="3-依赖倒置原则"><a href="#3-依赖倒置原则" class="headerlink" title="3.依赖倒置原则"></a>3.依赖倒置原则</h4><p><em>依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：==要面向接口编程，不要面向实现编程==</em></p><p><strong>依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合</strong></p><blockquote><p>由于在软件设计中，细节具有多变性，而抽象层则相对稳定，因此以抽象为基础搭建起来的架构要比以细节为基础搭建起来的架构要稳定得多。这里的抽象指的是接口或者抽象类，而细节是指具体的实现类</p><p>使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给它们的实现类去完成</p></blockquote><p><strong>1.依赖倒置原则的作用</strong></p><blockquote><ul><li>依赖倒置原则可以降低类间的耦合性</li><li>依赖倒置原则可以提高系统的稳定性</li><li>依赖倒置原则可以减少并行开发引起的风险</li><li>依赖倒置原则可以提高代码的可读性和可维护性</li></ul></blockquote><p><strong>2.依赖倒置原则的实现方法</strong></p><p>==依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性==，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则。</p><blockquote><ol><li>每个类尽量提供接口或抽象类，或者两者都具备。</li><li>变量的声明类型尽量是接口或者是抽象类。</li><li>任何类都不应该从具体类派生。</li><li>使用继承时尽量遵循里氏替换原则</li></ol></blockquote><p><strong>【例1】依赖倒置原则在“顾客购物程序”中的应用</strong><br><img src="https://note.youdao.com/yws/res/2214/WEBRESOURCE95ac53001ab5f0f2fc0212d6f7d47157" alt="k.jpg"><br><strong>程序代码如下：</strong></p><pre><code>public class Client_shop {    public static void main(String[] args) {        Customer yu = new Customer();        System.out.println(&quot;顾客购买以下商品：&quot;);        yu.shopping(new ShaoGuanShop());        yu.shopping(new WuYuanShop());    }}//商店interface Shop {    public String sell(); //卖}//韶关网店class ShaoGuanShop implements Shop {    public String sell() {        return &quot;韶关土特产：香菇、木耳……&quot;;    }}//婺源网店class WuYuanShop implements Shop {    public String sell() {        return &quot;婺源土特产：绿茶、酒糟鱼……&quot;;    }}//顾客class Customer {    public void shopping(Shop shop) {        //购物        System.out.println(shop.sell());    }}</code></pre><p><strong>程序运行结果如下：</strong></p><pre><code>顾客购买以下商品：韶关土特产：香菇、木耳……婺源土特产：绿茶、酒糟鱼……</code></pre><h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="==单一职责原则=="></a>==单一职责原则==</h4><p><em>单一职责原则又称单一功能原则。这里的职责是指类变化的原因，单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</em></p><p><strong>该原则提出对象不应该承担太多职责，如果一个对象承担了太多的职责，至少存在以下两个缺点：</strong></p><blockquote><ol><li>一个职责的变化可能会削弱或者抑制这个类实现其他职责的能力</li><li>当客户端需要该对象的某一个职责时，不得不将其他不需要的职责全都包含进来，从而造成冗余代码或代码的浪费</li></ol></blockquote><p><strong>1. 单一职责原则的优点</strong></p><p><em>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点</em></p><blockquote><ul><li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多</li><li>提高类的可读性。复杂性降低，自然其可读性会提高</li><li>提高系统的可维护性。可读性提高，那自然更容易维护了</li><li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响</li></ul></blockquote><p><strong>2. 单一职责原则的实现方法</strong></p><p><strong>【例子】大学学生工作管理程序</strong><br><img src="https://note.youdao.com/yws/res/2246/WEBRESOURCE9046e1cd669709587f9a653cb1dac1e0" alt="l.jpg"></p><h4 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4.接口隔离原则"></a>4.接口隔离原则</h4><p><em>接口隔离原则要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法</em></p><p><strong>1. 定义</strong></p><blockquote><ol><li>客户端不应该被迫依赖于它不使用的方法；</li><li>一个类对另一个类的依赖应该建立在最小的接口上↓↓</li></ol></blockquote><blockquote><p><strong>↑要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用</strong></p></blockquote><p><em>接口隔离原则和单一职责都是为了提高类的内聚性、降低它们之间的耦合性，体现了封装的思想，但两者是不同的：</em></p><blockquote><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建</li></ul></blockquote><p><strong>2. 接口隔离原则的优点</strong></p><p><em>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点：</em></p><blockquote><ol><li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性</li><li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性</li><li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险</li><li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义</li><li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码</li></ol></blockquote><p><strong>3. 接口隔离原则的实现方法</strong></p><p><em>在具体应用接口隔离原则时，应该根据以下几个规则来衡量：</em></p><blockquote><ul><li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑</li><li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法</li><li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情</li></ul></blockquote><p><strong>【例子】学生成绩管理程序</strong><br><img src="https://note.youdao.com/yws/res/2291/WEBRESOURCE9e46465b02babadf8e94e080ce81ac43" alt="m.jpg"><br><strong>程序代码如下：</strong></p><pre><code>public class Client_score {    public static void main(String[] args) {        InputModule input =StuScoreList.getInputModule();        CountModule count =StuScoreList.getCountModule();        PrintModule print =StuScoreList.getPrintModule();        input.insert();        count.countTotalScore();        print.printStuInfo();        input.delete();    }}//输入模块接口interface InputModule {    void insert();    void delete();    void modify();}//统计模块接口interface CountModule {    void countTotalScore();    void countAverage();}//打印模块接口interface PrintModule {    void printStuInfo();    void queryStuInfo();}//实现类class StuScoreList implements InputModule, CountModule, PrintModule {    private StuScoreList() {    }    public static InputModule getInputModule() {        return new StuScoreList();    }    public static CountModule getCountModule() {        return new StuScoreList();    }    public static PrintModule getPrintModule() {        return new StuScoreList();    }    @Override    public void insert() {        System.out.println(&quot;输入模块的insert()方法被调用！&quot;);    }    @Override    public void delete() {        System.out.println(&quot;输入模块的delete()方法被调用！&quot;);    }    @Override    public void modify() {        System.out.println(&quot;输入模块的modify()方法被调用！&quot;);    }    @Override    public void countTotalScore() {        System.out.println(&quot;统计模块的countTotalScore()方法被调用！&quot;);    }    @Override    public void countAverage() {        System.out.println(&quot;统计模块的countAverage()方法被调用！&quot;);    }    @Override    public void printStuInfo() {        System.out.println(&quot;打印模块的printStuInfo()方法被调用！&quot;);    }    @Override    public void queryStuInfo() {        System.out.println(&quot;打印模块的queryStuInfo()方法被调用！&quot;);    }}</code></pre><p><strong>程序运行结果如下：</strong></p><pre><code>输入模块的insert()方法被调用！统计模块的countTotalScore()方法被调用！打印模块的printStuInfo()方法被调用！输入模块的delete()方法被调用！</code></pre><h4 id="5-迪米特法则"><a href="#5-迪米特法则" class="headerlink" title="5.迪米特法则"></a>5.迪米特法则</h4><p><em>迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性</em></p><blockquote><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法</p></blockquote><p><strong>1. 迪米特法则的优点</strong></p><p><em>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点</em></p><blockquote><ol><li>降低了类之间的耦合度，提高了模块的相对独立性。</li><li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性</li></ol></blockquote><p><em>但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</em></p><p><strong>2. 迪米特法则的实现方法</strong></p><p><em>从迪米特法则的定义和特点可知，它强调以下两点：</em></p><blockquote><ol><li>从依赖者的角度来说，只依赖应该依赖的对象。</li><li>从被依赖者的角度说，只暴露应该暴露的方法</li></ol></blockquote><p><em>所以，在运用迪米特法则时要注意以下 6 点:</em></p><blockquote><ol><li>在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。</li><li>在类的结构设计上，尽量降低类成员的访问权限。</li><li>在类的设计上，优先考虑将一个类设置成不变类。</li><li>在对其他类的引用上，将引用其他对象的次数降到最低。</li><li>不暴露类的属性成员，而应该提供相应的访问器（set 和 get 方法）。</li><li>谨慎使用序列化（Serializable）功能。</li></ol></blockquote><p><strong>【例子】明星与经纪人的关系实例</strong></p><p><em>分析：明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如与粉丝的见面会，与媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则，其类图如图所示：</em><br><img src="https://note.youdao.com/yws/res/2326/WEBRESOURCEce99ebf001f38b2cb8dafc7bcc135b9a" alt="n.jpg"><br><strong>程序代码如下：</strong></p><pre><code>public class Client_star {    public static void main(String[] args) {        Agent agent = new Agent();        agent.setMyStar(new Star(&quot;YU&quot;));        agent.setMyFans(new Fans(&quot;YS&quot;));        agent.setMyCompany(new Company(&quot;ywy_company&quot;));        agent.meeting();        agent.business();    }}//经纪人@Setterclass Agent {    private Star myStar;    private Fans myFans;    private Company myCompany;    public void meeting() {        System.out.println(myFans.getName() + &quot;与明星&quot; + myStar.getName() + &quot;见面了。&quot;);    }    public void business() {        System.out.println(myCompany.getName() + &quot;与明星&quot; + myStar.getName() + &quot;洽淡业务。&quot;);    }}//明星@Getter@AllArgsConstructorclass Star {    private String name;}//粉丝@Getter@AllArgsConstructorclass Fans {    private String name;}//媒体公司@Getter@AllArgsConstructorclass Company {    private String name;}</code></pre><p><strong>程序运行结果如下：</strong></p><pre><code>YS与明星YU见面了。ywy_company与明星YU洽淡业务。</code></pre><h4 id="6-合成复用原则"><a href="#6-合成复用原则" class="headerlink" title="6.合成复用原则"></a>6.合成复用原则</h4><p><em>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现</em></p><p><em>==如果要使用继承关系，则必须严格遵循里氏替换原则==。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范</em></p><p><strong>1.合成复用原则的重要性</strong></p><p><em>通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</em></p><blockquote><ol><li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用</li><li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护</li><li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化</li></ol></blockquote><p><em>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</em></p><blockquote><ol><li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用</li><li>新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口</li><li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象</li></ol></blockquote><p><strong>2.合成复用原则的实现方法</strong></p><p><em>合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用</em></p><p><strong>【例子】汽车分类管理程序</strong></p><p><em>继承关系实现汽车分类的类图：</em></p><blockquote><p>分析：汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多<br><img src="https://note.youdao.com/yws/res/2361/WEBRESOURCE8da802979a817c48eecca0c4322b8061" alt="o.jpg"></p></blockquote><p><em>组合关系实现汽车分类的类图：</em></p><blockquote><p>从上图可以看出用继承关系实现会产生很多子类，而且增加新的“动力源”或者增加新的“颜色”都要修改源代码，这违背了开闭原则，显然不可取<br><img src="https://note.youdao.com/yws/res/2366/WEBRESOURCE2c5dab2f41f12cf6f5d94effd3291c85" alt="p.jpg"></p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em>上面一共介绍了 7 种设计原则，它们分别为==开闭原则、里氏替换原则、依赖倒置原则、单一职责原则、接口隔离原则、迪米特法则以及合成复用原则==</em></p><p><strong><em>这 7 种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同。</em></strong></p><blockquote><ul><li>其中，开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭；</li><li>里氏替换原则告诉我们不要破坏继承体系；</li><li>依赖倒置原则告诉我们要面向接口编程；</li><li>单一职责原则告诉我们实现类要职责单一；</li><li>接口隔离原则告诉我们在设计接口的时候要精简单一；</li><li>迪米特法则告诉我们要降低耦合度；</li><li>合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看懂UML类图和时序图</title>
      <link href="/2019/10/14/kan-dong-uml-lei-tu-he-shi-xu-tu/"/>
      <url>/2019/10/14/kan-dong-uml-lei-tu-he-shi-xu-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="看懂UML类图和时序图"><a href="#看懂UML类图和时序图" class="headerlink" title="看懂UML类图和时序图"></a>看懂UML类图和时序图</h2><p>图形使用Enterprise Architect 9.2来画,所有示例详见根目录下的design_patterns.EAP<br><strong><em>==<a href https: design-patterns.readthedocs.io zh_cn latest read_uml.html#dependency"">原文链接</a>==</em></strong></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>请看以下类图，类之间的关系是我们需要关注的<br><img src="https://note.youdao.com/yws/res/1764/WEBRESOURCEd7aa34f602e661b405c479207b2d07c3" alt="a.png"></p><ul><li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类</abstract></li><li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示</li><li>小汽车与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示</li><li>学生与身份证之间是关联关系，使用一根实线表示</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示</li></ul><p>下面我们将介绍这六种关系：</p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><h4 id="泛化关系（generalization）"><a href="#泛化关系（generalization）" class="headerlink" title="泛化关系（generalization）"></a>泛化关系（generalization）</h4><p><em>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)</em></p><p>继承关系为is-a的关系；两个对象如果用is-a来表示，就是继承关系：<br><br>eg:自行车是车、猫是动物</p><p>泛化关系用一条带空心箭头直接表示，如下图（A继承自B）：</p><p><img src="https://note.youdao.com/yws/res/1829/WEBRESOURCE148477c37f9a63f3603b585a485ea709" alt="b.png"></p><p>eg：汽车在实现中有实现，可用汽车定义具体的对象，汽车与SUV之间为泛化关系：</p><p><img src="https://note.youdao.com/yws/res/1841/WEBRESOURCE5803b9647efc3ac6c42eb455984bde54" alt="c.png"></p><p>注：最终代码中，泛化关系表现为继承非抽象类</p><h4 id="实现关系（realize）"><a href="#实现关系（realize）" class="headerlink" title="实现关系（realize）"></a>实现关系（realize）</h4><p>实现关系用一条带空心箭头的虚线表示</p><p>eg：“车”为一个抽象概念，在现实中并无法用来定义对象；只有指明具体的子类（汽车还是自行车）才可以用来定义对象（“车”这个类在C++中用抽象类表示，在Java中用接口这个概念更容易理解）</p><p><img src="https://note.youdao.com/yws/res/1869/WEBRESOURCEdf13ee75feaf2f41f3f900fc86c67ca2" alt="d.png"></p><p>注：最终代码中，实现关系表现为继承抽象类</p><h4 id="聚合关系（aggregation）"><a href="#聚合关系（aggregation）" class="headerlink" title="聚合关系（aggregation）"></a>聚合关系（aggregation）</h4><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p><p><img src="https://note.youdao.com/yws/res/1879/WEBRESOURCE280a26be7a452159b45d144bbf836566" alt="e.png"></p><p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p><p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p><h4 id="组合关系（composition）"><a href="#组合关系（composition）" class="headerlink" title="组合关系（composition）"></a>组合关系（composition）</h4><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p><p><img src="https://note.youdao.com/yws/res/1887/WEBRESOURCE35a42aa703b201fe82ded5f226d3e1c3" alt="f.png"></p><p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p><p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p><h4 id="关联关系（association）"><a href="#关联关系（association）" class="headerlink" title="关联关系（association）"></a>关联关系（association）</h4><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p><p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p><p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p><p><img src="https://note.youdao.com/yws/res/1896/WEBRESOURCE86c446294a9ef91ee318606dee5f7caa" alt="g.png"></p><p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p><h4 id="依赖关系（dependency）"><a href="#依赖关系（dependency）" class="headerlink" title="依赖关系（dependency）"></a>依赖关系（dependency）</h4><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p><p><img src="https://note.youdao.com/yws/res/1903/WEBRESOURCE6ae840efe6108ce0dd5962eccfd04c80" alt="h.png"></p><p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化；依赖关系也可能发生变化；</p><p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p><p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><p>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</p><p>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</p><p>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My First Blog</title>
      <link href="/2019/10/14/2017-conclusion/2017-conclusion/"/>
      <url>/2019/10/14/2017-conclusion/2017-conclusion/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=566261001&auto=1&height=66"></iframe></div><h4 id="First-root"><a href="#First-root" class="headerlink" title="First root"></a>First root</h4><p><strong>First of me</strong></p>]]></content>
      
      
      <categories>
          
          <category> init </category>
          
      </categories>
      
      
        <tags>
            
            <tag> init </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
